##########################################################################################
# Customize file classifications.                                                        #
# Results from files under any classifier will be excluded from LGTM                     #
# statistics.                                                                            #
##########################################################################################

##########################################################################################
# Use the `path_classifiers` block to define changes to the default classification of    #
# files.                                                                                 #
##########################################################################################

path_classifiers:
  docs:
    - "*.md"
  test:
    - "**/Test"
    
#########################################################################################
# Use the extraction block to define changes to the default code extraction process     #
# for one or more languages. The settings for each language are defined in a child      #
# block, with one or more steps.                                                        #
#########################################################################################

extraction: 

  # Define settings for C# analysis
  ##################################
  csharp:
    # The `index` step builds the code and extracts information during the build
    # process.
    index:
      # Specify that all project or solution files should be used for extraction.
      # Default: false.
      all_solutions: false
      # Specify a list of one or more project or solution files for extraction.
      # Default: LGTM chooses the file closest to the root of the repository (this may
      # fail if there are multiple candidates).
      solution: 
        - src/RiaServices.sln
      # By default, LGTM analyzes the code by building it. You can override this,
      # and tell LGTM not to build the code. Beware that this can lead
      # to less accurate results.
      buildless: true
      # Specify MSBuild settings.
      msbuild:
        # Specify the MSBuild configuration to use, for example, debug or release.
        # Default: read from the solution file or files.
        configuration: release
        # Specify the platform to target, for example: x86, x64, or Any CPU.
        # Default: read from the solution file or files.
        platform: Any CPU
        # Specify the MSBuild target. Default: rebuild.
        target: rebuild
      # Specify whether or not to perform a NuGet restore for extraction. Default: true.
      nuget_restore: false
      # Specify a version of Microsoft Visual Studio to use for MSBuild or any custom
      # build commands (build_command). For example:
      #    10 for Visual Studio 2010
      #    12 for Visual Studio 2012
      #    14 for Visual Studio 2015
      #    15 for Visual Studio 2017
      # Default: read from project files
      vstools_version: 16
      # Specify additional options for the extractor,
      # for example --fast to perform a faster extraction that produces a smaller 
      # database.
      #extractor: "--fast"

 
  # Define settings for JavaScript analysis
  ##########################################
  javascript:
     index:
      # Specify a list of files and folders to exclude from extraction.
      exclude:
        - /
