// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EFCoreModels.AdventureWorks
{
    public partial class AdventureworksContext : DbContext
    {
        public AdventureworksContext()
        {
        }

        public AdventureworksContext(DbContextOptions<AdventureworksContext> options)
            : base(options)
        {
        }


        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductSubcategory> ProductSubcategories { get; set; }

        public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

        public virtual DbSet<SalesPerson> SalesPersons { get; set; }
        public virtual DbSet<SalesTerritory> SalesTerritories { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=AdventureWorks;Integrated Security=True;MultipleActiveResultSets=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.Property(e => e.Gender).IsFixedLength();

                entity.Property(e => e.MaritalStatus).IsFixedLength();

                entity.HasOne(e => e.Contact)
                    .WithMany()
                    .HasForeignKey(e => e.ContactID);

                entity.HasOne(e => e.Manager)
                    .WithMany()
                    .HasForeignKey(e => e.ManagerID);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.Class).IsFixedLength();

                entity.Property(e => e.ProductLine).IsFixedLength();

                entity.Property(e => e.SizeUnitMeasureCode).IsFixedLength();

                entity.Property(e => e.Style).IsFixedLength();

                entity.Property(e => e.WeightUnitMeasureCode).IsFixedLength();

                entity.HasOne(e => e.ProductSubcategory)
                    .WithMany()
                    .HasForeignKey(e => e.ProductSubcategoryID);
            });

            modelBuilder.Entity<PurchaseOrderDetail>(entity =>
            {
                entity.HasKey(e => new { e.PurchaseOrderID, e.PurchaseOrderDetailID });

                entity.HasOne(e => e.PurchaseOrder)
                    .WithMany(e => e.PurchaseOrderDetails)
                    .HasForeignKey(e => e.PurchaseOrderID);

                entity.HasOne(e => e.Product)
                    .WithMany(e => e.PurchaseOrderDetails)
                    .HasForeignKey(e => e.ProductID);
            });

            modelBuilder.Entity<PurchaseOrder>(entity =>
            {
                entity.HasKey(e => e.PurchaseOrderID);
            });

            modelBuilder.Entity<SalesPerson>(entity =>
            {
                entity.HasKey(e => e.SalesPersonID);

                entity.HasOne(e => e.Employee)
                    .WithOne(e => e.SalesPerson)
                    .HasForeignKey<SalesPerson>(e => e.SalesPersonID)
                    .IsRequired();

                entity.HasOne(e => e.SalesTerritory)
                   .WithMany()
                   .HasForeignKey(e => e.TerritoryID);
            });

            modelBuilder.Entity<SalesTerritory>(entity =>
            {
                entity.HasKey(e => e.TerritoryID);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
