<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CancelLoadOperation" xml:space="preserve">
    <value>load cancelling</value>
  </data>
  <data name="CancelSubmitOperation" xml:space="preserve">
    <value>submit cancelling</value>
  </data>
  <data name="CannotEvaluateDescriptor" xml:space="preserve">
    <value>The {0} with its PropertyPath equal to '{1}' cannot be evaluated.</value>
  </data>
  <data name="CannotExecuteCommand" xml:space="preserve">
    <value>Cannot execute command when CanExecute is false.</value>
  </data>
  <data name="CannotLoadWhenCanLoadIsFalse" xml:space="preserve">
    <value>A load operation cannot be performed when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false.</value>
  </data>
  <data name="CannotLoadWhenCanLoadIsFalse_DeferLoad" xml:space="preserve">
    <value>DeferLoad cannot execute when CanLoad is false.  Calling DeferLoad initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false.</value>
  </data>
  <data name="CannotLoadWhenCanLoadIsFalse_Filtering" xml:space="preserve">
    <value>FilterDescriptors cannot be applied or modified when CanLoad is false.  Applying or modifying FilterDescriptors initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that apply filters should be disabled when CanLoad is false.</value>
  </data>
  <data name="CannotLoadWhenCanLoadIsFalse_Grouping" xml:space="preserve">
    <value>Grouping cannot be applied or modified when CanLoad is false.  Applying or modifying grouping initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that apply grouping should be disabled when CanLoad is false.  Note that CanGroup is false whenever CanLoad is false, so controls that respect the CanGroup property are automatically disabled.</value>
  </data>
  <data name="CannotLoadWhenCanLoadIsFalse_Paging" xml:space="preserve">
    <value>Page cannot be changed when CanLoad is false.  Changing the page initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that invoke paging should be disabled when CanLoad is false.  Note that CanChangePage is false whenever CanLoad is false, so controls that respect the CanChangePage property are automatically disabled.</value>
  </data>
  <data name="CannotLoadWhenCanLoadIsFalse_PropertySetter" xml:space="preserve">
    <value>Cannot set property '{0}' when CanLoad is false.</value>
  </data>
  <data name="CannotLoadWhenCanLoadIsFalse_QueryParameters" xml:space="preserve">
    <value>QueryParameters cannot be changed when CanLoad is false.  Changing the QueryParameters initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false.</value>
  </data>
  <data name="CannotLoadWhenCanLoadIsFalse_Refresh" xml:space="preserve">
    <value>Refresh cannot execute when CanLoad is false.  Refreshing the data initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false.</value>
  </data>
  <data name="CannotLoadWhenCanLoadIsFalse_Sorting" xml:space="preserve">
    <value>Sorting cannot be applied when CanLoad is false. Applying sorting initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that apply sorting should be disabled when CanLoad is false.  Note that CanSort is false whenever CanLoad is false, so controls that respect the CanSort property are automatically disabled.</value>
  </data>
  <data name="DescriptorPropertyPathIsNull" xml:space="preserve">
    <value>The {0} at index {1} cannot be used because it has a null or empty PropertyPath property.</value>
  </data>
  <data name="DomainContextAlreadySet" xml:space="preserve">
    <value>The DomainContext property can only be set once.</value>
  </data>
  <data name="EntityQueryMethodHasMismatchedArguments" xml:space="preserve">
    <value>The {0} method does not have arguments that match the QueryParameters collection.</value>
  </data>
  <data name="FilterNotSupported" xml:space="preserve">
    <value>FilterDescriptor for property '{0}' on type '{1}' cannot be used because filters for type '{2}' using FilterOperator '{3}' are not supported.</value>
  </data>
  <data name="HasErrorMustBeTrue" xml:space="preserve">
    <value>MarkErrorAsHandled can only be called if HasError is true.</value>
  </data>
  <data name="IncompatibleOperands" xml:space="preserve">
    <value>Operator '{0}' incompatible with operand types '{1}' and '{2}'</value>
  </data>
  <data name="InvalidOperationDuringLoadOrSubmit" xml:space="preserve">
    <value>This operation is not supported during a load or submit operation.</value>
  </data>
  <data name="InvalidTimeSpan" xml:space="preserve">
    <value>The {0} time span must be {1}.</value>
  </data>
  <data name="LoadErrorWasNotHandled" xml:space="preserve">
    <value>An error occurred while loading data through the '{0}' query on DomainContext of type '{1}' and the error was not handled.  If this error is expected, then you must handle the LoadedData event on the DomainDataSource and call LoadedDataEventArgs.MarkErrorAsHandled() to avoid this exception.</value>
  </data>
  <data name="LoadOperation" xml:space="preserve">
    <value>load</value>
  </data>
  <data name="LoadWithinDeferLoad" xml:space="preserve">
    <value>Load() cannot be called inside a DeferLoad() transaction.</value>
  </data>
  <data name="MemberNotFound" xml:space="preserve">
    <value>The type {0} does not expose {1} called '{2}'.</value>
  </data>
  <data name="Method" xml:space="preserve">
    <value>a method</value>
  </data>
  <data name="NoEntitySetMember" xml:space="preserve">
    <value>The DomainContext value must have a public property of type EntitySet&lt;{0}&gt;.</value>
  </data>
  <data name="OperationAlreadyInProgress" xml:space="preserve">
    <value>A {0} operation is already in progress on this DomainDataSource.</value>
  </data>
  <data name="OperationNeedsPropertySet" xml:space="preserve">
    <value>The {0} property needs to be set for {1} operations to succeed.</value>
  </data>
  <data name="Positive" xml:space="preserve">
    <value>positive</value>
  </data>
  <data name="QueryParameterNameIsEmpty" xml:space="preserve">
    <value>The Parameter at index {0} cannot be used because it has a null or empty ParameterName property.</value>
  </data>
  <data name="RejectChangesOperation" xml:space="preserve">
    <value>change reverting</value>
  </data>
  <data name="RequiresPropertyGroupDescription" xml:space="preserve">
    <value>The DomainDataSourceView only supports PropertyGroupDescriptions in its GroupDescriptions collection.</value>
  </data>
  <data name="StrictlyPositive" xml:space="preserve">
    <value>strictly positive</value>
  </data>
  <data name="SubmitErrorWasNotHandled" xml:space="preserve">
    <value>An error occurred while submitting changes on the DomainContext of type '{0}' and the error was not handled.  You must handle the SubmittedChanges event on the DomainDataSource and call SubmittedChangesEventArgs.MarkErrorAsHandled() to avoid this exception.</value>
  </data>
  <data name="SubmitOperation" xml:space="preserve">
    <value>submit</value>
  </data>
  <data name="UnderlyingPropertyIsReadOnly" xml:space="preserve">
    <value>{0} cannot be set because the underlying property is read only.</value>
  </data>
  <data name="ValueMustBeGreaterThanOrEqualTo" xml:space="preserve">
    <value>{0} must be greater than or equal to {1}.</value>
  </data>
</root>