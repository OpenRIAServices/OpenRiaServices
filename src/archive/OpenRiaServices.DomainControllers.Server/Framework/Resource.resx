<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChangeSet_ChangeSetEntryNotFound" xml:space="preserve">
    <value>The specified entity does not exist in the ChangeSet.</value>
  </data>
  <data name="ChangeSet_OriginalNotValidForInsert" xml:space="preserve">
    <value>GetOriginal cannot be called for a new entity being inserted.</value>
  </data>
  <data name="CyclicMetadataTypeAttributesFound" xml:space="preserve">
    <value>The MetadataTypeAttribute on type '{0}' results in a cyclic metadata provider chain. Either remove the attribute or remove the cycle.</value>
  </data>
  <data name="DomainController_AssociationCollectionPropertyIsNull" xml:space="preserve">
    <value>One or more associated objects were passed for collection property '{1}' on type '{0}', but the target collection is null.</value>
  </data>
  <data name="DomainController_InvalidAction" xml:space="preserve">
    <value>This DomainController does not support operation '{0}' for entity '{1}'.</value>
  </data>
  <data name="DomainController_InvalidCollectionMember" xml:space="preserve">
    <value>Association collection member '{0}' does not implement IList and does not have an Add method.</value>
  </data>
  <data name="InvalidAction_UnsupportedFilterType" xml:space="preserve">
    <value>Action '{0}.{1}' has one or more filters applied that do not derive from AuthorizationFilterAttribute. Only authorization filters are supported on DomainController Insert/Update/Delete actions.</value>
  </data>
  <data name="InvalidChangeSet" xml:space="preserve">
    <value>Invalid ChangeSet: {0}</value>
  </data>
  <data name="InvalidChangeSet_AssociatedIdNotInChangeset" xml:space="preserve">
    <value>Id '{0}' specified for association member '{0}.{1}' is invalid.</value>
  </data>
  <data name="InvalidChangeSet_AssociatedIdsCannotBeNull" xml:space="preserve">
    <value>Associated Ids for member '{0}.{1}' cannot be null.</value>
  </data>
  <data name="InvalidChangeSet_DuplicateEntity" xml:space="preserve">
    <value>Only one entry for a given entity instance can exist in the ChangeSet.</value>
  </data>
  <data name="InvalidChangeSet_DuplicateId" xml:space="preserve">
    <value>Id must be unique for each entry.</value>
  </data>
  <data name="InvalidChangeSet_InsertsCantHaveOriginal" xml:space="preserve">
    <value>OriginalEntity cannot be specified for an Insert operation.</value>
  </data>
  <data name="InvalidChangeSet_InvalidAssociationMember" xml:space="preserve">
    <value>Association member '{0}.{1}' specified in the ChangeSet does not exist or is not marked with AssociationAttribute.</value>
  </data>
  <data name="InvalidChangeSet_MustBeSameType" xml:space="preserve">
    <value>Entity and OriginalEntity must be of the same type.</value>
  </data>
  <data name="InvalidChangeSet_NullEntity" xml:space="preserve">
    <value>Entity cannot be null.</value>
  </data>
  <data name="InvalidType" xml:space="preserve">
    <value>Type '{0}' must derive from '{1}'.</value>
  </data>
  <data name="MetadataProviderAttribute_MissingConstructor" xml:space="preserve">
    <value>MetadataProvider type '{0}' must have a constructor with a single parameter of type 'MetadataProvider'.</value>
  </data>
</root>