//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataTests.AdventureWorks.LTS
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Threading.Tasks;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The 'Employee' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.AdventureWorks")]
    public sealed partial class Employee : Entity
    {
        
        private DateTime _birthDate;
        
        private int _contactID;
        
        private bool _currentFlag;
        
        private int _employeeID;
        
        private string _gender;
        
        private DateTime _hireDate;
        
        private string _loginID;
        
        private EntityRef<Employee> _manager;
        
        private Nullable<int> _managerID;
        
        private string _maritalStatus;
        
        private DateTime _modifiedDate;
        
        private string _nationalIDNumber;
        
        private EntityCollection<PurchaseOrder> _purchaseOrders;
        
        private EntityCollection<Employee> _reports;
        
        private Guid _rowguid;
        
        private bool _salariedFlag;
        
        private short _sickLeaveHours;
        
        private string _title;
        
        private short _vacationHours;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBirthDateChanging(DateTime value);
        partial void OnBirthDateChanged();
        partial void OnContactIDChanging(int value);
        partial void OnContactIDChanged();
        partial void OnCurrentFlagChanging(bool value);
        partial void OnCurrentFlagChanged();
        partial void OnEmployeeIDChanging(int value);
        partial void OnEmployeeIDChanged();
        partial void OnGenderChanging(string value);
        partial void OnGenderChanged();
        partial void OnHireDateChanging(DateTime value);
        partial void OnHireDateChanged();
        partial void OnLoginIDChanging(string value);
        partial void OnLoginIDChanged();
        partial void OnManagerIDChanging(Nullable<int> value);
        partial void OnManagerIDChanged();
        partial void OnMaritalStatusChanging(string value);
        partial void OnMaritalStatusChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnNationalIDNumberChanging(string value);
        partial void OnNationalIDNumberChanged();
        partial void OnrowguidChanging(Guid value);
        partial void OnrowguidChanged();
        partial void OnSalariedFlagChanging(bool value);
        partial void OnSalariedFlagChanged();
        partial void OnSickLeaveHoursChanging(short value);
        partial void OnSickLeaveHoursChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnVacationHoursChanging(short value);
        partial void OnVacationHoursChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee"/> class.
        /// </summary>
        public Employee()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BirthDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime BirthDate
        {
            get
            {
                return this._birthDate;
            }
            set
            {
                if ((this._birthDate != value))
                {
                    this.OnBirthDateChanging(value);
                    this.RaiseDataMemberChanging("BirthDate");
                    this.ValidateProperty("BirthDate", value);
                    this._birthDate = value;
                    this.RaiseDataMemberChanged("BirthDate");
                    this.OnBirthDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public int ContactID
        {
            get
            {
                return this._contactID;
            }
            set
            {
                if ((this._contactID != value))
                {
                    this.OnContactIDChanging(value);
                    this.RaiseDataMemberChanging("ContactID");
                    this.ValidateProperty("ContactID", value);
                    this._contactID = value;
                    this.RaiseDataMemberChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrentFlag' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public bool CurrentFlag
        {
            get
            {
                return this._currentFlag;
            }
            set
            {
                if ((this._currentFlag != value))
                {
                    this.OnCurrentFlagChanging(value);
                    this.RaiseDataMemberChanging("CurrentFlag");
                    this.ValidateProperty("CurrentFlag", value);
                    this._currentFlag = value;
                    this.RaiseDataMemberChanged("CurrentFlag");
                    this.OnCurrentFlagChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaisePropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Gender' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(1)]
        public string Gender
        {
            get
            {
                return this._gender;
            }
            set
            {
                if ((this._gender != value))
                {
                    this.OnGenderChanging(value);
                    this.RaiseDataMemberChanging("Gender");
                    this.ValidateProperty("Gender", value);
                    this._gender = value;
                    this.RaiseDataMemberChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HireDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime HireDate
        {
            get
            {
                return this._hireDate;
            }
            set
            {
                if ((this._hireDate != value))
                {
                    this.OnHireDateChanging(value);
                    this.RaiseDataMemberChanging("HireDate");
                    this.ValidateProperty("HireDate", value);
                    this._hireDate = value;
                    this.RaiseDataMemberChanged("HireDate");
                    this.OnHireDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LoginID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(256)]
        public string LoginID
        {
            get
            {
                return this._loginID;
            }
            set
            {
                if ((this._loginID != value))
                {
                    this.OnLoginIDChanging(value);
                    this.RaiseDataMemberChanging("LoginID");
                    this.ValidateProperty("LoginID", value);
                    this._loginID = value;
                    this.RaiseDataMemberChanged("LoginID");
                    this.OnLoginIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Employee", "ManagerID", "EmployeeID", IsForeignKey=true)]
        public Employee Manager
        {
            get
            {
                if ((this._manager == null))
                {
                    this._manager = new EntityRef<Employee>(this, "Manager", this.FilterManager);
                }
                return this._manager.Entity;
            }
            set
            {
                Employee previous = this.Manager;
                if ((previous != value))
                {
                    this.ValidateProperty("Manager", value);
                    if ((previous != null))
                    {
                        this._manager.Entity = null;
                        previous.Reports.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ManagerID = value.EmployeeID;
                    }
                    else
                    {
                        this.ManagerID = default(Nullable<int>);
                    }
                    this._manager.Entity = value;
                    if ((value != null))
                    {
                        value.Reports.Add(this);
                    }
                    this.RaisePropertyChanged("Manager");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ManagerID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ManagerID
        {
            get
            {
                return this._managerID;
            }
            set
            {
                if ((this._managerID != value))
                {
                    this.OnManagerIDChanging(value);
                    this.RaiseDataMemberChanging("ManagerID");
                    this.ValidateProperty("ManagerID", value);
                    this._managerID = value;
                    this.RaiseDataMemberChanged("ManagerID");
                    this.OnManagerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaritalStatus' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(1)]
        public string MaritalStatus
        {
            get
            {
                return this._maritalStatus;
            }
            set
            {
                if ((this._maritalStatus != value))
                {
                    this.OnMaritalStatusChanging(value);
                    this.RaiseDataMemberChanging("MaritalStatus");
                    this.ValidateProperty("MaritalStatus", value);
                    this._maritalStatus = value;
                    this.RaiseDataMemberChanged("MaritalStatus");
                    this.OnMaritalStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                if ((this._modifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("ModifiedDate");
                    this.ValidateProperty("ModifiedDate", value);
                    this._modifiedDate = value;
                    this.RaiseDataMemberChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NationalIDNumber' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(15)]
        public string NationalIDNumber
        {
            get
            {
                return this._nationalIDNumber;
            }
            set
            {
                if ((this._nationalIDNumber != value))
                {
                    this.OnNationalIDNumberChanging(value);
                    this.RaiseDataMemberChanging("NationalIDNumber");
                    this.ValidateProperty("NationalIDNumber", value);
                    this._nationalIDNumber = value;
                    this.RaiseDataMemberChanged("NationalIDNumber");
                    this.OnNationalIDNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PurchaseOrder"/> entity instances.
        /// </summary>
        [Association("Employee_PurchaseOrder", "EmployeeID", "EmployeeID")]
        public EntityCollection<PurchaseOrder> PurchaseOrders
        {
            get
            {
                if ((this._purchaseOrders == null))
                {
                    this._purchaseOrders = new EntityCollection<PurchaseOrder>(this, "PurchaseOrders", this.FilterPurchaseOrders, this.AttachPurchaseOrders, this.DetachPurchaseOrders);
                }
                return this._purchaseOrders;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entity instances.
        /// </summary>
        [Association("Employee_Employee", "EmployeeID", "ManagerID")]
        public EntityCollection<Employee> Reports
        {
            get
            {
                if ((this._reports == null))
                {
                    this._reports = new EntityCollection<Employee>(this, "Reports", this.FilterReports, this.AttachReports, this.DetachReports);
                }
                return this._reports;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'rowguid' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid rowguid
        {
            get
            {
                return this._rowguid;
            }
            set
            {
                if ((this._rowguid != value))
                {
                    this.OnrowguidChanging(value);
                    this.RaiseDataMemberChanging("rowguid");
                    this.ValidateProperty("rowguid", value);
                    this._rowguid = value;
                    this.RaiseDataMemberChanged("rowguid");
                    this.OnrowguidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalariedFlag' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public bool SalariedFlag
        {
            get
            {
                return this._salariedFlag;
            }
            set
            {
                if ((this._salariedFlag != value))
                {
                    this.OnSalariedFlagChanging(value);
                    this.RaiseDataMemberChanging("SalariedFlag");
                    this.ValidateProperty("SalariedFlag", value);
                    this._salariedFlag = value;
                    this.RaiseDataMemberChanged("SalariedFlag");
                    this.OnSalariedFlagChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SickLeaveHours' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public short SickLeaveHours
        {
            get
            {
                return this._sickLeaveHours;
            }
            set
            {
                if ((this._sickLeaveHours != value))
                {
                    this.OnSickLeaveHoursChanging(value);
                    this.RaiseDataMemberChanging("SickLeaveHours");
                    this.ValidateProperty("SickLeaveHours", value);
                    this._sickLeaveHours = value;
                    this.RaiseDataMemberChanged("SickLeaveHours");
                    this.OnSickLeaveHoursChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VacationHours' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public short VacationHours
        {
            get
            {
                return this._vacationHours;
            }
            set
            {
                if ((this._vacationHours != value))
                {
                    this.OnVacationHoursChanging(value);
                    this.RaiseDataMemberChanging("VacationHours");
                    this.ValidateProperty("VacationHours", value);
                    this._vacationHours = value;
                    this.RaiseDataMemberChanged("VacationHours");
                    this.OnVacationHoursChanged();
                }
            }
        }
        
        private bool FilterManager(Employee entity)
        {
            return (entity.EmployeeID == this.ManagerID);
        }
        
        private void AttachPurchaseOrders(PurchaseOrder entity)
        {
            entity.Employee = this;
        }
        
        private void DetachPurchaseOrders(PurchaseOrder entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterPurchaseOrders(PurchaseOrder entity)
        {
            return (entity.EmployeeID == this.EmployeeID);
        }
        
        private void AttachReports(Employee entity)
        {
            entity.Manager = this;
        }
        
        private void DetachReports(Employee entity)
        {
            entity.Manager = null;
        }
        
        private bool FilterReports(Employee entity)
        {
            return (entity.ManagerID == this.EmployeeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._employeeID;
        }
    }
    
    /// <summary>
    /// The 'Product' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.AdventureWorks")]
    public sealed partial class Product : Entity
    {
        
        private string _class;
        
        private string _color;
        
        private int _daysToManufacture;
        
        private Nullable<DateTime> _discontinuedDate;
        
        private bool _finishedGoodsFlag;
        
        private decimal _listPrice;
        
        private bool _makeFlag;
        
        private DateTime _modifiedDate;
        
        private string _name;
        
        private int _productID;
        
        private string _productLine;
        
        private Nullable<int> _productModelID;
        
        private string _productNumber;
        
        private Nullable<int> _productSubcategoryID;
        
        private EntityCollection<PurchaseOrderDetail> _purchaseOrderDetails;
        
        private short _reorderPoint;
        
        private Guid _rowguid;
        
        private Nullable<DateTime> _sellEndDate;
        
        private DateTime _sellStartDate;
        
        private string _size;
        
        private string _sizeUnitMeasureCode;
        
        private decimal _standardCost;
        
        private string _style;
        
        private Nullable<decimal> _weight;
        
        private string _weightUnitMeasureCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClassChanging(string value);
        partial void OnClassChanged();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnDaysToManufactureChanging(int value);
        partial void OnDaysToManufactureChanged();
        partial void OnDiscontinuedDateChanging(Nullable<DateTime> value);
        partial void OnDiscontinuedDateChanged();
        partial void OnFinishedGoodsFlagChanging(bool value);
        partial void OnFinishedGoodsFlagChanged();
        partial void OnListPriceChanging(decimal value);
        partial void OnListPriceChanged();
        partial void OnMakeFlagChanging(bool value);
        partial void OnMakeFlagChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductLineChanging(string value);
        partial void OnProductLineChanged();
        partial void OnProductModelIDChanging(Nullable<int> value);
        partial void OnProductModelIDChanged();
        partial void OnProductNumberChanging(string value);
        partial void OnProductNumberChanged();
        partial void OnProductSubcategoryIDChanging(Nullable<int> value);
        partial void OnProductSubcategoryIDChanged();
        partial void OnReorderPointChanging(short value);
        partial void OnReorderPointChanged();
        partial void OnrowguidChanging(Guid value);
        partial void OnrowguidChanged();
        partial void OnSellEndDateChanging(Nullable<DateTime> value);
        partial void OnSellEndDateChanged();
        partial void OnSellStartDateChanging(DateTime value);
        partial void OnSellStartDateChanged();
        partial void OnSizeChanging(string value);
        partial void OnSizeChanged();
        partial void OnSizeUnitMeasureCodeChanging(string value);
        partial void OnSizeUnitMeasureCodeChanged();
        partial void OnStandardCostChanging(decimal value);
        partial void OnStandardCostChanged();
        partial void OnStyleChanging(string value);
        partial void OnStyleChanged();
        partial void OnWeightChanging(Nullable<decimal> value);
        partial void OnWeightChanged();
        partial void OnWeightUnitMeasureCodeChanging(string value);
        partial void OnWeightUnitMeasureCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Product"/> class.
        /// </summary>
        public Product()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Class' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(2)]
        public string Class
        {
            get
            {
                return this._class;
            }
            set
            {
                if ((this._class != value))
                {
                    this.OnClassChanging(value);
                    this.RaiseDataMemberChanging("Class");
                    this.ValidateProperty("Class", value);
                    this._class = value;
                    this.RaiseDataMemberChanged("Class");
                    this.OnClassChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Color' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(15)]
        public string Color
        {
            get
            {
                return this._color;
            }
            set
            {
                if ((this._color != value))
                {
                    this.OnColorChanging(value);
                    this.RaiseDataMemberChanging("Color");
                    this.ValidateProperty("Color", value);
                    this._color = value;
                    this.RaiseDataMemberChanged("Color");
                    this.OnColorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DaysToManufacture' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public int DaysToManufacture
        {
            get
            {
                return this._daysToManufacture;
            }
            set
            {
                if ((this._daysToManufacture != value))
                {
                    this.OnDaysToManufactureChanging(value);
                    this.RaiseDataMemberChanging("DaysToManufacture");
                    this.ValidateProperty("DaysToManufacture", value);
                    this._daysToManufacture = value;
                    this.RaiseDataMemberChanged("DaysToManufacture");
                    this.OnDaysToManufactureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DiscontinuedDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<DateTime> DiscontinuedDate
        {
            get
            {
                return this._discontinuedDate;
            }
            set
            {
                if ((this._discontinuedDate != value))
                {
                    this.OnDiscontinuedDateChanging(value);
                    this.RaiseDataMemberChanging("DiscontinuedDate");
                    this.ValidateProperty("DiscontinuedDate", value);
                    this._discontinuedDate = value;
                    this.RaiseDataMemberChanged("DiscontinuedDate");
                    this.OnDiscontinuedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FinishedGoodsFlag' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public bool FinishedGoodsFlag
        {
            get
            {
                return this._finishedGoodsFlag;
            }
            set
            {
                if ((this._finishedGoodsFlag != value))
                {
                    this.OnFinishedGoodsFlagChanging(value);
                    this.RaiseDataMemberChanging("FinishedGoodsFlag");
                    this.ValidateProperty("FinishedGoodsFlag", value);
                    this._finishedGoodsFlag = value;
                    this.RaiseDataMemberChanged("FinishedGoodsFlag");
                    this.OnFinishedGoodsFlagChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ListPrice' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal ListPrice
        {
            get
            {
                return this._listPrice;
            }
            set
            {
                if ((this._listPrice != value))
                {
                    this.OnListPriceChanging(value);
                    this.RaiseDataMemberChanging("ListPrice");
                    this.ValidateProperty("ListPrice", value);
                    this._listPrice = value;
                    this.RaiseDataMemberChanged("ListPrice");
                    this.OnListPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MakeFlag' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public bool MakeFlag
        {
            get
            {
                return this._makeFlag;
            }
            set
            {
                if ((this._makeFlag != value))
                {
                    this.OnMakeFlagChanging(value);
                    this.RaiseDataMemberChanging("MakeFlag");
                    this.ValidateProperty("MakeFlag", value);
                    this._makeFlag = value;
                    this.RaiseDataMemberChanged("MakeFlag");
                    this.OnMakeFlagChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                if ((this._modifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("ModifiedDate");
                    this.ValidateProperty("ModifiedDate", value);
                    this._modifiedDate = value;
                    this.RaiseDataMemberChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaisePropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductLine' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(2)]
        public string ProductLine
        {
            get
            {
                return this._productLine;
            }
            set
            {
                if ((this._productLine != value))
                {
                    this.OnProductLineChanging(value);
                    this.RaiseDataMemberChanging("ProductLine");
                    this.ValidateProperty("ProductLine", value);
                    this._productLine = value;
                    this.RaiseDataMemberChanged("ProductLine");
                    this.OnProductLineChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductModelID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ProductModelID
        {
            get
            {
                return this._productModelID;
            }
            set
            {
                if ((this._productModelID != value))
                {
                    this.OnProductModelIDChanging(value);
                    this.RaiseDataMemberChanging("ProductModelID");
                    this.ValidateProperty("ProductModelID", value);
                    this._productModelID = value;
                    this.RaiseDataMemberChanged("ProductModelID");
                    this.OnProductModelIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductNumber' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(25)]
        public string ProductNumber
        {
            get
            {
                return this._productNumber;
            }
            set
            {
                if ((this._productNumber != value))
                {
                    this.OnProductNumberChanging(value);
                    this.RaiseDataMemberChanging("ProductNumber");
                    this.ValidateProperty("ProductNumber", value);
                    this._productNumber = value;
                    this.RaiseDataMemberChanged("ProductNumber");
                    this.OnProductNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductSubcategoryID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ProductSubcategoryID
        {
            get
            {
                return this._productSubcategoryID;
            }
            set
            {
                if ((this._productSubcategoryID != value))
                {
                    this.OnProductSubcategoryIDChanging(value);
                    this.RaiseDataMemberChanging("ProductSubcategoryID");
                    this.ValidateProperty("ProductSubcategoryID", value);
                    this._productSubcategoryID = value;
                    this.RaiseDataMemberChanged("ProductSubcategoryID");
                    this.OnProductSubcategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PurchaseOrderDetail"/> entity instances.
        /// </summary>
        [Association("Product_PurchaseOrderDetail", "ProductID", "ProductID")]
        public EntityCollection<PurchaseOrderDetail> PurchaseOrderDetails
        {
            get
            {
                if ((this._purchaseOrderDetails == null))
                {
                    this._purchaseOrderDetails = new EntityCollection<PurchaseOrderDetail>(this, "PurchaseOrderDetails", this.FilterPurchaseOrderDetails, this.AttachPurchaseOrderDetails, this.DetachPurchaseOrderDetails);
                }
                return this._purchaseOrderDetails;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReorderPoint' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public short ReorderPoint
        {
            get
            {
                return this._reorderPoint;
            }
            set
            {
                if ((this._reorderPoint != value))
                {
                    this.OnReorderPointChanging(value);
                    this.RaiseDataMemberChanging("ReorderPoint");
                    this.ValidateProperty("ReorderPoint", value);
                    this._reorderPoint = value;
                    this.RaiseDataMemberChanged("ReorderPoint");
                    this.OnReorderPointChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'rowguid' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid rowguid
        {
            get
            {
                return this._rowguid;
            }
            set
            {
                if ((this._rowguid != value))
                {
                    this.OnrowguidChanging(value);
                    this.RaiseDataMemberChanging("rowguid");
                    this.ValidateProperty("rowguid", value);
                    this._rowguid = value;
                    this.RaiseDataMemberChanged("rowguid");
                    this.OnrowguidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SellEndDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<DateTime> SellEndDate
        {
            get
            {
                return this._sellEndDate;
            }
            set
            {
                if ((this._sellEndDate != value))
                {
                    this.OnSellEndDateChanging(value);
                    this.RaiseDataMemberChanging("SellEndDate");
                    this.ValidateProperty("SellEndDate", value);
                    this._sellEndDate = value;
                    this.RaiseDataMemberChanged("SellEndDate");
                    this.OnSellEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SellStartDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime SellStartDate
        {
            get
            {
                return this._sellStartDate;
            }
            set
            {
                if ((this._sellStartDate != value))
                {
                    this.OnSellStartDateChanging(value);
                    this.RaiseDataMemberChanging("SellStartDate");
                    this.ValidateProperty("SellStartDate", value);
                    this._sellStartDate = value;
                    this.RaiseDataMemberChanged("SellStartDate");
                    this.OnSellStartDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Size' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(5)]
        public string Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if ((this._size != value))
                {
                    this.OnSizeChanging(value);
                    this.RaiseDataMemberChanging("Size");
                    this.ValidateProperty("Size", value);
                    this._size = value;
                    this.RaiseDataMemberChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SizeUnitMeasureCode' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(3)]
        public string SizeUnitMeasureCode
        {
            get
            {
                return this._sizeUnitMeasureCode;
            }
            set
            {
                if ((this._sizeUnitMeasureCode != value))
                {
                    this.OnSizeUnitMeasureCodeChanging(value);
                    this.RaiseDataMemberChanging("SizeUnitMeasureCode");
                    this.ValidateProperty("SizeUnitMeasureCode", value);
                    this._sizeUnitMeasureCode = value;
                    this.RaiseDataMemberChanged("SizeUnitMeasureCode");
                    this.OnSizeUnitMeasureCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StandardCost' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal StandardCost
        {
            get
            {
                return this._standardCost;
            }
            set
            {
                if ((this._standardCost != value))
                {
                    this.OnStandardCostChanging(value);
                    this.RaiseDataMemberChanging("StandardCost");
                    this.ValidateProperty("StandardCost", value);
                    this._standardCost = value;
                    this.RaiseDataMemberChanged("StandardCost");
                    this.OnStandardCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Style' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(2)]
        public string Style
        {
            get
            {
                return this._style;
            }
            set
            {
                if ((this._style != value))
                {
                    this.OnStyleChanging(value);
                    this.RaiseDataMemberChanging("Style");
                    this.ValidateProperty("Style", value);
                    this._style = value;
                    this.RaiseDataMemberChanged("Style");
                    this.OnStyleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Weight' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    this.OnWeightChanging(value);
                    this.RaiseDataMemberChanging("Weight");
                    this.ValidateProperty("Weight", value);
                    this._weight = value;
                    this.RaiseDataMemberChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WeightUnitMeasureCode' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(3)]
        public string WeightUnitMeasureCode
        {
            get
            {
                return this._weightUnitMeasureCode;
            }
            set
            {
                if ((this._weightUnitMeasureCode != value))
                {
                    this.OnWeightUnitMeasureCodeChanging(value);
                    this.RaiseDataMemberChanging("WeightUnitMeasureCode");
                    this.ValidateProperty("WeightUnitMeasureCode", value);
                    this._weightUnitMeasureCode = value;
                    this.RaiseDataMemberChanged("WeightUnitMeasureCode");
                    this.OnWeightUnitMeasureCodeChanged();
                }
            }
        }
        
        private void AttachPurchaseOrderDetails(PurchaseOrderDetail entity)
        {
            entity.Product = this;
        }
        
        private void DetachPurchaseOrderDetails(PurchaseOrderDetail entity)
        {
            entity.Product = null;
        }
        
        private bool FilterPurchaseOrderDetails(PurchaseOrderDetail entity)
        {
            return (entity.ProductID == this.ProductID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productID;
        }
    }
    
    /// <summary>
    /// The 'PurchaseOrder' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.AdventureWorks")]
    public sealed partial class PurchaseOrder : Entity
    {
        
        private EntityRef<Employee> _employee;
        
        private int _employeeID;
        
        private decimal _freight;
        
        private DateTime _modifiedDate;
        
        private DateTime _orderDate;
        
        private EntityCollection<PurchaseOrderDetail> _purchaseOrderDetails;
        
        private int _purchaseOrderID;
        
        private byte _revisionNumber;
        
        private Nullable<DateTime> _shipDate;
        
        private int _shipMethodID;
        
        private byte _status;
        
        private decimal _subTotal;
        
        private decimal _taxAmt;
        
        private decimal _totalDue;
        
        private int _vendorID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEmployeeIDChanging(int value);
        partial void OnEmployeeIDChanged();
        partial void OnFreightChanging(decimal value);
        partial void OnFreightChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnOrderDateChanging(DateTime value);
        partial void OnOrderDateChanged();
        partial void OnPurchaseOrderIDChanging(int value);
        partial void OnPurchaseOrderIDChanged();
        partial void OnRevisionNumberChanging(byte value);
        partial void OnRevisionNumberChanged();
        partial void OnShipDateChanging(Nullable<DateTime> value);
        partial void OnShipDateChanged();
        partial void OnShipMethodIDChanging(int value);
        partial void OnShipMethodIDChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();
        partial void OnSubTotalChanging(decimal value);
        partial void OnSubTotalChanged();
        partial void OnTaxAmtChanging(decimal value);
        partial void OnTaxAmtChanged();
        partial void OnTotalDueChanging(decimal value);
        partial void OnTotalDueChanged();
        partial void OnVendorIDChanging(int value);
        partial void OnVendorIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrder"/> class.
        /// </summary>
        public PurchaseOrder()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_PurchaseOrder", "EmployeeID", "EmployeeID", IsForeignKey=true)]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.PurchaseOrders.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EmployeeID = value.EmployeeID;
                    }
                    else
                    {
                        this.EmployeeID = default(int);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.PurchaseOrders.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public int EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.RaiseDataMemberChanging("EmployeeID");
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaiseDataMemberChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Freight' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal Freight
        {
            get
            {
                return this._freight;
            }
            set
            {
                if ((this._freight != value))
                {
                    this.OnFreightChanging(value);
                    this.RaiseDataMemberChanging("Freight");
                    this.ValidateProperty("Freight", value);
                    this._freight = value;
                    this.RaiseDataMemberChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                if ((this._modifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("ModifiedDate");
                    this.ValidateProperty("ModifiedDate", value);
                    this._modifiedDate = value;
                    this.RaiseDataMemberChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime OrderDate
        {
            get
            {
                return this._orderDate;
            }
            set
            {
                if ((this._orderDate != value))
                {
                    this.OnOrderDateChanging(value);
                    this.RaiseDataMemberChanging("OrderDate");
                    this.ValidateProperty("OrderDate", value);
                    this._orderDate = value;
                    this.RaiseDataMemberChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PurchaseOrderDetail"/> entity instances.
        /// </summary>
        [Association("PurchaseOrder_PurchaseOrderDetail", "PurchaseOrderID", "PurchaseOrderID")]
        public EntityCollection<PurchaseOrderDetail> PurchaseOrderDetails
        {
            get
            {
                if ((this._purchaseOrderDetails == null))
                {
                    this._purchaseOrderDetails = new EntityCollection<PurchaseOrderDetail>(this, "PurchaseOrderDetails", this.FilterPurchaseOrderDetails, this.AttachPurchaseOrderDetails, this.DetachPurchaseOrderDetails);
                }
                return this._purchaseOrderDetails;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchaseOrderID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PurchaseOrderID
        {
            get
            {
                return this._purchaseOrderID;
            }
            set
            {
                if ((this._purchaseOrderID != value))
                {
                    this.OnPurchaseOrderIDChanging(value);
                    this.ValidateProperty("PurchaseOrderID", value);
                    this._purchaseOrderID = value;
                    this.RaisePropertyChanged("PurchaseOrderID");
                    this.OnPurchaseOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RevisionNumber' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public byte RevisionNumber
        {
            get
            {
                return this._revisionNumber;
            }
            set
            {
                if ((this._revisionNumber != value))
                {
                    this.OnRevisionNumberChanging(value);
                    this.RaiseDataMemberChanging("RevisionNumber");
                    this.ValidateProperty("RevisionNumber", value);
                    this._revisionNumber = value;
                    this.RaiseDataMemberChanged("RevisionNumber");
                    this.OnRevisionNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<DateTime> ShipDate
        {
            get
            {
                return this._shipDate;
            }
            set
            {
                if ((this._shipDate != value))
                {
                    this.OnShipDateChanging(value);
                    this.RaiseDataMemberChanging("ShipDate");
                    this.ValidateProperty("ShipDate", value);
                    this._shipDate = value;
                    this.RaiseDataMemberChanged("ShipDate");
                    this.OnShipDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipMethodID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public int ShipMethodID
        {
            get
            {
                return this._shipMethodID;
            }
            set
            {
                if ((this._shipMethodID != value))
                {
                    this.OnShipMethodIDChanging(value);
                    this.RaiseDataMemberChanging("ShipMethodID");
                    this.ValidateProperty("ShipMethodID", value);
                    this._shipMethodID = value;
                    this.RaiseDataMemberChanged("ShipMethodID");
                    this.OnShipMethodIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SubTotal' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal SubTotal
        {
            get
            {
                return this._subTotal;
            }
            set
            {
                if ((this._subTotal != value))
                {
                    this.OnSubTotalChanging(value);
                    this.RaiseDataMemberChanging("SubTotal");
                    this.ValidateProperty("SubTotal", value);
                    this._subTotal = value;
                    this.RaiseDataMemberChanged("SubTotal");
                    this.OnSubTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaxAmt' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal TaxAmt
        {
            get
            {
                return this._taxAmt;
            }
            set
            {
                if ((this._taxAmt != value))
                {
                    this.OnTaxAmtChanging(value);
                    this.RaiseDataMemberChanging("TaxAmt");
                    this.ValidateProperty("TaxAmt", value);
                    this._taxAmt = value;
                    this.RaiseDataMemberChanged("TaxAmt");
                    this.OnTaxAmtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalDue' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public decimal TotalDue
        {
            get
            {
                return this._totalDue;
            }
            set
            {
                if ((this._totalDue != value))
                {
                    this.OnTotalDueChanging(value);
                    this.RaiseDataMemberChanging("TotalDue");
                    this.ValidateProperty("TotalDue", value);
                    this._totalDue = value;
                    this.RaiseDataMemberChanged("TotalDue");
                    this.OnTotalDueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VendorID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public int VendorID
        {
            get
            {
                return this._vendorID;
            }
            set
            {
                if ((this._vendorID != value))
                {
                    this.OnVendorIDChanging(value);
                    this.RaiseDataMemberChanging("VendorID");
                    this.ValidateProperty("VendorID", value);
                    this._vendorID = value;
                    this.RaiseDataMemberChanged("VendorID");
                    this.OnVendorIDChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeID == this.EmployeeID);
        }
        
        private void AttachPurchaseOrderDetails(PurchaseOrderDetail entity)
        {
            entity.PurchaseOrder = this;
        }
        
        private void DetachPurchaseOrderDetails(PurchaseOrderDetail entity)
        {
            entity.PurchaseOrder = null;
        }
        
        private bool FilterPurchaseOrderDetails(PurchaseOrderDetail entity)
        {
            return (entity.PurchaseOrderID == this.PurchaseOrderID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._purchaseOrderID;
        }
    }
    
    /// <summary>
    /// The 'PurchaseOrderDetail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.AdventureWorks")]
    public sealed partial class PurchaseOrderDetail : Entity
    {
        
        private DateTime _dueDate;
        
        private decimal _lineTotal;
        
        private DateTime _modifiedDate;
        
        private short _orderQty;
        
        private EntityRef<Product> _product;
        
        private int _productID;
        
        private EntityRef<PurchaseOrder> _purchaseOrder;
        
        private int _purchaseOrderDetailID;
        
        private int _purchaseOrderID;
        
        private decimal _receivedQty;
        
        private decimal _rejectedQty;
        
        private decimal _stockedQty;
        
        private decimal _unitPrice;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDueDateChanging(DateTime value);
        partial void OnDueDateChanged();
        partial void OnLineTotalChanging(decimal value);
        partial void OnLineTotalChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnOrderQtyChanging(short value);
        partial void OnOrderQtyChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnPurchaseOrderDetailIDChanging(int value);
        partial void OnPurchaseOrderDetailIDChanged();
        partial void OnPurchaseOrderIDChanging(int value);
        partial void OnPurchaseOrderIDChanged();
        partial void OnReceivedQtyChanging(decimal value);
        partial void OnReceivedQtyChanged();
        partial void OnRejectedQtyChanging(decimal value);
        partial void OnRejectedQtyChanged();
        partial void OnStockedQtyChanging(decimal value);
        partial void OnStockedQtyChanged();
        partial void OnUnitPriceChanging(decimal value);
        partial void OnUnitPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderDetail"/> class.
        /// </summary>
        public PurchaseOrderDetail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DueDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    this.OnDueDateChanging(value);
                    this.RaiseDataMemberChanging("DueDate");
                    this.ValidateProperty("DueDate", value);
                    this._dueDate = value;
                    this.RaiseDataMemberChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LineTotal' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public decimal LineTotal
        {
            get
            {
                return this._lineTotal;
            }
            set
            {
                if ((this._lineTotal != value))
                {
                    this.OnLineTotalChanging(value);
                    this.RaiseDataMemberChanging("LineTotal");
                    this.ValidateProperty("LineTotal", value);
                    this._lineTotal = value;
                    this.RaiseDataMemberChanged("LineTotal");
                    this.OnLineTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                if ((this._modifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("ModifiedDate");
                    this.ValidateProperty("ModifiedDate", value);
                    this._modifiedDate = value;
                    this.RaiseDataMemberChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderQty' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public short OrderQty
        {
            get
            {
                return this._orderQty;
            }
            set
            {
                if ((this._orderQty != value))
                {
                    this.OnOrderQtyChanging(value);
                    this.RaiseDataMemberChanging("OrderQty");
                    this.ValidateProperty("OrderQty", value);
                    this._orderQty = value;
                    this.RaiseDataMemberChanged("OrderQty");
                    this.OnOrderQtyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_PurchaseOrderDetail", "ProductID", "ProductID", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.PurchaseOrderDetails.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductID = value.ProductID;
                    }
                    else
                    {
                        this.ProductID = default(int);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.PurchaseOrderDetails.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PurchaseOrder"/> entity.
        /// </summary>
        [Association("PurchaseOrder_PurchaseOrderDetail", "PurchaseOrderID", "PurchaseOrderID", IsForeignKey=true)]
        public PurchaseOrder PurchaseOrder
        {
            get
            {
                if ((this._purchaseOrder == null))
                {
                    this._purchaseOrder = new EntityRef<PurchaseOrder>(this, "PurchaseOrder", this.FilterPurchaseOrder);
                }
                return this._purchaseOrder.Entity;
            }
            set
            {
                PurchaseOrder previous = this.PurchaseOrder;
                if ((previous != value))
                {
                    this.ValidateProperty("PurchaseOrder", value);
                    if ((previous != null))
                    {
                        this._purchaseOrder.Entity = null;
                        previous.PurchaseOrderDetails.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PurchaseOrderID = value.PurchaseOrderID;
                    }
                    else
                    {
                        this.PurchaseOrderID = default(int);
                    }
                    this._purchaseOrder.Entity = value;
                    if ((value != null))
                    {
                        value.PurchaseOrderDetails.Add(this);
                    }
                    this.RaisePropertyChanged("PurchaseOrder");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchaseOrderDetailID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int PurchaseOrderDetailID
        {
            get
            {
                return this._purchaseOrderDetailID;
            }
            set
            {
                if ((this._purchaseOrderDetailID != value))
                {
                    this.OnPurchaseOrderDetailIDChanging(value);
                    this.RaiseDataMemberChanging("PurchaseOrderDetailID");
                    this.ValidateProperty("PurchaseOrderDetailID", value);
                    this._purchaseOrderDetailID = value;
                    this.RaiseDataMemberChanged("PurchaseOrderDetailID");
                    this.OnPurchaseOrderDetailIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchaseOrderID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int PurchaseOrderID
        {
            get
            {
                return this._purchaseOrderID;
            }
            set
            {
                if ((this._purchaseOrderID != value))
                {
                    this.OnPurchaseOrderIDChanging(value);
                    this.RaiseDataMemberChanging("PurchaseOrderID");
                    this.ValidateProperty("PurchaseOrderID", value);
                    this._purchaseOrderID = value;
                    this.RaiseDataMemberChanged("PurchaseOrderID");
                    this.OnPurchaseOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReceivedQty' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal ReceivedQty
        {
            get
            {
                return this._receivedQty;
            }
            set
            {
                if ((this._receivedQty != value))
                {
                    this.OnReceivedQtyChanging(value);
                    this.RaiseDataMemberChanging("ReceivedQty");
                    this.ValidateProperty("ReceivedQty", value);
                    this._receivedQty = value;
                    this.RaiseDataMemberChanged("ReceivedQty");
                    this.OnReceivedQtyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RejectedQty' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal RejectedQty
        {
            get
            {
                return this._rejectedQty;
            }
            set
            {
                if ((this._rejectedQty != value))
                {
                    this.OnRejectedQtyChanging(value);
                    this.RaiseDataMemberChanging("RejectedQty");
                    this.ValidateProperty("RejectedQty", value);
                    this._rejectedQty = value;
                    this.RaiseDataMemberChanged("RejectedQty");
                    this.OnRejectedQtyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StockedQty' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public decimal StockedQty
        {
            get
            {
                return this._stockedQty;
            }
            set
            {
                if ((this._stockedQty != value))
                {
                    this.OnStockedQtyChanging(value);
                    this.RaiseDataMemberChanging("StockedQty");
                    this.ValidateProperty("StockedQty", value);
                    this._stockedQty = value;
                    this.RaiseDataMemberChanged("StockedQty");
                    this.OnStockedQtyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitPrice' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal UnitPrice
        {
            get
            {
                return this._unitPrice;
            }
            set
            {
                if ((this._unitPrice != value))
                {
                    this.OnUnitPriceChanging(value);
                    this.RaiseDataMemberChanging("UnitPrice");
                    this.ValidateProperty("UnitPrice", value);
                    this._unitPrice = value;
                    this.RaiseDataMemberChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductID == this.ProductID);
        }
        
        private bool FilterPurchaseOrder(PurchaseOrder entity)
        {
            return (entity.PurchaseOrderID == this.PurchaseOrderID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._purchaseOrderDetailID, this._purchaseOrderID);
        }
    }
}
namespace TestDomainServices.LTS
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.Threading.Tasks;
    using DataTests.AdventureWorks.LTS;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'Catalog' DomainService.
    /// </summary>
    public sealed partial class Catalog : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Catalog"/> class.
        /// </summary>
        public Catalog() : 
                this(new Uri("TestDomainServices-LTS-Catalog.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Catalog"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The Catalog service URI.</param>
        public Catalog(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(ICatalogContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Catalog"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public Catalog(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Employee"/> entity instances that have been loaded into this <see cref="Catalog"/> instance.
        /// </summary>
        public EntitySet<Employee> Employees
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Employee>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Product"/> entity instances that have been loaded into this <see cref="Catalog"/> instance.
        /// </summary>
        public EntitySet<Product> Products
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Product>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PurchaseOrder"/> entity instances that have been loaded into this <see cref="Catalog"/> instance.
        /// </summary>
        public EntitySet<PurchaseOrder> PurchaseOrders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PurchaseOrder>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entity instances using the 'GetEmployees' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entity instances.</returns>
        public EntityQuery<Employee> GetEmployeesQuery()
        {
            this.ValidateMethod("GetEmployeesQuery", null);
            return base.CreateQuery<Employee>("GetEmployees", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductsQuery()
        {
            this.ValidateMethod("GetProductsQuery", null);
            return base.CreateQuery<Product>("GetProducts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProductsByCategory' query.
        /// </summary>
        /// <param name="subCategoryID">The value for the 'subCategoryID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductsByCategoryQuery(int subCategoryID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("subCategoryID", subCategoryID);
            this.ValidateMethod("GetProductsByCategoryQuery", parameters);
            return base.CreateQuery<Product>("GetProductsByCategory", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProductsWithCaching' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductsWithCachingQuery()
        {
            this.ValidateMethod("GetProductsWithCachingQuery", null);
            return base.CreateQuery<Product>("GetProductsWithCaching", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProductsWithCustomTotalCount' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductsWithCustomTotalCountQuery()
        {
            this.ValidateMethod("GetProductsWithCustomTotalCountQuery", null);
            return base.CreateQuery<Product>("GetProductsWithCustomTotalCount", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PurchaseOrder"/> entity instances using the 'GetPurchaseOrders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PurchaseOrder"/> entity instances.</returns>
        public EntityQuery<PurchaseOrder> GetPurchaseOrdersQuery()
        {
            this.ValidateMethod("GetPurchaseOrdersQuery", null);
            return base.CreateQuery<PurchaseOrder>("GetPurchaseOrders", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CatalogEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'Catalog' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICatalogContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployees' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Catalog/GetEmployees", ReplyAction="http://tempuri.org/Catalog/GetEmployeesResponse")]
            IAsyncResult BeginGetEmployees(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployees'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployees'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployees' operation.</returns>
            QueryResult<Employee> EndGetEmployees(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Catalog/GetProducts", ReplyAction="http://tempuri.org/Catalog/GetProductsResponse")]
            IAsyncResult BeginGetProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProducts' operation.</returns>
            QueryResult<Product> EndGetProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductsByCategory' operation.
            /// </summary>
            /// <param name="subCategoryID">The value for the 'subCategoryID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Catalog/GetProductsByCategory", ReplyAction="http://tempuri.org/Catalog/GetProductsByCategoryResponse")]
            IAsyncResult BeginGetProductsByCategory(int subCategoryID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductsByCategory'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductsByCategory'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductsByCategory' operation.</returns>
            QueryResult<Product> EndGetProductsByCategory(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductsWithCaching' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Catalog/GetProductsWithCaching", ReplyAction="http://tempuri.org/Catalog/GetProductsWithCachingResponse")]
            IAsyncResult BeginGetProductsWithCaching(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductsWithCaching'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductsWithCaching'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductsWithCaching' operation.</returns>
            QueryResult<Product> EndGetProductsWithCaching(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductsWithCustomTotalCount' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Catalog/GetProductsWithCustomTotalCount", ReplyAction="http://tempuri.org/Catalog/GetProductsWithCustomTotalCountResponse")]
            IAsyncResult BeginGetProductsWithCustomTotalCount(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductsWithCustomTotalCount'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductsWithCustomTotalCount'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductsWithCustomTotalCount' operation.</returns>
            QueryResult<Product> EndGetProductsWithCustomTotalCount(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPurchaseOrders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Catalog/GetPurchaseOrders", ReplyAction="http://tempuri.org/Catalog/GetPurchaseOrdersResponse")]
            IAsyncResult BeginGetPurchaseOrders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPurchaseOrders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPurchaseOrders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPurchaseOrders' operation.</returns>
            QueryResult<PurchaseOrder> EndGetPurchaseOrders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Catalog/SubmitChanges", ReplyAction="http://tempuri.org/Catalog/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CatalogEntityContainer : EntityContainer
        {
            
            public CatalogEntityContainer()
            {
                this.CreateEntitySet<Employee>(EntitySetOperations.None);
                this.CreateEntitySet<Product>(EntitySetOperations.All);
                this.CreateEntitySet<PurchaseOrder>(EntitySetOperations.All);
                this.CreateEntitySet<PurchaseOrderDetail>(EntitySetOperations.All);
            }
        }
    }
}
