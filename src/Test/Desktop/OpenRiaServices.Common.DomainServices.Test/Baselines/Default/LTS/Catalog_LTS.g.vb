'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Compare Binary
Option Infer On
Option Strict On
Option Explicit On

Imports DataTests.AdventureWorks.LTS
Imports OpenRiaServices
Imports OpenRiaServices.Client
Imports OpenRiaServices.Client.Authentication
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations
Imports System.Linq
Imports System.Runtime.Serialization
Imports System.ServiceModel
Imports System.Threading.Tasks

Namespace DataTests.AdventureWorks.LTS
    
    ''' <summary>
    ''' The 'Employee' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.AdventureWorks")>  _
    Partial Public NotInheritable Class Employee
        Inherits Entity
        
        Private _birthDate As DateTime
        
        Private _contactID As Integer
        
        Private _currentFlag As Boolean
        
        Private _employeeID As Integer
        
        Private _gender As String
        
        Private _hireDate As DateTime
        
        Private _loginID As String
        
        Private _manager As EntityRef(Of Employee)
        
        Private _managerID As Nullable(Of Integer)
        
        Private _maritalStatus As String
        
        Private _modifiedDate As DateTime
        
        Private _nationalIDNumber As String
        
        Private _purchaseOrders As EntityCollection(Of PurchaseOrder)
        
        Private _reports As EntityCollection(Of Employee)
        
        Private _rowguid As Guid
        
        Private _salariedFlag As Boolean
        
        Private _sickLeaveHours As Short
        
        Private _title As String
        
        Private _vacationHours As Short
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnBirthDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnBirthDateChanged()
        End Sub
        Private Partial Sub OnContactIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnContactIDChanged()
        End Sub
        Private Partial Sub OnCurrentFlagChanging(ByVal value As Boolean)
        End Sub
        Private Partial Sub OnCurrentFlagChanged()
        End Sub
        Private Partial Sub OnEmployeeIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnEmployeeIDChanged()
        End Sub
        Private Partial Sub OnGenderChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnGenderChanged()
        End Sub
        Private Partial Sub OnHireDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnHireDateChanged()
        End Sub
        Private Partial Sub OnLoginIDChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnLoginIDChanged()
        End Sub
        Private Partial Sub OnManagerIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Private Partial Sub OnManagerIDChanged()
        End Sub
        Private Partial Sub OnMaritalStatusChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnMaritalStatusChanged()
        End Sub
        Private Partial Sub OnModifiedDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnModifiedDateChanged()
        End Sub
        Private Partial Sub OnNationalIDNumberChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnNationalIDNumberChanged()
        End Sub
        Private Partial Sub OnrowguidChanging(ByVal value As Guid)
        End Sub
        Private Partial Sub OnrowguidChanged()
        End Sub
        Private Partial Sub OnSalariedFlagChanging(ByVal value As Boolean)
        End Sub
        Private Partial Sub OnSalariedFlagChanged()
        End Sub
        Private Partial Sub OnSickLeaveHoursChanging(ByVal value As Short)
        End Sub
        Private Partial Sub OnSickLeaveHoursChanged()
        End Sub
        Private Partial Sub OnTitleChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnTitleChanged()
        End Sub
        Private Partial Sub OnVacationHoursChanging(ByVal value As Short)
        End Sub
        Private Partial Sub OnVacationHoursChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="Employee"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'BirthDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property BirthDate() As DateTime
            Get
                Return Me._birthDate
            End Get
            Set
                If ((Me._birthDate = value)  _
                            = false) Then
                    Me.OnBirthDateChanging(value)
                    Me.RaiseDataMemberChanging("BirthDate")
                    Me.ValidateProperty("BirthDate", value)
                    Me._birthDate = value
                    Me.RaiseDataMemberChanged("BirthDate")
                    Me.OnBirthDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ContactID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ContactID() As Integer
            Get
                Return Me._contactID
            End Get
            Set
                If ((Me._contactID = value)  _
                            = false) Then
                    Me.OnContactIDChanging(value)
                    Me.RaiseDataMemberChanging("ContactID")
                    Me.ValidateProperty("ContactID", value)
                    Me._contactID = value
                    Me.RaiseDataMemberChanged("ContactID")
                    Me.OnContactIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'CurrentFlag' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property CurrentFlag() As Boolean
            Get
                Return Me._currentFlag
            End Get
            Set
                If ((Me._currentFlag = value)  _
                            = false) Then
                    Me.OnCurrentFlagChanging(value)
                    Me.RaiseDataMemberChanging("CurrentFlag")
                    Me.ValidateProperty("CurrentFlag", value)
                    Me._currentFlag = value
                    Me.RaiseDataMemberChanged("CurrentFlag")
                    Me.OnCurrentFlagChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'EmployeeID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property EmployeeID() As Integer
            Get
                Return Me._employeeID
            End Get
            Set
                If ((Me._employeeID = value)  _
                            = false) Then
                    Me.OnEmployeeIDChanging(value)
                    Me.ValidateProperty("EmployeeID", value)
                    Me._employeeID = value
                    Me.RaisePropertyChanged("EmployeeID")
                    Me.OnEmployeeIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Gender' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Required(),  _
         RoundtripOriginal(),  _
         StringLength(1)>  _
        Public Property Gender() As String
            Get
                Return Me._gender
            End Get
            Set
                If (String.Equals(Me._gender, value) = false) Then
                    Me.OnGenderChanging(value)
                    Me.RaiseDataMemberChanging("Gender")
                    Me.ValidateProperty("Gender", value)
                    Me._gender = value
                    Me.RaiseDataMemberChanged("Gender")
                    Me.OnGenderChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'HireDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property HireDate() As DateTime
            Get
                Return Me._hireDate
            End Get
            Set
                If ((Me._hireDate = value)  _
                            = false) Then
                    Me.OnHireDateChanging(value)
                    Me.RaiseDataMemberChanging("HireDate")
                    Me.ValidateProperty("HireDate", value)
                    Me._hireDate = value
                    Me.RaiseDataMemberChanged("HireDate")
                    Me.OnHireDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'LoginID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Required(),  _
         RoundtripOriginal(),  _
         StringLength(256)>  _
        Public Property LoginID() As String
            Get
                Return Me._loginID
            End Get
            Set
                If (String.Equals(Me._loginID, value) = false) Then
                    Me.OnLoginIDChanging(value)
                    Me.RaiseDataMemberChanging("LoginID")
                    Me.ValidateProperty("LoginID", value)
                    Me._loginID = value
                    Me.RaiseDataMemberChanged("LoginID")
                    Me.OnLoginIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="Employee"/> entity.
        ''' </summary>
        <Association("Employee_Employee", "ManagerID", "EmployeeID", IsForeignKey:=true)>  _
        Public Property Manager() As Employee
            Get
                If (Me._manager Is Nothing) Then
                    Me._manager = New EntityRef(Of Employee)(Me, "Manager", AddressOf Me.FilterManager)
                End If
                Return Me._manager.Entity
            End Get
            Set
                Dim previous As Employee = Me.Manager
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("Manager", value)
                    If (Not (previous) Is Nothing) Then
                        Me._manager.Entity = Nothing
                        previous.Reports.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.ManagerID = value.EmployeeID
                    Else
                        Me.ManagerID = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me._manager.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.Reports.Add(Me)
                    End If
                    Me.RaisePropertyChanged("Manager")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ManagerID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ManagerID() As Nullable(Of Integer)
            Get
                Return Me._managerID
            End Get
            Set
                If (Me._managerID.Equals(value) = false) Then
                    Me.OnManagerIDChanging(value)
                    Me.RaiseDataMemberChanging("ManagerID")
                    Me.ValidateProperty("ManagerID", value)
                    Me._managerID = value
                    Me.RaiseDataMemberChanged("ManagerID")
                    Me.OnManagerIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'MaritalStatus' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Required(),  _
         RoundtripOriginal(),  _
         StringLength(1)>  _
        Public Property MaritalStatus() As String
            Get
                Return Me._maritalStatus
            End Get
            Set
                If (String.Equals(Me._maritalStatus, value) = false) Then
                    Me.OnMaritalStatusChanging(value)
                    Me.RaiseDataMemberChanging("MaritalStatus")
                    Me.ValidateProperty("MaritalStatus", value)
                    Me._maritalStatus = value
                    Me.RaiseDataMemberChanged("MaritalStatus")
                    Me.OnMaritalStatusChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ModifiedDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ModifiedDate() As DateTime
            Get
                Return Me._modifiedDate
            End Get
            Set
                If ((Me._modifiedDate = value)  _
                            = false) Then
                    Me.OnModifiedDateChanging(value)
                    Me.RaiseDataMemberChanging("ModifiedDate")
                    Me.ValidateProperty("ModifiedDate", value)
                    Me._modifiedDate = value
                    Me.RaiseDataMemberChanged("ModifiedDate")
                    Me.OnModifiedDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'NationalIDNumber' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Required(),  _
         RoundtripOriginal(),  _
         StringLength(15)>  _
        Public Property NationalIDNumber() As String
            Get
                Return Me._nationalIDNumber
            End Get
            Set
                If (String.Equals(Me._nationalIDNumber, value) = false) Then
                    Me.OnNationalIDNumberChanging(value)
                    Me.RaiseDataMemberChanging("NationalIDNumber")
                    Me.ValidateProperty("NationalIDNumber", value)
                    Me._nationalIDNumber = value
                    Me.RaiseDataMemberChanged("NationalIDNumber")
                    Me.OnNationalIDNumberChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="PurchaseOrder"/> entity instances.
        ''' </summary>
        <Association("Employee_PurchaseOrder", "EmployeeID", "EmployeeID")>  _
        Public ReadOnly Property PurchaseOrders() As EntityCollection(Of PurchaseOrder)
            Get
                If (Me._purchaseOrders Is Nothing) Then
                    Me._purchaseOrders = New EntityCollection(Of PurchaseOrder)(Me, "PurchaseOrders", AddressOf Me.FilterPurchaseOrders, AddressOf Me.AttachPurchaseOrders, AddressOf Me.DetachPurchaseOrders)
                End If
                Return Me._purchaseOrders
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="Employee"/> entity instances.
        ''' </summary>
        <Association("Employee_Employee", "EmployeeID", "ManagerID")>  _
        Public ReadOnly Property Reports() As EntityCollection(Of Employee)
            Get
                If (Me._reports Is Nothing) Then
                    Me._reports = New EntityCollection(Of Employee)(Me, "Reports", AddressOf Me.FilterReports, AddressOf Me.AttachReports, AddressOf Me.DetachReports)
                End If
                Return Me._reports
            End Get
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'rowguid' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property rowguid() As Guid
            Get
                Return Me._rowguid
            End Get
            Set
                If ((Me._rowguid = value)  _
                            = false) Then
                    Me.OnrowguidChanging(value)
                    Me.RaiseDataMemberChanging("rowguid")
                    Me.ValidateProperty("rowguid", value)
                    Me._rowguid = value
                    Me.RaiseDataMemberChanged("rowguid")
                    Me.OnrowguidChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SalariedFlag' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property SalariedFlag() As Boolean
            Get
                Return Me._salariedFlag
            End Get
            Set
                If ((Me._salariedFlag = value)  _
                            = false) Then
                    Me.OnSalariedFlagChanging(value)
                    Me.RaiseDataMemberChanging("SalariedFlag")
                    Me.ValidateProperty("SalariedFlag", value)
                    Me._salariedFlag = value
                    Me.RaiseDataMemberChanged("SalariedFlag")
                    Me.OnSalariedFlagChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SickLeaveHours' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property SickLeaveHours() As Short
            Get
                Return Me._sickLeaveHours
            End Get
            Set
                If ((Me._sickLeaveHours = value)  _
                            = false) Then
                    Me.OnSickLeaveHoursChanging(value)
                    Me.RaiseDataMemberChanging("SickLeaveHours")
                    Me.ValidateProperty("SickLeaveHours", value)
                    Me._sickLeaveHours = value
                    Me.RaiseDataMemberChanged("SickLeaveHours")
                    Me.OnSickLeaveHoursChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Title' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Required(),  _
         RoundtripOriginal(),  _
         StringLength(50)>  _
        Public Property Title() As String
            Get
                Return Me._title
            End Get
            Set
                If (String.Equals(Me._title, value) = false) Then
                    Me.OnTitleChanging(value)
                    Me.RaiseDataMemberChanging("Title")
                    Me.ValidateProperty("Title", value)
                    Me._title = value
                    Me.RaiseDataMemberChanged("Title")
                    Me.OnTitleChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'VacationHours' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property VacationHours() As Short
            Get
                Return Me._vacationHours
            End Get
            Set
                If ((Me._vacationHours = value)  _
                            = false) Then
                    Me.OnVacationHoursChanging(value)
                    Me.RaiseDataMemberChanging("VacationHours")
                    Me.ValidateProperty("VacationHours", value)
                    Me._vacationHours = value
                    Me.RaiseDataMemberChanged("VacationHours")
                    Me.OnVacationHoursChanged
                End If
            End Set
        End Property
        
        Private Function FilterManager(ByVal entity As Employee) As Boolean
            Return Object.Equals(entity.EmployeeID, Me.ManagerID)
        End Function
        
        Private Sub AttachPurchaseOrders(ByVal entity As PurchaseOrder)
            entity.Employee = Me
        End Sub
        
        Private Sub DetachPurchaseOrders(ByVal entity As PurchaseOrder)
            entity.Employee = Nothing
        End Sub
        
        Private Function FilterPurchaseOrders(ByVal entity As PurchaseOrder) As Boolean
            Return Object.Equals(entity.EmployeeID, Me.EmployeeID)
        End Function
        
        Private Sub AttachReports(ByVal entity As Employee)
            entity.Manager = Me
        End Sub
        
        Private Sub DetachReports(ByVal entity As Employee)
            entity.Manager = Nothing
        End Sub
        
        Private Function FilterReports(ByVal entity As Employee) As Boolean
            Return Object.Equals(entity.ManagerID, Me.EmployeeID)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._employeeID
        End Function
    End Class
    
    ''' <summary>
    ''' The 'Product' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.AdventureWorks")>  _
    Partial Public NotInheritable Class Product
        Inherits Entity
        
        Private _class As String
        
        Private _color As String
        
        Private _daysToManufacture As Integer
        
        Private _discontinuedDate As Nullable(Of DateTime)
        
        Private _finishedGoodsFlag As Boolean
        
        Private _listPrice As Decimal
        
        Private _makeFlag As Boolean
        
        Private _modifiedDate As DateTime
        
        Private _name As String
        
        Private _productID As Integer
        
        Private _productLine As String
        
        Private _productModelID As Nullable(Of Integer)
        
        Private _productNumber As String
        
        Private _productSubcategoryID As Nullable(Of Integer)
        
        Private _purchaseOrderDetails As EntityCollection(Of PurchaseOrderDetail)
        
        Private _reorderPoint As Short
        
        Private _rowguid As Guid
        
        Private _sellEndDate As Nullable(Of DateTime)
        
        Private _sellStartDate As DateTime
        
        Private _size As String
        
        Private _sizeUnitMeasureCode As String
        
        Private _standardCost As Decimal
        
        Private _style As String
        
        Private _weight As Nullable(Of Decimal)
        
        Private _weightUnitMeasureCode As String
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnClassChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnClassChanged()
        End Sub
        Private Partial Sub OnColorChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnColorChanged()
        End Sub
        Private Partial Sub OnDaysToManufactureChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnDaysToManufactureChanged()
        End Sub
        Private Partial Sub OnDiscontinuedDateChanging(ByVal value As Nullable(Of DateTime))
        End Sub
        Private Partial Sub OnDiscontinuedDateChanged()
        End Sub
        Private Partial Sub OnFinishedGoodsFlagChanging(ByVal value As Boolean)
        End Sub
        Private Partial Sub OnFinishedGoodsFlagChanged()
        End Sub
        Private Partial Sub OnListPriceChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnListPriceChanged()
        End Sub
        Private Partial Sub OnMakeFlagChanging(ByVal value As Boolean)
        End Sub
        Private Partial Sub OnMakeFlagChanged()
        End Sub
        Private Partial Sub OnModifiedDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnModifiedDateChanged()
        End Sub
        Private Partial Sub OnNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnNameChanged()
        End Sub
        Private Partial Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnProductIDChanged()
        End Sub
        Private Partial Sub OnProductLineChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnProductLineChanged()
        End Sub
        Private Partial Sub OnProductModelIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Private Partial Sub OnProductModelIDChanged()
        End Sub
        Private Partial Sub OnProductNumberChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnProductNumberChanged()
        End Sub
        Private Partial Sub OnProductSubcategoryIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Private Partial Sub OnProductSubcategoryIDChanged()
        End Sub
        Private Partial Sub OnReorderPointChanging(ByVal value As Short)
        End Sub
        Private Partial Sub OnReorderPointChanged()
        End Sub
        Private Partial Sub OnrowguidChanging(ByVal value As Guid)
        End Sub
        Private Partial Sub OnrowguidChanged()
        End Sub
        Private Partial Sub OnSellEndDateChanging(ByVal value As Nullable(Of DateTime))
        End Sub
        Private Partial Sub OnSellEndDateChanged()
        End Sub
        Private Partial Sub OnSellStartDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnSellStartDateChanged()
        End Sub
        Private Partial Sub OnSizeChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnSizeChanged()
        End Sub
        Private Partial Sub OnSizeUnitMeasureCodeChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnSizeUnitMeasureCodeChanged()
        End Sub
        Private Partial Sub OnStandardCostChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnStandardCostChanged()
        End Sub
        Private Partial Sub OnStyleChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnStyleChanged()
        End Sub
        Private Partial Sub OnWeightChanging(ByVal value As Nullable(Of Decimal))
        End Sub
        Private Partial Sub OnWeightChanged()
        End Sub
        Private Partial Sub OnWeightUnitMeasureCodeChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnWeightUnitMeasureCodeChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="Product"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'Class' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal(),  _
         StringLength(2)>  _
        Public Property [Class]() As String
            Get
                Return Me._class
            End Get
            Set
                If (String.Equals(Me._class, value) = false) Then
                    Me.OnClassChanging(value)
                    Me.RaiseDataMemberChanging("Class")
                    Me.ValidateProperty("Class", value)
                    Me._class = value
                    Me.RaiseDataMemberChanged("Class")
                    Me.OnClassChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Color' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal(),  _
         StringLength(15)>  _
        Public Property Color() As String
            Get
                Return Me._color
            End Get
            Set
                If (String.Equals(Me._color, value) = false) Then
                    Me.OnColorChanging(value)
                    Me.RaiseDataMemberChanging("Color")
                    Me.ValidateProperty("Color", value)
                    Me._color = value
                    Me.RaiseDataMemberChanged("Color")
                    Me.OnColorChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'DaysToManufacture' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property DaysToManufacture() As Integer
            Get
                Return Me._daysToManufacture
            End Get
            Set
                If ((Me._daysToManufacture = value)  _
                            = false) Then
                    Me.OnDaysToManufactureChanging(value)
                    Me.RaiseDataMemberChanging("DaysToManufacture")
                    Me.ValidateProperty("DaysToManufacture", value)
                    Me._daysToManufacture = value
                    Me.RaiseDataMemberChanged("DaysToManufacture")
                    Me.OnDaysToManufactureChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'DiscontinuedDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property DiscontinuedDate() As Nullable(Of DateTime)
            Get
                Return Me._discontinuedDate
            End Get
            Set
                If (Me._discontinuedDate.Equals(value) = false) Then
                    Me.OnDiscontinuedDateChanging(value)
                    Me.RaiseDataMemberChanging("DiscontinuedDate")
                    Me.ValidateProperty("DiscontinuedDate", value)
                    Me._discontinuedDate = value
                    Me.RaiseDataMemberChanged("DiscontinuedDate")
                    Me.OnDiscontinuedDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'FinishedGoodsFlag' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property FinishedGoodsFlag() As Boolean
            Get
                Return Me._finishedGoodsFlag
            End Get
            Set
                If ((Me._finishedGoodsFlag = value)  _
                            = false) Then
                    Me.OnFinishedGoodsFlagChanging(value)
                    Me.RaiseDataMemberChanging("FinishedGoodsFlag")
                    Me.ValidateProperty("FinishedGoodsFlag", value)
                    Me._finishedGoodsFlag = value
                    Me.RaiseDataMemberChanged("FinishedGoodsFlag")
                    Me.OnFinishedGoodsFlagChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ListPrice' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ListPrice() As Decimal
            Get
                Return Me._listPrice
            End Get
            Set
                If ((Me._listPrice = value)  _
                            = false) Then
                    Me.OnListPriceChanging(value)
                    Me.RaiseDataMemberChanging("ListPrice")
                    Me.ValidateProperty("ListPrice", value)
                    Me._listPrice = value
                    Me.RaiseDataMemberChanged("ListPrice")
                    Me.OnListPriceChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'MakeFlag' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property MakeFlag() As Boolean
            Get
                Return Me._makeFlag
            End Get
            Set
                If ((Me._makeFlag = value)  _
                            = false) Then
                    Me.OnMakeFlagChanging(value)
                    Me.RaiseDataMemberChanging("MakeFlag")
                    Me.ValidateProperty("MakeFlag", value)
                    Me._makeFlag = value
                    Me.RaiseDataMemberChanged("MakeFlag")
                    Me.OnMakeFlagChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ModifiedDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ModifiedDate() As DateTime
            Get
                Return Me._modifiedDate
            End Get
            Set
                If ((Me._modifiedDate = value)  _
                            = false) Then
                    Me.OnModifiedDateChanging(value)
                    Me.RaiseDataMemberChanging("ModifiedDate")
                    Me.ValidateProperty("ModifiedDate", value)
                    Me._modifiedDate = value
                    Me.RaiseDataMemberChanged("ModifiedDate")
                    Me.OnModifiedDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Name' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Required(),  _
         RoundtripOriginal(),  _
         StringLength(50)>  _
        Public Property Name() As String
            Get
                Return Me._name
            End Get
            Set
                If (String.Equals(Me._name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.RaiseDataMemberChanging("Name")
                    Me.ValidateProperty("Name", value)
                    Me._name = value
                    Me.RaiseDataMemberChanged("Name")
                    Me.OnNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ProductID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property ProductID() As Integer
            Get
                Return Me._productID
            End Get
            Set
                If ((Me._productID = value)  _
                            = false) Then
                    Me.OnProductIDChanging(value)
                    Me.ValidateProperty("ProductID", value)
                    Me._productID = value
                    Me.RaisePropertyChanged("ProductID")
                    Me.OnProductIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ProductLine' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal(),  _
         StringLength(2)>  _
        Public Property ProductLine() As String
            Get
                Return Me._productLine
            End Get
            Set
                If (String.Equals(Me._productLine, value) = false) Then
                    Me.OnProductLineChanging(value)
                    Me.RaiseDataMemberChanging("ProductLine")
                    Me.ValidateProperty("ProductLine", value)
                    Me._productLine = value
                    Me.RaiseDataMemberChanged("ProductLine")
                    Me.OnProductLineChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ProductModelID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ProductModelID() As Nullable(Of Integer)
            Get
                Return Me._productModelID
            End Get
            Set
                If (Me._productModelID.Equals(value) = false) Then
                    Me.OnProductModelIDChanging(value)
                    Me.RaiseDataMemberChanging("ProductModelID")
                    Me.ValidateProperty("ProductModelID", value)
                    Me._productModelID = value
                    Me.RaiseDataMemberChanged("ProductModelID")
                    Me.OnProductModelIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ProductNumber' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Required(),  _
         RoundtripOriginal(),  _
         StringLength(25)>  _
        Public Property ProductNumber() As String
            Get
                Return Me._productNumber
            End Get
            Set
                If (String.Equals(Me._productNumber, value) = false) Then
                    Me.OnProductNumberChanging(value)
                    Me.RaiseDataMemberChanging("ProductNumber")
                    Me.ValidateProperty("ProductNumber", value)
                    Me._productNumber = value
                    Me.RaiseDataMemberChanged("ProductNumber")
                    Me.OnProductNumberChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ProductSubcategoryID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ProductSubcategoryID() As Nullable(Of Integer)
            Get
                Return Me._productSubcategoryID
            End Get
            Set
                If (Me._productSubcategoryID.Equals(value) = false) Then
                    Me.OnProductSubcategoryIDChanging(value)
                    Me.RaiseDataMemberChanging("ProductSubcategoryID")
                    Me.ValidateProperty("ProductSubcategoryID", value)
                    Me._productSubcategoryID = value
                    Me.RaiseDataMemberChanged("ProductSubcategoryID")
                    Me.OnProductSubcategoryIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="PurchaseOrderDetail"/> entity instances.
        ''' </summary>
        <Association("Product_PurchaseOrderDetail", "ProductID", "ProductID")>  _
        Public ReadOnly Property PurchaseOrderDetails() As EntityCollection(Of PurchaseOrderDetail)
            Get
                If (Me._purchaseOrderDetails Is Nothing) Then
                    Me._purchaseOrderDetails = New EntityCollection(Of PurchaseOrderDetail)(Me, "PurchaseOrderDetails", AddressOf Me.FilterPurchaseOrderDetails, AddressOf Me.AttachPurchaseOrderDetails, AddressOf Me.DetachPurchaseOrderDetails)
                End If
                Return Me._purchaseOrderDetails
            End Get
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ReorderPoint' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ReorderPoint() As Short
            Get
                Return Me._reorderPoint
            End Get
            Set
                If ((Me._reorderPoint = value)  _
                            = false) Then
                    Me.OnReorderPointChanging(value)
                    Me.RaiseDataMemberChanging("ReorderPoint")
                    Me.ValidateProperty("ReorderPoint", value)
                    Me._reorderPoint = value
                    Me.RaiseDataMemberChanged("ReorderPoint")
                    Me.OnReorderPointChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'rowguid' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property rowguid() As Guid
            Get
                Return Me._rowguid
            End Get
            Set
                If ((Me._rowguid = value)  _
                            = false) Then
                    Me.OnrowguidChanging(value)
                    Me.RaiseDataMemberChanging("rowguid")
                    Me.ValidateProperty("rowguid", value)
                    Me._rowguid = value
                    Me.RaiseDataMemberChanged("rowguid")
                    Me.OnrowguidChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SellEndDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property SellEndDate() As Nullable(Of DateTime)
            Get
                Return Me._sellEndDate
            End Get
            Set
                If (Me._sellEndDate.Equals(value) = false) Then
                    Me.OnSellEndDateChanging(value)
                    Me.RaiseDataMemberChanging("SellEndDate")
                    Me.ValidateProperty("SellEndDate", value)
                    Me._sellEndDate = value
                    Me.RaiseDataMemberChanged("SellEndDate")
                    Me.OnSellEndDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SellStartDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property SellStartDate() As DateTime
            Get
                Return Me._sellStartDate
            End Get
            Set
                If ((Me._sellStartDate = value)  _
                            = false) Then
                    Me.OnSellStartDateChanging(value)
                    Me.RaiseDataMemberChanging("SellStartDate")
                    Me.ValidateProperty("SellStartDate", value)
                    Me._sellStartDate = value
                    Me.RaiseDataMemberChanged("SellStartDate")
                    Me.OnSellStartDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Size' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal(),  _
         StringLength(5)>  _
        Public Property Size() As String
            Get
                Return Me._size
            End Get
            Set
                If (String.Equals(Me._size, value) = false) Then
                    Me.OnSizeChanging(value)
                    Me.RaiseDataMemberChanging("Size")
                    Me.ValidateProperty("Size", value)
                    Me._size = value
                    Me.RaiseDataMemberChanged("Size")
                    Me.OnSizeChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SizeUnitMeasureCode' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal(),  _
         StringLength(3)>  _
        Public Property SizeUnitMeasureCode() As String
            Get
                Return Me._sizeUnitMeasureCode
            End Get
            Set
                If (String.Equals(Me._sizeUnitMeasureCode, value) = false) Then
                    Me.OnSizeUnitMeasureCodeChanging(value)
                    Me.RaiseDataMemberChanging("SizeUnitMeasureCode")
                    Me.ValidateProperty("SizeUnitMeasureCode", value)
                    Me._sizeUnitMeasureCode = value
                    Me.RaiseDataMemberChanged("SizeUnitMeasureCode")
                    Me.OnSizeUnitMeasureCodeChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'StandardCost' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property StandardCost() As Decimal
            Get
                Return Me._standardCost
            End Get
            Set
                If ((Me._standardCost = value)  _
                            = false) Then
                    Me.OnStandardCostChanging(value)
                    Me.RaiseDataMemberChanging("StandardCost")
                    Me.ValidateProperty("StandardCost", value)
                    Me._standardCost = value
                    Me.RaiseDataMemberChanged("StandardCost")
                    Me.OnStandardCostChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Style' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal(),  _
         StringLength(2)>  _
        Public Property Style() As String
            Get
                Return Me._style
            End Get
            Set
                If (String.Equals(Me._style, value) = false) Then
                    Me.OnStyleChanging(value)
                    Me.RaiseDataMemberChanging("Style")
                    Me.ValidateProperty("Style", value)
                    Me._style = value
                    Me.RaiseDataMemberChanged("Style")
                    Me.OnStyleChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Weight' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property Weight() As Nullable(Of Decimal)
            Get
                Return Me._weight
            End Get
            Set
                If (Me._weight.Equals(value) = false) Then
                    Me.OnWeightChanging(value)
                    Me.RaiseDataMemberChanging("Weight")
                    Me.ValidateProperty("Weight", value)
                    Me._weight = value
                    Me.RaiseDataMemberChanged("Weight")
                    Me.OnWeightChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'WeightUnitMeasureCode' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal(),  _
         StringLength(3)>  _
        Public Property WeightUnitMeasureCode() As String
            Get
                Return Me._weightUnitMeasureCode
            End Get
            Set
                If (String.Equals(Me._weightUnitMeasureCode, value) = false) Then
                    Me.OnWeightUnitMeasureCodeChanging(value)
                    Me.RaiseDataMemberChanging("WeightUnitMeasureCode")
                    Me.ValidateProperty("WeightUnitMeasureCode", value)
                    Me._weightUnitMeasureCode = value
                    Me.RaiseDataMemberChanged("WeightUnitMeasureCode")
                    Me.OnWeightUnitMeasureCodeChanged
                End If
            End Set
        End Property
        
        Private Sub AttachPurchaseOrderDetails(ByVal entity As PurchaseOrderDetail)
            entity.Product = Me
        End Sub
        
        Private Sub DetachPurchaseOrderDetails(ByVal entity As PurchaseOrderDetail)
            entity.Product = Nothing
        End Sub
        
        Private Function FilterPurchaseOrderDetails(ByVal entity As PurchaseOrderDetail) As Boolean
            Return Object.Equals(entity.ProductID, Me.ProductID)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._productID
        End Function
    End Class
    
    ''' <summary>
    ''' The 'PurchaseOrder' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.AdventureWorks")>  _
    Partial Public NotInheritable Class PurchaseOrder
        Inherits Entity
        
        Private _employee As EntityRef(Of Employee)
        
        Private _employeeID As Integer
        
        Private _freight As Decimal
        
        Private _modifiedDate As DateTime
        
        Private _orderDate As DateTime
        
        Private _purchaseOrderDetails As EntityCollection(Of PurchaseOrderDetail)
        
        Private _purchaseOrderID As Integer
        
        Private _revisionNumber As Byte
        
        Private _shipDate As Nullable(Of DateTime)
        
        Private _shipMethodID As Integer
        
        Private _status As Byte
        
        Private _subTotal As Decimal
        
        Private _taxAmt As Decimal
        
        Private _totalDue As Decimal
        
        Private _vendorID As Integer
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnEmployeeIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnEmployeeIDChanged()
        End Sub
        Private Partial Sub OnFreightChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnFreightChanged()
        End Sub
        Private Partial Sub OnModifiedDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnModifiedDateChanged()
        End Sub
        Private Partial Sub OnOrderDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnOrderDateChanged()
        End Sub
        Private Partial Sub OnPurchaseOrderIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnPurchaseOrderIDChanged()
        End Sub
        Private Partial Sub OnRevisionNumberChanging(ByVal value As Byte)
        End Sub
        Private Partial Sub OnRevisionNumberChanged()
        End Sub
        Private Partial Sub OnShipDateChanging(ByVal value As Nullable(Of DateTime))
        End Sub
        Private Partial Sub OnShipDateChanged()
        End Sub
        Private Partial Sub OnShipMethodIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnShipMethodIDChanged()
        End Sub
        Private Partial Sub OnStatusChanging(ByVal value As Byte)
        End Sub
        Private Partial Sub OnStatusChanged()
        End Sub
        Private Partial Sub OnSubTotalChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnSubTotalChanged()
        End Sub
        Private Partial Sub OnTaxAmtChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnTaxAmtChanged()
        End Sub
        Private Partial Sub OnTotalDueChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnTotalDueChanged()
        End Sub
        Private Partial Sub OnVendorIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnVendorIDChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="PurchaseOrder"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="Employee"/> entity.
        ''' </summary>
        <Association("Employee_PurchaseOrder", "EmployeeID", "EmployeeID", IsForeignKey:=true)>  _
        Public Property Employee() As Employee
            Get
                If (Me._employee Is Nothing) Then
                    Me._employee = New EntityRef(Of Employee)(Me, "Employee", AddressOf Me.FilterEmployee)
                End If
                Return Me._employee.Entity
            End Get
            Set
                Dim previous As Employee = Me.Employee
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("Employee", value)
                    If (Not (previous) Is Nothing) Then
                        Me._employee.Entity = Nothing
                        previous.PurchaseOrders.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.EmployeeID = value.EmployeeID
                    Else
                        Me.EmployeeID = CType(Nothing, Integer)
                    End If
                    Me._employee.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.PurchaseOrders.Add(Me)
                    End If
                    Me.RaisePropertyChanged("Employee")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'EmployeeID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property EmployeeID() As Integer
            Get
                Return Me._employeeID
            End Get
            Set
                If ((Me._employeeID = value)  _
                            = false) Then
                    Me.OnEmployeeIDChanging(value)
                    Me.RaiseDataMemberChanging("EmployeeID")
                    Me.ValidateProperty("EmployeeID", value)
                    Me._employeeID = value
                    Me.RaiseDataMemberChanged("EmployeeID")
                    Me.OnEmployeeIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Freight' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property Freight() As Decimal
            Get
                Return Me._freight
            End Get
            Set
                If ((Me._freight = value)  _
                            = false) Then
                    Me.OnFreightChanging(value)
                    Me.RaiseDataMemberChanging("Freight")
                    Me.ValidateProperty("Freight", value)
                    Me._freight = value
                    Me.RaiseDataMemberChanged("Freight")
                    Me.OnFreightChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ModifiedDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ModifiedDate() As DateTime
            Get
                Return Me._modifiedDate
            End Get
            Set
                If ((Me._modifiedDate = value)  _
                            = false) Then
                    Me.OnModifiedDateChanging(value)
                    Me.RaiseDataMemberChanging("ModifiedDate")
                    Me.ValidateProperty("ModifiedDate", value)
                    Me._modifiedDate = value
                    Me.RaiseDataMemberChanged("ModifiedDate")
                    Me.OnModifiedDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'OrderDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property OrderDate() As DateTime
            Get
                Return Me._orderDate
            End Get
            Set
                If ((Me._orderDate = value)  _
                            = false) Then
                    Me.OnOrderDateChanging(value)
                    Me.RaiseDataMemberChanging("OrderDate")
                    Me.ValidateProperty("OrderDate", value)
                    Me._orderDate = value
                    Me.RaiseDataMemberChanged("OrderDate")
                    Me.OnOrderDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="PurchaseOrderDetail"/> entity instances.
        ''' </summary>
        <Association("PurchaseOrder_PurchaseOrderDetail", "PurchaseOrderID", "PurchaseOrderID")>  _
        Public ReadOnly Property PurchaseOrderDetails() As EntityCollection(Of PurchaseOrderDetail)
            Get
                If (Me._purchaseOrderDetails Is Nothing) Then
                    Me._purchaseOrderDetails = New EntityCollection(Of PurchaseOrderDetail)(Me, "PurchaseOrderDetails", AddressOf Me.FilterPurchaseOrderDetails, AddressOf Me.AttachPurchaseOrderDetails, AddressOf Me.DetachPurchaseOrderDetails)
                End If
                Return Me._purchaseOrderDetails
            End Get
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'PurchaseOrderID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property PurchaseOrderID() As Integer
            Get
                Return Me._purchaseOrderID
            End Get
            Set
                If ((Me._purchaseOrderID = value)  _
                            = false) Then
                    Me.OnPurchaseOrderIDChanging(value)
                    Me.ValidateProperty("PurchaseOrderID", value)
                    Me._purchaseOrderID = value
                    Me.RaisePropertyChanged("PurchaseOrderID")
                    Me.OnPurchaseOrderIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'RevisionNumber' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property RevisionNumber() As Byte
            Get
                Return Me._revisionNumber
            End Get
            Set
                If ((Me._revisionNumber = value)  _
                            = false) Then
                    Me.OnRevisionNumberChanging(value)
                    Me.RaiseDataMemberChanging("RevisionNumber")
                    Me.ValidateProperty("RevisionNumber", value)
                    Me._revisionNumber = value
                    Me.RaiseDataMemberChanged("RevisionNumber")
                    Me.OnRevisionNumberChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ShipDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ShipDate() As Nullable(Of DateTime)
            Get
                Return Me._shipDate
            End Get
            Set
                If (Me._shipDate.Equals(value) = false) Then
                    Me.OnShipDateChanging(value)
                    Me.RaiseDataMemberChanging("ShipDate")
                    Me.ValidateProperty("ShipDate", value)
                    Me._shipDate = value
                    Me.RaiseDataMemberChanged("ShipDate")
                    Me.OnShipDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ShipMethodID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ShipMethodID() As Integer
            Get
                Return Me._shipMethodID
            End Get
            Set
                If ((Me._shipMethodID = value)  _
                            = false) Then
                    Me.OnShipMethodIDChanging(value)
                    Me.RaiseDataMemberChanging("ShipMethodID")
                    Me.ValidateProperty("ShipMethodID", value)
                    Me._shipMethodID = value
                    Me.RaiseDataMemberChanged("ShipMethodID")
                    Me.OnShipMethodIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Status' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property Status() As Byte
            Get
                Return Me._status
            End Get
            Set
                If ((Me._status = value)  _
                            = false) Then
                    Me.OnStatusChanging(value)
                    Me.RaiseDataMemberChanging("Status")
                    Me.ValidateProperty("Status", value)
                    Me._status = value
                    Me.RaiseDataMemberChanged("Status")
                    Me.OnStatusChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SubTotal' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property SubTotal() As Decimal
            Get
                Return Me._subTotal
            End Get
            Set
                If ((Me._subTotal = value)  _
                            = false) Then
                    Me.OnSubTotalChanging(value)
                    Me.RaiseDataMemberChanging("SubTotal")
                    Me.ValidateProperty("SubTotal", value)
                    Me._subTotal = value
                    Me.RaiseDataMemberChanged("SubTotal")
                    Me.OnSubTotalChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'TaxAmt' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property TaxAmt() As Decimal
            Get
                Return Me._taxAmt
            End Get
            Set
                If ((Me._taxAmt = value)  _
                            = false) Then
                    Me.OnTaxAmtChanging(value)
                    Me.RaiseDataMemberChanging("TaxAmt")
                    Me.ValidateProperty("TaxAmt", value)
                    Me._taxAmt = value
                    Me.RaiseDataMemberChanged("TaxAmt")
                    Me.OnTaxAmtChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'TotalDue' value.
        ''' </summary>
        <DataMember(),  _
         RoundtripOriginal()>  _
        Public Property TotalDue() As Decimal
            Get
                Return Me._totalDue
            End Get
            Set
                If ((Me._totalDue = value)  _
                            = false) Then
                    Me.OnTotalDueChanging(value)
                    Me.RaiseDataMemberChanging("TotalDue")
                    Me.ValidateProperty("TotalDue", value)
                    Me._totalDue = value
                    Me.RaiseDataMemberChanged("TotalDue")
                    Me.OnTotalDueChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'VendorID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property VendorID() As Integer
            Get
                Return Me._vendorID
            End Get
            Set
                If ((Me._vendorID = value)  _
                            = false) Then
                    Me.OnVendorIDChanging(value)
                    Me.RaiseDataMemberChanging("VendorID")
                    Me.ValidateProperty("VendorID", value)
                    Me._vendorID = value
                    Me.RaiseDataMemberChanged("VendorID")
                    Me.OnVendorIDChanged
                End If
            End Set
        End Property
        
        Private Function FilterEmployee(ByVal entity As Employee) As Boolean
            Return Object.Equals(entity.EmployeeID, Me.EmployeeID)
        End Function
        
        Private Sub AttachPurchaseOrderDetails(ByVal entity As PurchaseOrderDetail)
            entity.PurchaseOrder = Me
        End Sub
        
        Private Sub DetachPurchaseOrderDetails(ByVal entity As PurchaseOrderDetail)
            entity.PurchaseOrder = Nothing
        End Sub
        
        Private Function FilterPurchaseOrderDetails(ByVal entity As PurchaseOrderDetail) As Boolean
            Return Object.Equals(entity.PurchaseOrderID, Me.PurchaseOrderID)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._purchaseOrderID
        End Function
    End Class
    
    ''' <summary>
    ''' The 'PurchaseOrderDetail' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.AdventureWorks")>  _
    Partial Public NotInheritable Class PurchaseOrderDetail
        Inherits Entity
        
        Private _dueDate As DateTime
        
        Private _lineTotal As Decimal
        
        Private _modifiedDate As DateTime
        
        Private _orderQty As Short
        
        Private _product As EntityRef(Of Product)
        
        Private _productID As Integer
        
        Private _purchaseOrder As EntityRef(Of PurchaseOrder)
        
        Private _purchaseOrderDetailID As Integer
        
        Private _purchaseOrderID As Integer
        
        Private _receivedQty As Decimal
        
        Private _rejectedQty As Decimal
        
        Private _stockedQty As Decimal
        
        Private _unitPrice As Decimal
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnDueDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnDueDateChanged()
        End Sub
        Private Partial Sub OnLineTotalChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnLineTotalChanged()
        End Sub
        Private Partial Sub OnModifiedDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnModifiedDateChanged()
        End Sub
        Private Partial Sub OnOrderQtyChanging(ByVal value As Short)
        End Sub
        Private Partial Sub OnOrderQtyChanged()
        End Sub
        Private Partial Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnProductIDChanged()
        End Sub
        Private Partial Sub OnPurchaseOrderDetailIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnPurchaseOrderDetailIDChanged()
        End Sub
        Private Partial Sub OnPurchaseOrderIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnPurchaseOrderIDChanged()
        End Sub
        Private Partial Sub OnReceivedQtyChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnReceivedQtyChanged()
        End Sub
        Private Partial Sub OnRejectedQtyChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnRejectedQtyChanged()
        End Sub
        Private Partial Sub OnStockedQtyChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnStockedQtyChanged()
        End Sub
        Private Partial Sub OnUnitPriceChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnUnitPriceChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="PurchaseOrderDetail"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'DueDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property DueDate() As DateTime
            Get
                Return Me._dueDate
            End Get
            Set
                If ((Me._dueDate = value)  _
                            = false) Then
                    Me.OnDueDateChanging(value)
                    Me.RaiseDataMemberChanging("DueDate")
                    Me.ValidateProperty("DueDate", value)
                    Me._dueDate = value
                    Me.RaiseDataMemberChanged("DueDate")
                    Me.OnDueDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'LineTotal' value.
        ''' </summary>
        <DataMember(),  _
         RoundtripOriginal()>  _
        Public Property LineTotal() As Decimal
            Get
                Return Me._lineTotal
            End Get
            Set
                If ((Me._lineTotal = value)  _
                            = false) Then
                    Me.OnLineTotalChanging(value)
                    Me.RaiseDataMemberChanging("LineTotal")
                    Me.ValidateProperty("LineTotal", value)
                    Me._lineTotal = value
                    Me.RaiseDataMemberChanged("LineTotal")
                    Me.OnLineTotalChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ModifiedDate' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ModifiedDate() As DateTime
            Get
                Return Me._modifiedDate
            End Get
            Set
                If ((Me._modifiedDate = value)  _
                            = false) Then
                    Me.OnModifiedDateChanging(value)
                    Me.RaiseDataMemberChanging("ModifiedDate")
                    Me.ValidateProperty("ModifiedDate", value)
                    Me._modifiedDate = value
                    Me.RaiseDataMemberChanged("ModifiedDate")
                    Me.OnModifiedDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'OrderQty' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property OrderQty() As Short
            Get
                Return Me._orderQty
            End Get
            Set
                If ((Me._orderQty = value)  _
                            = false) Then
                    Me.OnOrderQtyChanging(value)
                    Me.RaiseDataMemberChanging("OrderQty")
                    Me.ValidateProperty("OrderQty", value)
                    Me._orderQty = value
                    Me.RaiseDataMemberChanged("OrderQty")
                    Me.OnOrderQtyChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="Product"/> entity.
        ''' </summary>
        <Association("Product_PurchaseOrderDetail", "ProductID", "ProductID", IsForeignKey:=true)>  _
        Public Property Product() As Product
            Get
                If (Me._product Is Nothing) Then
                    Me._product = New EntityRef(Of Product)(Me, "Product", AddressOf Me.FilterProduct)
                End If
                Return Me._product.Entity
            End Get
            Set
                Dim previous As Product = Me.Product
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("Product", value)
                    If (Not (previous) Is Nothing) Then
                        Me._product.Entity = Nothing
                        previous.PurchaseOrderDetails.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.ProductID = value.ProductID
                    Else
                        Me.ProductID = CType(Nothing, Integer)
                    End If
                    Me._product.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.PurchaseOrderDetails.Add(Me)
                    End If
                    Me.RaisePropertyChanged("Product")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ProductID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ProductID() As Integer
            Get
                Return Me._productID
            End Get
            Set
                If ((Me._productID = value)  _
                            = false) Then
                    Me.OnProductIDChanging(value)
                    Me.RaiseDataMemberChanging("ProductID")
                    Me.ValidateProperty("ProductID", value)
                    Me._productID = value
                    Me.RaiseDataMemberChanged("ProductID")
                    Me.OnProductIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="PurchaseOrder"/> entity.
        ''' </summary>
        <Association("PurchaseOrder_PurchaseOrderDetail", "PurchaseOrderID", "PurchaseOrderID", IsForeignKey:=true)>  _
        Public Property PurchaseOrder() As PurchaseOrder
            Get
                If (Me._purchaseOrder Is Nothing) Then
                    Me._purchaseOrder = New EntityRef(Of PurchaseOrder)(Me, "PurchaseOrder", AddressOf Me.FilterPurchaseOrder)
                End If
                Return Me._purchaseOrder.Entity
            End Get
            Set
                Dim previous As PurchaseOrder = Me.PurchaseOrder
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("PurchaseOrder", value)
                    If (Not (previous) Is Nothing) Then
                        Me._purchaseOrder.Entity = Nothing
                        previous.PurchaseOrderDetails.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.PurchaseOrderID = value.PurchaseOrderID
                    Else
                        Me.PurchaseOrderID = CType(Nothing, Integer)
                    End If
                    Me._purchaseOrder.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.PurchaseOrderDetails.Add(Me)
                    End If
                    Me.RaisePropertyChanged("PurchaseOrder")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'PurchaseOrderDetailID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property PurchaseOrderDetailID() As Integer
            Get
                Return Me._purchaseOrderDetailID
            End Get
            Set
                If ((Me._purchaseOrderDetailID = value)  _
                            = false) Then
                    Me.OnPurchaseOrderDetailIDChanging(value)
                    Me.RaiseDataMemberChanging("PurchaseOrderDetailID")
                    Me.ValidateProperty("PurchaseOrderDetailID", value)
                    Me._purchaseOrderDetailID = value
                    Me.RaiseDataMemberChanged("PurchaseOrderDetailID")
                    Me.OnPurchaseOrderDetailIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'PurchaseOrderID' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property PurchaseOrderID() As Integer
            Get
                Return Me._purchaseOrderID
            End Get
            Set
                If ((Me._purchaseOrderID = value)  _
                            = false) Then
                    Me.OnPurchaseOrderIDChanging(value)
                    Me.RaiseDataMemberChanging("PurchaseOrderID")
                    Me.ValidateProperty("PurchaseOrderID", value)
                    Me._purchaseOrderID = value
                    Me.RaiseDataMemberChanged("PurchaseOrderID")
                    Me.OnPurchaseOrderIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ReceivedQty' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property ReceivedQty() As Decimal
            Get
                Return Me._receivedQty
            End Get
            Set
                If ((Me._receivedQty = value)  _
                            = false) Then
                    Me.OnReceivedQtyChanging(value)
                    Me.RaiseDataMemberChanging("ReceivedQty")
                    Me.ValidateProperty("ReceivedQty", value)
                    Me._receivedQty = value
                    Me.RaiseDataMemberChanged("ReceivedQty")
                    Me.OnReceivedQtyChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'RejectedQty' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property RejectedQty() As Decimal
            Get
                Return Me._rejectedQty
            End Get
            Set
                If ((Me._rejectedQty = value)  _
                            = false) Then
                    Me.OnRejectedQtyChanging(value)
                    Me.RaiseDataMemberChanging("RejectedQty")
                    Me.ValidateProperty("RejectedQty", value)
                    Me._rejectedQty = value
                    Me.RaiseDataMemberChanged("RejectedQty")
                    Me.OnRejectedQtyChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'StockedQty' value.
        ''' </summary>
        <DataMember(),  _
         RoundtripOriginal()>  _
        Public Property StockedQty() As Decimal
            Get
                Return Me._stockedQty
            End Get
            Set
                If ((Me._stockedQty = value)  _
                            = false) Then
                    Me.OnStockedQtyChanging(value)
                    Me.RaiseDataMemberChanging("StockedQty")
                    Me.ValidateProperty("StockedQty", value)
                    Me._stockedQty = value
                    Me.RaiseDataMemberChanged("StockedQty")
                    Me.OnStockedQtyChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'UnitPrice' value.
        ''' </summary>
        <ConcurrencyCheck(),  _
         DataMember(),  _
         RoundtripOriginal()>  _
        Public Property UnitPrice() As Decimal
            Get
                Return Me._unitPrice
            End Get
            Set
                If ((Me._unitPrice = value)  _
                            = false) Then
                    Me.OnUnitPriceChanging(value)
                    Me.RaiseDataMemberChanging("UnitPrice")
                    Me.ValidateProperty("UnitPrice", value)
                    Me._unitPrice = value
                    Me.RaiseDataMemberChanged("UnitPrice")
                    Me.OnUnitPriceChanged
                End If
            End Set
        End Property
        
        Private Function FilterProduct(ByVal entity As Product) As Boolean
            Return Object.Equals(entity.ProductID, Me.ProductID)
        End Function
        
        Private Function FilterPurchaseOrder(ByVal entity As PurchaseOrder) As Boolean
            Return Object.Equals(entity.PurchaseOrderID, Me.PurchaseOrderID)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return EntityKey.Create(Me._purchaseOrderDetailID, Me._purchaseOrderID)
        End Function
    End Class
End Namespace

Namespace TestDomainServices.LTS
    
    ''' <summary>
    ''' The DomainContext corresponding to the 'Catalog' DomainService.
    ''' </summary>
    Partial Public NotInheritable Class Catalog
        Inherits DomainContext
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="Catalog"/> class.
        ''' </summary>
        Public Sub New()
            Me.New(New Uri("TestDomainServices-LTS-Catalog.svc", UriKind.Relative))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="Catalog"/> class with the specified service URI.
        ''' </summary>
        ''' <param name="serviceUri">The Catalog service URI.</param>
        Public Sub New(ByVal serviceUri As Uri)
            Me.New(DomainContext.CreateDomainClient(GetType(ICatalogContract), serviceUri, false))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="Catalog"/> class with the specified <paramref name="domainClient"/>.
        ''' </summary>
        ''' <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        Public Sub New(ByVal domainClient As DomainClient)
            MyBase.New(domainClient)
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets the set of <see cref="Employee"/> entity instances that have been loaded into this <see cref="Catalog"/> instance.
        ''' </summary>
        Public ReadOnly Property Employees() As EntitySet(Of Employee)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of Employee)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="Product"/> entity instances that have been loaded into this <see cref="Catalog"/> instance.
        ''' </summary>
        Public ReadOnly Property Products() As EntitySet(Of Product)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of Product)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="PurchaseOrder"/> entity instances that have been loaded into this <see cref="Catalog"/> instance.
        ''' </summary>
        Public ReadOnly Property PurchaseOrders() As EntitySet(Of PurchaseOrder)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of PurchaseOrder)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entity instances using the 'GetEmployees' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entity instances.</returns>
        Public Function GetEmployeesQuery() As EntityQuery(Of Employee)
            Me.ValidateMethod("GetEmployeesQuery", Nothing)
            Return MyBase.CreateQuery(Of Employee)("GetEmployees", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProducts' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        Public Function GetProductsQuery() As EntityQuery(Of Product)
            Me.ValidateMethod("GetProductsQuery", Nothing)
            Return MyBase.CreateQuery(Of Product)("GetProducts", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProductsByCategory' query.
        ''' </summary>
        ''' <param name="subCategoryID">The value for the 'subCategoryID' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        Public Function GetProductsByCategoryQuery(ByVal subCategoryID As Integer) As EntityQuery(Of Product)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("subCategoryID", subCategoryID)
            Me.ValidateMethod("GetProductsByCategoryQuery", parameters)
            Return MyBase.CreateQuery(Of Product)("GetProductsByCategory", parameters, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProductsWithCaching' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        Public Function GetProductsWithCachingQuery() As EntityQuery(Of Product)
            Me.ValidateMethod("GetProductsWithCachingQuery", Nothing)
            Return MyBase.CreateQuery(Of Product)("GetProductsWithCaching", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProductsWithCustomTotalCount' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        Public Function GetProductsWithCustomTotalCountQuery() As EntityQuery(Of Product)
            Me.ValidateMethod("GetProductsWithCustomTotalCountQuery", Nothing)
            Return MyBase.CreateQuery(Of Product)("GetProductsWithCustomTotalCount", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="PurchaseOrder"/> entity instances using the 'GetPurchaseOrders' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="PurchaseOrder"/> entity instances.</returns>
        Public Function GetPurchaseOrdersQuery() As EntityQuery(Of PurchaseOrder)
            Me.ValidateMethod("GetPurchaseOrdersQuery", Nothing)
            Return MyBase.CreateQuery(Of PurchaseOrder)("GetPurchaseOrders", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Creates a new EntityContainer for this DomainContext's EntitySets.
        ''' </summary>
        ''' <returns>A new container instance.</returns>
        Protected Overrides Function CreateEntityContainer() As EntityContainer
            Return New CatalogEntityContainer()
        End Function
        
        ''' <summary>
        ''' Service contract for the 'Catalog' DomainService.
        ''' </summary>
        <ServiceContract()>  _
        Public Interface ICatalogContract
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetEmployees' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/Catalog/GetEmployees", ReplyAction:="http://tempuri.org/Catalog/GetEmployeesResponse")>  _
            Function BeginGetEmployees(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetEmployees'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetEmployees'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetEmployees' operation.</returns>
            Function EndGetEmployees(ByVal result As IAsyncResult) As QueryResult(Of Employee)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetProducts' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/Catalog/GetProducts", ReplyAction:="http://tempuri.org/Catalog/GetProductsResponse")>  _
            Function BeginGetProducts(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetProducts'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetProducts'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetProducts' operation.</returns>
            Function EndGetProducts(ByVal result As IAsyncResult) As QueryResult(Of Product)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetProductsByCategory' operation.
            ''' </summary>
            ''' <param name="subCategoryID">The value for the 'subCategoryID' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/Catalog/GetProductsByCategory", ReplyAction:="http://tempuri.org/Catalog/GetProductsByCategoryResponse")>  _
            Function BeginGetProductsByCategory(ByVal subCategoryID As Integer, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetProductsByCategory'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetProductsByCategory'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetProductsByCategory' operation.</returns>
            Function EndGetProductsByCategory(ByVal result As IAsyncResult) As QueryResult(Of Product)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetProductsWithCaching' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/Catalog/GetProductsWithCaching", ReplyAction:="http://tempuri.org/Catalog/GetProductsWithCachingResponse")>  _
            Function BeginGetProductsWithCaching(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetProductsWithCaching'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetProductsWithCaching'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetProductsWithCaching' operation.</returns>
            Function EndGetProductsWithCaching(ByVal result As IAsyncResult) As QueryResult(Of Product)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetProductsWithCustomTotalCount' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/Catalog/GetProductsWithCustomTotalCount", ReplyAction:="http://tempuri.org/Catalog/GetProductsWithCustomTotalCountResponse")>  _
            Function BeginGetProductsWithCustomTotalCount(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetProductsWithCustomTotalCount'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetProductsWithCustomTotalCount'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetProductsWithCustomTotalCount' operation.</returns>
            Function EndGetProductsWithCustomTotalCount(ByVal result As IAsyncResult) As QueryResult(Of Product)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetPurchaseOrders' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/Catalog/GetPurchaseOrders", ReplyAction:="http://tempuri.org/Catalog/GetPurchaseOrdersResponse")>  _
            Function BeginGetPurchaseOrders(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetPurchaseOrders'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetPurchaseOrders'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetPurchaseOrders' operation.</returns>
            Function EndGetPurchaseOrders(ByVal result As IAsyncResult) As QueryResult(Of PurchaseOrder)
            
            ''' <summary>
            ''' Asynchronously invokes the 'SubmitChanges' operation.
            ''' </summary>
            ''' <param name="changeSet">The change-set to submit.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/Catalog/SubmitChanges", ReplyAction:="http://tempuri.org/Catalog/SubmitChangesResponse")>  _
            Function BeginSubmitChanges(ByVal changeSet As IEnumerable(Of ChangeSetEntry), ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            ''' <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            Function EndSubmitChanges(ByVal result As IAsyncResult) As IEnumerable(Of ChangeSetEntry)
        End Interface
        
        Friend NotInheritable Class CatalogEntityContainer
            Inherits EntityContainer
            
            Public Sub New()
                MyBase.New
                Me.CreateEntitySet(Of Employee)(EntitySetOperations.None)
                Me.CreateEntitySet(Of Product)(EntitySetOperations.All)
                Me.CreateEntitySet(Of PurchaseOrder)(EntitySetOperations.All)
                Me.CreateEntitySet(Of PurchaseOrderDetail)(EntitySetOperations.All)
            End Sub
        End Class
    End Class
End Namespace
