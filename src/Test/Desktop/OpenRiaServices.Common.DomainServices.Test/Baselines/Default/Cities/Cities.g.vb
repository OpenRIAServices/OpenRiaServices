'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Compare Binary
Option Infer On
Option Strict On
Option Explicit On

Imports OpenRiaServices
Imports OpenRiaServices.Client
Imports OpenRiaServices.Client.Authentication
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations
Imports System.Linq
Imports System.Runtime.Serialization
Imports System.ServiceModel
Imports System.Threading
Imports System.Threading.Tasks

Namespace Cities
    
    ''' <summary>
    ''' The 'City' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/Cities"),  _
     KnownType(GetType(CityWithEditHistory)),  _
     KnownType(GetType(CityWithInfo))>  _
    Partial Public Class City
        Inherits Entity
        
        Private _calculatedCounty As String
        
        Private _county As EntityRef(Of County)
        
        Private _countyName As String
        
        Private _name As String
        
        Private _stateName As String
        
        Private _zipCodes As EntityCollection(Of Zip)
        
        Private _zoneID As Integer
        
        Private _zoneName As String
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnCalculatedCountyChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnCalculatedCountyChanged()
        End Sub
        Private Partial Sub OnCountyNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnCountyNameChanged()
        End Sub
        Private Partial Sub OnNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnNameChanged()
        End Sub
        Private Partial Sub OnStateNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnStateNameChanged()
        End Sub
        Private Partial Sub OnZoneIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnZoneIDChanged()
        End Sub
        Private Partial Sub OnZoneNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnZoneNameChanged()
        End Sub
        Private Partial Sub OnAssignCityZoneInvoking(ByVal zoneName As String)
        End Sub
        Private Partial Sub OnAssignCityZoneInvoked()
        End Sub
        Private Partial Sub OnAssignCityZoneIfAuthorizedInvoking(ByVal zoneName As String)
        End Sub
        Private Partial Sub OnAssignCityZoneIfAuthorizedInvoked()
        End Sub
        Private Partial Sub OnAutoAssignCityZoneInvoking()
        End Sub
        Private Partial Sub OnAutoAssignCityZoneInvoked()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="City"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'CalculatedCounty' value.
        ''' </summary>
        <DataMember(),  _
         Editable(false)>  _
        Public Property CalculatedCounty() As String
            Get
                Return Me._calculatedCounty
            End Get
            Set
                If (String.Equals(Me._calculatedCounty, value) = false) Then
                    Me.OnCalculatedCountyChanging(value)
                    Me.ValidateProperty("CalculatedCounty", value)
                    Me._calculatedCounty = value
                    Me.RaisePropertyChanged("CalculatedCounty")
                    Me.OnCalculatedCountyChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="County"/> entity.
        ''' </summary>
        <Association("County_City", "CountyName,StateName", "Name,StateName", IsForeignKey:=true)>  _
        Public Property County() As County
            Get
                If (Me._county Is Nothing) Then
                    Me._county = New EntityRef(Of County)(Me, "County", AddressOf Me.FilterCounty)
                End If
                Return Me._county.Entity
            End Get
            Set
                Dim previous As County = Me.County
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("County", value)
                    If (Not (previous) Is Nothing) Then
                        Me._county.Entity = Nothing
                        previous.Cities.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.CountyName = value.Name
                        Me.StateName = value.StateName
                    Else
                        Me.CountyName = CType(Nothing, String)
                        Me.StateName = CType(Nothing, String)
                    End If
                    Me._county.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.Cities.Add(Me)
                    End If
                    Me.RaisePropertyChanged("County")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'CountyName' value.
        ''' </summary>
        <DataMember(),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property CountyName() As String
            Get
                Return Me._countyName
            End Get
            Set
                If (String.Equals(Me._countyName, value) = false) Then
                    Me.OnCountyNameChanging(value)
                    Me.RaiseDataMemberChanging("CountyName")
                    Me.ValidateProperty("CountyName", value)
                    Me._countyName = value
                    Me.RaiseDataMemberChanged("CountyName")
                    Me.OnCountyNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Name' value.
        ''' </summary>
        <DataMember(),  _
         Display(Description:="CityHelpText", Name:="CityName", Prompt:="CityPrompt", ResourceType:=GetType(Cities_Resources), ShortName:="CityCaption"),  _
         Key(),  _
         RegularExpression("^[A-Z]+[a-z A-Z]*$"),  _
         Required(),  _
         RoundtripOriginal(),  _
         StringLength(32)>  _
        Public Property Name() As String
            Get
                Return Me._name
            End Get
            Set
                If (String.Equals(Me._name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.RaiseDataMemberChanging("Name")
                    Me.ValidateProperty("Name", value)
                    Me._name = value
                    Me.RaiseDataMemberChanged("Name")
                    Me.OnNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'StateName' value.
        ''' </summary>
        <DataMember(),  _
         Key(),  _
         RegularExpression("^[A-Z]+[a-z A-Z]*$"),  _
         RoundtripOriginal(),  _
         StringLength(2)>  _
        Public Property StateName() As String
            Get
                Return Me._stateName
            End Get
            Set
                If (String.Equals(Me._stateName, value) = false) Then
                    Me.OnStateNameChanging(value)
                    Me.RaiseDataMemberChanging("StateName")
                    Me.ValidateProperty("StateName", value)
                    Me._stateName = value
                    Me.RaiseDataMemberChanged("StateName")
                    Me.OnStateNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="Zip"/> entity instances.
        ''' </summary>
        <Association("City_Zip", "Name, CountyName, StateName", "CityName,  CountyName, StateName")>  _
        Public ReadOnly Property ZipCodes() As EntityCollection(Of Zip)
            Get
                If (Me._zipCodes Is Nothing) Then
                    Me._zipCodes = New EntityCollection(Of Zip)(Me, "ZipCodes", AddressOf Me.FilterZipCodes, AddressOf Me.AttachZipCodes, AddressOf Me.DetachZipCodes)
                End If
                Return Me._zipCodes
            End Get
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ZoneID' value.
        ''' </summary>
        <DataMember(),  _
         Range(0, 9999),  _
         RoundtripOriginal()>  _
        Public Property ZoneID() As Integer
            Get
                Return Me._zoneID
            End Get
            Set
                If ((Me._zoneID = value)  _
                            = false) Then
                    Me.OnZoneIDChanging(value)
                    Me.RaiseDataMemberChanging("ZoneID")
                    Me.ValidateProperty("ZoneID", value)
                    Me._zoneID = value
                    Me.RaiseDataMemberChanged("ZoneID")
                    Me.OnZoneIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ZoneName' value.
        ''' </summary>
        <CustomValidation(GetType(CityPropertyValidator), "IsValidZoneName"),  _
         DataMember(),  _
         Display(AutoGenerateField:=false),  _
         RoundtripOriginal()>  _
        Public Property ZoneName() As String
            Get
                Return Me._zoneName
            End Get
            Set
                If (String.Equals(Me._zoneName, value) = false) Then
                    Me.OnZoneNameChanging(value)
                    Me.RaiseDataMemberChanging("ZoneName")
                    Me.ValidateProperty("ZoneName", value)
                    Me._zoneName = value
                    Me.RaiseDataMemberChanged("ZoneName")
                    Me.OnZoneNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'AssignCityZone' action has been invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property IsAssignCityZoneInvoked() As Boolean
            Get
                Return MyBase.IsActionInvoked("AssignCityZone")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'AssignCityZone' method can be invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property CanAssignCityZone() As Boolean
            Get
                Return MyBase.CanInvokeAction("AssignCityZone")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'AssignCityZoneIfAuthorized' action has been invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property IsAssignCityZoneIfAuthorizedInvoked() As Boolean
            Get
                Return MyBase.IsActionInvoked("AssignCityZoneIfAuthorized")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'AssignCityZoneIfAuthorized' method can be invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property CanAssignCityZoneIfAuthorized() As Boolean
            Get
                Return MyBase.CanInvokeAction("AssignCityZoneIfAuthorized")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'AutoAssignCityZone' action has been invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property IsAutoAssignCityZoneInvoked() As Boolean
            Get
                Return MyBase.IsActionInvoked("AutoAssignCityZone")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'AutoAssignCityZone' method can be invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property CanAutoAssignCityZone() As Boolean
            Get
                Return MyBase.CanInvokeAction("AutoAssignCityZone")
            End Get
        End Property
        
        Private Function FilterCounty(ByVal entity As County) As Boolean
            Return (Object.Equals(entity.Name, Me.CountyName) AndAlso Object.Equals(entity.StateName, Me.StateName))
        End Function
        
        Private Sub AttachZipCodes(ByVal entity As Zip)
            entity.City = Me
        End Sub
        
        Private Sub DetachZipCodes(ByVal entity As Zip)
            entity.City = Nothing
        End Sub
        
        Private Function FilterZipCodes(ByVal entity As Zip) As Boolean
            Return ((Object.Equals(entity.CityName, Me.Name) AndAlso Object.Equals(entity.CountyName, Me.CountyName))  _
                        AndAlso Object.Equals(entity.StateName, Me.StateName))
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            If (((Me._countyName Is Nothing)  _
                        OrElse (Me._name Is Nothing))  _
                        OrElse (Me._stateName Is Nothing)) Then
                Return Nothing
            End If
            Return EntityKey.Create(Me._countyName, Me._name, Me._stateName)
        End Function
        
        'The following attributes were not generated:
        '
        '- The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'Cities.CityMethodValidator' that is not accessible in the client project 'MockProject'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        '- The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'ValidateMethod' on type 'Cities.CityMethodValidator' that is not accessible in the client project 'MockProject'.
        '<CustomValidationAttribute(GetType(Cities.CityMethodValidator), "ValidateMethod")> _
        '
        ''' <summary>
        ''' Invokes the 'AssignCityZone' action on this entity.
        ''' </summary>
        ''' <param name="zoneName">The value to pass to the server method's 'zoneName' parameter.</param>
        <EntityAction("AssignCityZone", AllowMultipleInvocations:=false)>  _
        Public Sub AssignCityZone(ByVal zoneName As String)
            Me.OnAssignCityZoneInvoking(zoneName)
            MyBase.InvokeAction("AssignCityZone", zoneName)
            Me.OnAssignCityZoneInvoked
        End Sub
        
        ''' <summary>
        ''' Invokes the 'AssignCityZoneIfAuthorized' action on this entity.
        ''' </summary>
        ''' <param name="zoneName">The value to pass to the server method's 'zoneName' parameter.</param>
        <EntityAction("AssignCityZoneIfAuthorized", AllowMultipleInvocations:=false)>  _
        Public Sub AssignCityZoneIfAuthorized(ByVal zoneName As String)
            Me.OnAssignCityZoneIfAuthorizedInvoking(zoneName)
            MyBase.InvokeAction("AssignCityZoneIfAuthorized", zoneName)
            Me.OnAssignCityZoneIfAuthorizedInvoked
        End Sub
        
        ''' <summary>
        ''' Invokes the 'AutoAssignCityZone' action on this entity.
        ''' </summary>
        <EntityAction("AutoAssignCityZone", AllowMultipleInvocations:=false)>  _
        Public Sub AutoAssignCityZone()
            Me.OnAutoAssignCityZoneInvoking
            MyBase.InvokeAction("AutoAssignCityZone")
            Me.OnAutoAssignCityZoneInvoked
        End Sub
    End Class
    
    ''' <summary>
    ''' The DomainContext corresponding to the 'CityDomainService' DomainService.
    ''' </summary>
    <DomainIdentifier("CityProvider")>  _
    Partial Public NotInheritable Class CityDomainContext
        Inherits DomainContext
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="CityDomainContext"/> class.
        ''' </summary>
        Public Sub New()
            Me.New(New Uri("Cities-CityDomainService.svc", UriKind.Relative))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="CityDomainContext"/> class with the specified service URI.
        ''' </summary>
        ''' <param name="serviceUri">The CityDomainService service URI.</param>
        Public Sub New(ByVal serviceUri As Uri)
            Me.New(DomainContext.CreateDomainClient(GetType(ICityDomainServiceContract), serviceUri, false))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="CityDomainContext"/> class with the specified <paramref name="domainClient"/>.
        ''' </summary>
        ''' <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        Public Sub New(ByVal domainClient As DomainClient)
            MyBase.New(domainClient)
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets the set of <see cref="City"/> entity instances that have been loaded into this <see cref="CityDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property Cities() As EntitySet(Of City)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of City)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="County"/> entity instances that have been loaded into this <see cref="CityDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property Counties() As EntitySet(Of County)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of County)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="State"/> entity instances that have been loaded into this <see cref="CityDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property States() As EntitySet(Of State)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of State)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="Zip"/> entity instances that have been loaded into this <see cref="CityDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property Zips() As EntitySet(Of Zip)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of Zip)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="City"/> entity instances using the 'GetCities' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="City"/> entity instances.</returns>
        Public Function GetCitiesQuery() As EntityQuery(Of City)
            Me.ValidateMethod("GetCitiesQuery", Nothing)
            Return MyBase.CreateQuery(Of City)("GetCities", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="City"/> entity instances using the 'GetCitiesInState' query.
        ''' </summary>
        ''' <param name="state">The value for the 'state' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="City"/> entity instances.</returns>
        Public Function GetCitiesInStateQuery(ByVal state As String) As EntityQuery(Of City)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("state", state)
            Me.ValidateMethod("GetCitiesInStateQuery", parameters)
            Return MyBase.CreateQuery(Of City)("GetCitiesInState", parameters, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="CityWithEditHistory"/> entity instances using the 'GetCitiesWithEditHistory' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithEditHistory"/> entity instances.</returns>
        Public Function GetCitiesWithEditHistoryQuery() As EntityQuery(Of CityWithEditHistory)
            Me.ValidateMethod("GetCitiesWithEditHistoryQuery", Nothing)
            Return MyBase.CreateQuery(Of CityWithEditHistory)("GetCitiesWithEditHistory", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="CityWithInfo"/> entity instances using the 'GetCitiesWithInfo' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithInfo"/> entity instances.</returns>
        Public Function GetCitiesWithInfoQuery() As EntityQuery(Of CityWithInfo)
            Me.ValidateMethod("GetCitiesWithInfoQuery", Nothing)
            Return MyBase.CreateQuery(Of CityWithInfo)("GetCitiesWithInfo", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="County"/> entity instances using the 'GetCounties' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="County"/> entity instances.</returns>
        Public Function GetCountiesQuery() As EntityQuery(Of County)
            Me.ValidateMethod("GetCountiesQuery", Nothing)
            Return MyBase.CreateQuery(Of County)("GetCounties", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="CityWithEditHistory"/> entity instances using the 'GetDeletedCities' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithEditHistory"/> entity instances.</returns>
        Public Function GetDeletedCitiesQuery() As EntityQuery(Of CityWithEditHistory)
            Me.ValidateMethod("GetDeletedCitiesQuery", Nothing)
            Return MyBase.CreateQuery(Of CityWithEditHistory)("GetDeletedCities", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="State"/> entity instances using the 'GetStates' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="State"/> entity instances.</returns>
        Public Function GetStatesQuery() As EntityQuery(Of State)
            Me.ValidateMethod("GetStatesQuery", Nothing)
            Return MyBase.CreateQuery(Of State)("GetStates", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="State"/> entity instances using the 'GetStatesInShippingZone' query.
        ''' </summary>
        ''' <param name="shippingZone">The value for the 'shippingZone' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="State"/> entity instances.</returns>
        Public Function GetStatesInShippingZoneQuery(ByVal shippingZone As ShippingZone) As EntityQuery(Of State)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("shippingZone", shippingZone)
            Me.ValidateMethod("GetStatesInShippingZoneQuery", parameters)
            Return MyBase.CreateQuery(Of State)("GetStatesInShippingZone", parameters, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Zip"/> entity instances using the 'GetZips' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Zip"/> entity instances.</returns>
        Public Function GetZipsQuery() As EntityQuery(Of Zip)
            Me.ValidateMethod("GetZipsQuery", Nothing)
            Return MyBase.CreateQuery(Of Zip)("GetZips", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Zip"/> entity instances using the 'GetZipsIfAuthenticated' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Zip"/> entity instances.</returns>
        Public Function GetZipsIfAuthenticatedQuery() As EntityQuery(Of Zip)
            Me.ValidateMethod("GetZipsIfAuthenticatedQuery", Nothing)
            Return MyBase.CreateQuery(Of Zip)("GetZipsIfAuthenticated", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Zip"/> entity instances using the 'GetZipsIfInRole' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Zip"/> entity instances.</returns>
        Public Function GetZipsIfInRoleQuery() As EntityQuery(Of Zip)
            Me.ValidateMethod("GetZipsIfInRoleQuery", Nothing)
            Return MyBase.CreateQuery(Of Zip)("GetZipsIfInRole", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Zip"/> entity instances using the 'GetZipsIfUser' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Zip"/> entity instances.</returns>
        Public Function GetZipsIfUserQuery() As EntityQuery(Of Zip)
            Me.ValidateMethod("GetZipsIfUserQuery", Nothing)
            Return MyBase.CreateQuery(Of Zip)("GetZipsIfUser", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Zip"/> entity instances using the 'GetZipsWithDelay' query.
        ''' </summary>
        ''' <param name="delay">The value for the 'delay' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Zip"/> entity instances.</returns>
        Public Function GetZipsWithDelayQuery(ByVal delay As TimeSpan) As EntityQuery(Of Zip)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("delay", delay)
            Me.ValidateMethod("GetZipsWithDelayQuery", parameters)
            Return MyBase.CreateQuery(Of Zip)("GetZipsWithDelay", parameters, false, true)
        End Function
        
        ''' <summary>
        ''' Invokes the 'AssignCityZone' method of the specified <see cref="City"/> entity.
        ''' </summary>
        ''' <param name="city">The <see cref="City"/> entity instance.</param>
        ''' <param name="zoneName">The value for the 'zoneName' parameter for this action.</param>
        Public Sub AssignCityZone(ByVal city As City, ByVal zoneName As String)
            city.AssignCityZone(zoneName)
        End Sub
        
        ''' <summary>
        ''' Invokes the 'AutoAssignCityZone' method of the specified <see cref="City"/> entity.
        ''' </summary>
        ''' <param name="city">The <see cref="City"/> entity instance.</param>
        Public Sub AutoAssignCityZone(ByVal city As City)
            city.AutoAssignCityZone
        End Sub
        
        ''' <summary>
        ''' Invokes the 'AssignCityZoneIfAuthorized' method of the specified <see cref="City"/> entity.
        ''' </summary>
        ''' <param name="city">The <see cref="City"/> entity instance.</param>
        ''' <param name="zoneName">The value for the 'zoneName' parameter for this action.</param>
        Public Sub AssignCityZoneIfAuthorized(ByVal city As City, ByVal zoneName As String)
            city.AssignCityZoneIfAuthorized(zoneName)
        End Sub
        
        ''' <summary>
        ''' Invokes the 'TouchHistory' method of the specified <see cref="CityWithEditHistory"/> entity.
        ''' </summary>
        ''' <param name="city">The <see cref="CityWithEditHistory"/> entity instance.</param>
        ''' <param name="touchString">The value for the 'touchString' parameter for this action.</param>
        Public Sub TouchHistory(ByVal city As CityWithEditHistory, ByVal touchString As String)
            city.TouchHistory(touchString)
        End Sub
        
        ''' <summary>
        ''' Invokes the 'SetCityInfo' method of the specified <see cref="CityWithInfo"/> entity.
        ''' </summary>
        ''' <param name="cityWithInfo">The <see cref="CityWithInfo"/> entity instance.</param>
        ''' <param name="info">The value for the 'info' parameter for this action.</param>
        Public Sub SetCityInfo(ByVal cityWithInfo As CityWithInfo, ByVal info As String)
            cityWithInfo.SetCityInfo(info)
        End Sub
        
        ''' <summary>
        ''' Invokes the 'ReassignZipCode' method of the specified <see cref="Zip"/> entity.
        ''' </summary>
        ''' <param name="zip">The <see cref="Zip"/> entity instance.</param>
        ''' <param name="offset">The value for the 'offset' parameter for this action.</param>
        ''' <param name="useFull">The value for the 'useFull' parameter for this action.</param>
        Public Sub ReassignZipCode(ByVal zip As Zip, ByVal offset As Integer, ByVal useFull As Boolean)
            zip.ReassignZipCode(offset, useFull)
        End Sub
        
        ''' <summary>
        ''' Invokes the 'ThrowException' method of the specified <see cref="Zip"/> entity.
        ''' </summary>
        ''' <param name="zip">The <see cref="Zip"/> entity instance.</param>
        ''' <param name="scenario">The value for the 'scenario' parameter for this action.</param>
        Public Sub ThrowException(ByVal zip As Zip, ByVal scenario As String)
            zip.ThrowException(scenario)
        End Sub
        
        ''' <summary>
        ''' Asynchronously invokes the 'Echo' method of the DomainService.
        ''' </summary>
        ''' <param name="msg">The value for the 'msg' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function Echo(ByVal msg As String, ByVal callback As Action(Of InvokeOperation(Of String)), ByVal userState As Object) As InvokeOperation(Of String)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("msg", msg)
            Me.ValidateMethod("Echo", parameters)
            Return Me.InvokeOperation(Of String)("Echo", GetType(String), parameters, true, callback, userState)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'Echo' method of the DomainService.
        ''' </summary>
        ''' <param name="msg">The value for the 'msg' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function Echo(ByVal msg As String) As InvokeOperation(Of String)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("msg", msg)
            Me.ValidateMethod("Echo", parameters)
            Return Me.InvokeOperation(Of String)("Echo", GetType(String), parameters, true, Nothing, Nothing)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'Echo' method of the DomainService.
        ''' </summary>
        ''' <param name="msg">The value for the 'msg' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function EchoAsync(ByVal msg As String, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of String))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("msg", msg)
            Me.ValidateMethod("Echo", parameters)
            Return Me.InvokeOperationAsync(Of String)("Echo", parameters, true, cancellationToken)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'EchoWithDelay' method of the DomainService.
        ''' </summary>
        ''' <param name="msg">The value for the 'msg' parameter of this action.</param>
        ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function EchoWithDelay(ByVal msg As String, ByVal delay As TimeSpan, ByVal callback As Action(Of InvokeOperation(Of String)), ByVal userState As Object) As InvokeOperation(Of String)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("msg", msg)
            parameters.Add("delay", delay)
            Me.ValidateMethod("EchoWithDelay", parameters)
            Return Me.InvokeOperation(Of String)("EchoWithDelay", GetType(String), parameters, true, callback, userState)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'EchoWithDelay' method of the DomainService.
        ''' </summary>
        ''' <param name="msg">The value for the 'msg' parameter of this action.</param>
        ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function EchoWithDelay(ByVal msg As String, ByVal delay As TimeSpan) As InvokeOperation(Of String)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("msg", msg)
            parameters.Add("delay", delay)
            Me.ValidateMethod("EchoWithDelay", parameters)
            Return Me.InvokeOperation(Of String)("EchoWithDelay", GetType(String), parameters, true, Nothing, Nothing)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'EchoWithDelay' method of the DomainService.
        ''' </summary>
        ''' <param name="msg">The value for the 'msg' parameter of this action.</param>
        ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function EchoWithDelayAsync(ByVal msg As String, ByVal delay As TimeSpan, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of String))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("msg", msg)
            parameters.Add("delay", delay)
            Me.ValidateMethod("EchoWithDelay", parameters)
            Return Me.InvokeOperationAsync(Of String)("EchoWithDelay", parameters, true, cancellationToken)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'GetStateIfUser' method of the DomainService.
        ''' </summary>
        ''' <param name="city">The value for the 'city' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function GetStateIfUser(ByVal city As City, ByVal callback As Action(Of InvokeOperation(Of String)), ByVal userState As Object) As InvokeOperation(Of String)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("city", city)
            Me.ValidateMethod("GetStateIfUser", parameters)
            Return Me.InvokeOperation(Of String)("GetStateIfUser", GetType(String), parameters, true, callback, userState)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'GetStateIfUser' method of the DomainService.
        ''' </summary>
        ''' <param name="city">The value for the 'city' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function GetStateIfUser(ByVal city As City) As InvokeOperation(Of String)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("city", city)
            Me.ValidateMethod("GetStateIfUser", parameters)
            Return Me.InvokeOperation(Of String)("GetStateIfUser", GetType(String), parameters, true, Nothing, Nothing)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'GetStateIfUser' method of the DomainService.
        ''' </summary>
        ''' <param name="city">The value for the 'city' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function GetStateIfUserAsync(ByVal city As City, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of String))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("city", city)
            Me.ValidateMethod("GetStateIfUser", parameters)
            Return Me.InvokeOperationAsync(Of String)("GetStateIfUser", parameters, true, cancellationToken)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'ResetData' method of the DomainService.
        ''' </summary>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function ResetData(ByVal callback As Action(Of InvokeOperation), ByVal userState As Object) As InvokeOperation
            Me.ValidateMethod("ResetData", Nothing)
            Return Me.InvokeOperation("ResetData", GetType(System.Void), Nothing, true, callback, userState)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'ResetData' method of the DomainService.
        ''' </summary>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function ResetData() As InvokeOperation
            Me.ValidateMethod("ResetData", Nothing)
            Return Me.InvokeOperation("ResetData", GetType(System.Void), Nothing, true, Nothing, Nothing)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'ResetData' method of the DomainService.
        ''' </summary>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function ResetDataAsync(Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult)
            Me.ValidateMethod("ResetData", Nothing)
            Return Me.InvokeOperationAsync("ResetData", Nothing, true, cancellationToken)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'UsesCustomHost' method of the DomainService.
        ''' </summary>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function UsesCustomHost(ByVal callback As Action(Of InvokeOperation(Of Boolean)), ByVal userState As Object) As InvokeOperation(Of Boolean)
            Me.ValidateMethod("UsesCustomHost", Nothing)
            Return Me.InvokeOperation(Of Boolean)("UsesCustomHost", GetType(Boolean), Nothing, true, callback, userState)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'UsesCustomHost' method of the DomainService.
        ''' </summary>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function UsesCustomHost() As InvokeOperation(Of Boolean)
            Me.ValidateMethod("UsesCustomHost", Nothing)
            Return Me.InvokeOperation(Of Boolean)("UsesCustomHost", GetType(Boolean), Nothing, true, Nothing, Nothing)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'UsesCustomHost' method of the DomainService.
        ''' </summary>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function UsesCustomHostAsync(Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of Boolean))
            Me.ValidateMethod("UsesCustomHost", Nothing)
            Return Me.InvokeOperationAsync(Of Boolean)("UsesCustomHost", Nothing, true, cancellationToken)
        End Function
        
        ''' <summary>
        ''' Creates a new EntityContainer for this DomainContext's EntitySets.
        ''' </summary>
        ''' <returns>A new container instance.</returns>
        Protected Overrides Function CreateEntityContainer() As EntityContainer
            Return New CityDomainContextEntityContainer()
        End Function
        
        ''' <summary>
        ''' Service contract for the 'CityDomainService' DomainService.
        ''' </summary>
        <ServiceContract()>  _
        Public Interface ICityDomainServiceContract
            
            ''' <summary>
            ''' Asynchronously invokes the 'Echo' operation.
            ''' </summary>
            ''' <param name="msg">The value for the 'msg' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(true),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/Echo", ReplyAction:="http://tempuri.org/CityDomainService/EchoResponse")>  _
            Function BeginEcho(ByVal msg As String, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginEcho'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginEcho'.</param>
            ''' <returns>The 'String' returned from the 'Echo' operation.</returns>
            Function EndEcho(ByVal result As IAsyncResult) As String
            
            ''' <summary>
            ''' Asynchronously invokes the 'EchoWithDelay' operation.
            ''' </summary>
            ''' <param name="msg">The value for the 'msg' parameter of this action.</param>
            ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(true),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/EchoWithDelay", ReplyAction:="http://tempuri.org/CityDomainService/EchoWithDelayResponse")>  _
            Function BeginEchoWithDelay(ByVal msg As String, ByVal delay As TimeSpan, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginEchoWithDelay'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginEchoWithDelay'.</param>
            ''' <returns>The 'String' returned from the 'EchoWithDelay' operation.</returns>
            Function EndEchoWithDelay(ByVal result As IAsyncResult) As String
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetCities' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetCities", ReplyAction:="http://tempuri.org/CityDomainService/GetCitiesResponse")>  _
            Function BeginGetCities(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetCities'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetCities'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetCities' operation.</returns>
            Function EndGetCities(ByVal result As IAsyncResult) As QueryResult(Of City)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetCitiesInState' operation.
            ''' </summary>
            ''' <param name="state">The value for the 'state' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetCitiesInState", ReplyAction:="http://tempuri.org/CityDomainService/GetCitiesInStateResponse")>  _
            Function BeginGetCitiesInState(ByVal state As String, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetCitiesInState'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetCitiesInState'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetCitiesInState' operation.</returns>
            Function EndGetCitiesInState(ByVal result As IAsyncResult) As QueryResult(Of City)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetCitiesWithEditHistory' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetCitiesWithEditHistory", ReplyAction:="http://tempuri.org/CityDomainService/GetCitiesWithEditHistoryResponse")>  _
            Function BeginGetCitiesWithEditHistory(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetCitiesWithEditHistory'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithEditHistory'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetCitiesWithEditHistory' operation.</returns>
            Function EndGetCitiesWithEditHistory(ByVal result As IAsyncResult) As QueryResult(Of CityWithEditHistory)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetCitiesWithInfo' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetCitiesWithInfo", ReplyAction:="http://tempuri.org/CityDomainService/GetCitiesWithInfoResponse")>  _
            Function BeginGetCitiesWithInfo(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetCitiesWithInfo'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithInfo'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetCitiesWithInfo' operation.</returns>
            Function EndGetCitiesWithInfo(ByVal result As IAsyncResult) As QueryResult(Of CityWithInfo)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetCounties' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetCounties", ReplyAction:="http://tempuri.org/CityDomainService/GetCountiesResponse")>  _
            Function BeginGetCounties(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetCounties'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetCounties'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetCounties' operation.</returns>
            Function EndGetCounties(ByVal result As IAsyncResult) As QueryResult(Of County)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetDeletedCities' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetDeletedCities", ReplyAction:="http://tempuri.org/CityDomainService/GetDeletedCitiesResponse")>  _
            Function BeginGetDeletedCities(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetDeletedCities'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetDeletedCities'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetDeletedCities' operation.</returns>
            Function EndGetDeletedCities(ByVal result As IAsyncResult) As QueryResult(Of CityWithEditHistory)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetStateIfUser' operation.
            ''' </summary>
            ''' <param name="city">The value for the 'city' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(true),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetStateIfUser", ReplyAction:="http://tempuri.org/CityDomainService/GetStateIfUserResponse")>  _
            Function BeginGetStateIfUser(ByVal city As City, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetStateIfUser'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetStateIfUser'.</param>
            ''' <returns>The 'String' returned from the 'GetStateIfUser' operation.</returns>
            Function EndGetStateIfUser(ByVal result As IAsyncResult) As String
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetStates' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetStates", ReplyAction:="http://tempuri.org/CityDomainService/GetStatesResponse")>  _
            Function BeginGetStates(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetStates'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetStates'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetStates' operation.</returns>
            Function EndGetStates(ByVal result As IAsyncResult) As QueryResult(Of State)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetStatesInShippingZone' operation.
            ''' </summary>
            ''' <param name="shippingZone">The value for the 'shippingZone' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetStatesInShippingZone", ReplyAction:="http://tempuri.org/CityDomainService/GetStatesInShippingZoneResponse")>  _
            Function BeginGetStatesInShippingZone(ByVal shippingZone As ShippingZone, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetStatesInShippingZone'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetStatesInShippingZone'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetStatesInShippingZone' operation.</returns>
            Function EndGetStatesInShippingZone(ByVal result As IAsyncResult) As QueryResult(Of State)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetZips' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetZips", ReplyAction:="http://tempuri.org/CityDomainService/GetZipsResponse")>  _
            Function BeginGetZips(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetZips'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetZips'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetZips' operation.</returns>
            Function EndGetZips(ByVal result As IAsyncResult) As QueryResult(Of Zip)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetZipsIfAuthenticated' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetZipsIfAuthenticated", ReplyAction:="http://tempuri.org/CityDomainService/GetZipsIfAuthenticatedResponse")>  _
            Function BeginGetZipsIfAuthenticated(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetZipsIfAuthenticated'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetZipsIfAuthenticated'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetZipsIfAuthenticated' operation.</returns>
            Function EndGetZipsIfAuthenticated(ByVal result As IAsyncResult) As QueryResult(Of Zip)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetZipsIfInRole' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetZipsIfInRole", ReplyAction:="http://tempuri.org/CityDomainService/GetZipsIfInRoleResponse")>  _
            Function BeginGetZipsIfInRole(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetZipsIfInRole'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetZipsIfInRole'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetZipsIfInRole' operation.</returns>
            Function EndGetZipsIfInRole(ByVal result As IAsyncResult) As QueryResult(Of Zip)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetZipsIfUser' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetZipsIfUser", ReplyAction:="http://tempuri.org/CityDomainService/GetZipsIfUserResponse")>  _
            Function BeginGetZipsIfUser(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetZipsIfUser'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetZipsIfUser'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetZipsIfUser' operation.</returns>
            Function EndGetZipsIfUser(ByVal result As IAsyncResult) As QueryResult(Of Zip)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetZipsWithDelay' operation.
            ''' </summary>
            ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/GetZipsWithDelay", ReplyAction:="http://tempuri.org/CityDomainService/GetZipsWithDelayResponse")>  _
            Function BeginGetZipsWithDelay(ByVal delay As TimeSpan, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetZipsWithDelay'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetZipsWithDelay'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetZipsWithDelay' operation.</returns>
            Function EndGetZipsWithDelay(ByVal result As IAsyncResult) As QueryResult(Of Zip)
            
            ''' <summary>
            ''' Asynchronously invokes the 'ResetData' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(true),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/ResetData", ReplyAction:="http://tempuri.org/CityDomainService/ResetDataResponse")>  _
            Function BeginResetData(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginResetData'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginResetData'.</param>
            Sub EndResetData(ByVal result As IAsyncResult)
            
            ''' <summary>
            ''' Asynchronously invokes the 'UsesCustomHost' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(true),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/UsesCustomHost", ReplyAction:="http://tempuri.org/CityDomainService/UsesCustomHostResponse")>  _
            Function BeginUsesCustomHost(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginUsesCustomHost'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginUsesCustomHost'.</param>
            ''' <returns>The 'Boolean' returned from the 'UsesCustomHost' operation.</returns>
            Function EndUsesCustomHost(ByVal result As IAsyncResult) As Boolean
            
            ''' <summary>
            ''' Asynchronously invokes the 'SubmitChanges' operation.
            ''' </summary>
            ''' <param name="changeSet">The change-set to submit.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/CityDomainService/SubmitChanges", ReplyAction:="http://tempuri.org/CityDomainService/SubmitChangesResponse")>  _
            Function BeginSubmitChanges(ByVal changeSet As IEnumerable(Of ChangeSetEntry), ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            ''' <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            Function EndSubmitChanges(ByVal result As IAsyncResult) As IEnumerable(Of ChangeSetEntry)
        End Interface
        
        Friend NotInheritable Class CityDomainContextEntityContainer
            Inherits EntityContainer
            
            Public Sub New()
                MyBase.New
                Me.CreateEntitySet(Of City)(EntitySetOperations.All)
                Me.CreateEntitySet(Of County)(EntitySetOperations.None)
                Me.CreateEntitySet(Of State)(EntitySetOperations.Edit)
                Me.CreateEntitySet(Of Zip)(EntitySetOperations.All)
            End Sub
        End Class
    End Class
    
    ''' <summary>
    ''' The 'CityWithEditHistory' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/Cities")>  _
    Partial Public MustInherit Class CityWithEditHistory
        Inherits City
        
        Private _editHistory As String
        
        Private _lastUpdated As DateTime
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnEditHistoryChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnEditHistoryChanged()
        End Sub
        Private Partial Sub OnLastUpdatedChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnLastUpdatedChanged()
        End Sub
        Private Partial Sub OnTouchHistoryInvoking(ByVal touchString As String)
        End Sub
        Private Partial Sub OnTouchHistoryInvoked()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="CityWithEditHistory"/> class.
        ''' </summary>
        Protected Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'EditHistory' value.
        ''' </summary>
        <DataMember()>  _
        Public Property EditHistory() As String
            Get
                Return Me._editHistory
            End Get
            Set
                If (String.Equals(Me._editHistory, value) = false) Then
                    Me.OnEditHistoryChanging(value)
                    Me.RaiseDataMemberChanging("EditHistory")
                    Me.ValidateProperty("EditHistory", value)
                    Me._editHistory = value
                    Me.RaiseDataMemberChanged("EditHistory")
                    Me.OnEditHistoryChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'LastUpdated' value.
        ''' </summary>
        <DataMember()>  _
        Public Property LastUpdated() As DateTime
            Get
                Return Me._lastUpdated
            End Get
            Set
                If ((Me._lastUpdated = value)  _
                            = false) Then
                    Me.OnLastUpdatedChanging(value)
                    Me.RaiseDataMemberChanging("LastUpdated")
                    Me.ValidateProperty("LastUpdated", value)
                    Me._lastUpdated = value
                    Me.RaiseDataMemberChanged("LastUpdated")
                    Me.OnLastUpdatedChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'TouchHistory' action has been invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property IsTouchHistoryInvoked() As Boolean
            Get
                Return MyBase.IsActionInvoked("TouchHistory")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'TouchHistory' method can be invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property CanTouchHistory() As Boolean
            Get
                Return MyBase.CanInvokeAction("TouchHistory")
            End Get
        End Property
        
        ''' <summary>
        ''' Invokes the 'TouchHistory' action on this entity.
        ''' </summary>
        ''' <param name="touchString">The value to pass to the server method's 'touchString' parameter.</param>
        <EntityAction("TouchHistory", AllowMultipleInvocations:=false)>  _
        Public Sub TouchHistory(ByVal touchString As String)
            Me.OnTouchHistoryInvoking(touchString)
            MyBase.InvokeAction("TouchHistory", touchString)
            Me.OnTouchHistoryInvoked
        End Sub
    End Class
    
    ''' <summary>
    ''' The 'CityWithInfo' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/Cities")>  _
    Partial Public NotInheritable Class CityWithInfo
        Inherits CityWithEditHistory
        
        Private _info As String
        
        Private _zipCodesWithInfo As EntityCollection(Of ZipWithInfo)
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnInfoChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnInfoChanged()
        End Sub
        Private Partial Sub OnSetCityInfoInvoking(ByVal info As String)
        End Sub
        Private Partial Sub OnSetCityInfoInvoked()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="CityWithInfo"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'Info' value.
        ''' </summary>
        <DataMember(),  _
         Required(),  _
         StringLength(32)>  _
        Public Property Info() As String
            Get
                Return Me._info
            End Get
            Set
                If (String.Equals(Me._info, value) = false) Then
                    Me.OnInfoChanging(value)
                    Me.RaiseDataMemberChanging("Info")
                    Me.ValidateProperty("Info", value)
                    Me._info = value
                    Me.RaiseDataMemberChanged("Info")
                    Me.OnInfoChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="ZipWithInfo"/> entity instances.
        ''' </summary>
        <Association("CityWithInfo_ZipWithInfo", "Name, CountyName, StateName", "CityName,  CountyName, StateName")>  _
        Public ReadOnly Property ZipCodesWithInfo() As EntityCollection(Of ZipWithInfo)
            Get
                If (Me._zipCodesWithInfo Is Nothing) Then
                    Me._zipCodesWithInfo = New EntityCollection(Of ZipWithInfo)(Me, "ZipCodesWithInfo", AddressOf Me.FilterZipCodesWithInfo)
                End If
                Return Me._zipCodesWithInfo
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'SetCityInfo' action has been invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property IsSetCityInfoInvoked() As Boolean
            Get
                Return MyBase.IsActionInvoked("SetCityInfo")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'SetCityInfo' method can be invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property CanSetCityInfo() As Boolean
            Get
                Return MyBase.CanInvokeAction("SetCityInfo")
            End Get
        End Property
        
        Private Function FilterZipCodesWithInfo(ByVal entity As ZipWithInfo) As Boolean
            Return ((Object.Equals(entity.CityName, Me.Name) AndAlso Object.Equals(entity.CountyName, Me.CountyName))  _
                        AndAlso Object.Equals(entity.StateName, Me.StateName))
        End Function
        
        ''' <summary>
        ''' Invokes the 'SetCityInfo' action on this entity.
        ''' </summary>
        ''' <param name="info">The value to pass to the server method's 'info' parameter.</param>
        <EntityAction("SetCityInfo", AllowMultipleInvocations:=false)>  _
        Public Sub SetCityInfo(ByVal info As String)
            Me.OnSetCityInfoInvoking(info)
            MyBase.InvokeAction("SetCityInfo", info)
            Me.OnSetCityInfoInvoked
        End Sub
    End Class
    
    ''' <summary>
    ''' The 'County' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/Cities")>  _
    Partial Public NotInheritable Class County
        Inherits Entity
        
        Private _cities As EntityCollection(Of City)
        
        Private _name As String
        
        Private _state As EntityRef(Of State)
        
        Private _stateName As String
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnNameChanged()
        End Sub
        Private Partial Sub OnStateNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnStateNameChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="County"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="City"/> entity instances.
        ''' </summary>
        <Association("County_City", "Name,StateName", "CountyName,StateName")>  _
        Public ReadOnly Property Cities() As EntityCollection(Of City)
            Get
                If (Me._cities Is Nothing) Then
                    Me._cities = New EntityCollection(Of City)(Me, "Cities", AddressOf Me.FilterCities, AddressOf Me.AttachCities, AddressOf Me.DetachCities)
                End If
                Return Me._cities
            End Get
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Name' value.
        ''' </summary>
        <DataMember(),  _
         Key(),  _
         RegularExpression("^[A-Z]+[a-z A-Z]*$"),  _
         Required(),  _
         RoundtripOriginal(),  _
         StringLength(32)>  _
        Public Property Name() As String
            Get
                Return Me._name
            End Get
            Set
                If (String.Equals(Me._name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.RaiseDataMemberChanging("Name")
                    Me.ValidateProperty("Name", value)
                    Me._name = value
                    Me.RaiseDataMemberChanged("Name")
                    Me.OnNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="State"/> entity.
        ''' </summary>
        <Association("State_County", "StateName", "Name", IsForeignKey:=true)>  _
        Public Property State() As State
            Get
                If (Me._state Is Nothing) Then
                    Me._state = New EntityRef(Of State)(Me, "State", AddressOf Me.FilterState)
                End If
                Return Me._state.Entity
            End Get
            Set
                Dim previous As State = Me.State
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("State", value)
                    If (Not (previous) Is Nothing) Then
                        Me._state.Entity = Nothing
                        previous.Counties.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.StateName = value.Name
                    Else
                        Me.StateName = CType(Nothing, String)
                    End If
                    Me._state.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.Counties.Add(Me)
                    End If
                    Me.RaisePropertyChanged("State")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'StateName' value.
        ''' </summary>
        <DataMember(),  _
         Key(),  _
         Required(),  _
         RoundtripOriginal()>  _
        Public Property StateName() As String
            Get
                Return Me._stateName
            End Get
            Set
                If (String.Equals(Me._stateName, value) = false) Then
                    Me.OnStateNameChanging(value)
                    Me.RaiseDataMemberChanging("StateName")
                    Me.ValidateProperty("StateName", value)
                    Me._stateName = value
                    Me.RaiseDataMemberChanged("StateName")
                    Me.OnStateNameChanged
                End If
            End Set
        End Property
        
        Private Sub AttachCities(ByVal entity As City)
            entity.County = Me
        End Sub
        
        Private Sub DetachCities(ByVal entity As City)
            entity.County = Nothing
        End Sub
        
        Private Function FilterCities(ByVal entity As City) As Boolean
            Return (Object.Equals(entity.CountyName, Me.Name) AndAlso Object.Equals(entity.StateName, Me.StateName))
        End Function
        
        Private Function FilterState(ByVal entity As State) As Boolean
            Return Object.Equals(entity.Name, Me.StateName)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            If ((Me._name Is Nothing)  _
                        OrElse (Me._stateName Is Nothing)) Then
                Return Nothing
            End If
            Return EntityKey.Create(Me._name, Me._stateName)
        End Function
    End Class
    
    ''' <summary>
    ''' Enum ShippingZone
    ''' </summary>
    <DataContract([Namespace]:="CityNamespace", Name:="CityName")>  _
    Public Enum ShippingZone
        
        ''' <summary>
        ''' Pacific
        ''' </summary>
        <EnumMember(Value:="P")>  _
        Pacific = 0
        
        ''' <summary>
        ''' Central
        ''' </summary>
        <EnumMember(Value:="C")>  _
        Central = 1
        
        ''' <summary>
        ''' Eastern
        ''' </summary>
        <EnumMember(Value:="E")>  _
        Eastern = 2
    End Enum
    
    ''' <summary>
    ''' The 'State' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/Cities")>  _
    Partial Public NotInheritable Class State
        Inherits Entity
        
        Private _counties As EntityCollection(Of County)
        
        Private _fullName As String
        
        Private _name As String
        
        Private _shippingZone As ShippingZone
        
        Private _timeZone As TimeZone
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnFullNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnFullNameChanged()
        End Sub
        Private Partial Sub OnNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnNameChanged()
        End Sub
        Private Partial Sub OnShippingZoneChanging(ByVal value As ShippingZone)
        End Sub
        Private Partial Sub OnShippingZoneChanged()
        End Sub
        Private Partial Sub OnTimeZoneChanging(ByVal value As TimeZone)
        End Sub
        Private Partial Sub OnTimeZoneChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="State"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="County"/> entity instances.
        ''' </summary>
        <Association("State_County", "Name", "StateName"),  _
         CustomValidation(GetType(CountiesValidator), "AreCountiesValid"),  _
         Editable(false),  _
         [ReadOnly](true)>  _
        Public ReadOnly Property Counties() As EntityCollection(Of County)
            Get
                If (Me._counties Is Nothing) Then
                    Me._counties = New EntityCollection(Of County)(Me, "Counties", AddressOf Me.FilterCounties, AddressOf Me.AttachCounties, AddressOf Me.DetachCounties)
                End If
                Return Me._counties
            End Get
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'FullName' value.
        ''' </summary>
        <DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RegularExpression("^[A-Z]+[a-z A-Z]*$"),  _
         Required(),  _
         RoundtripOriginal()>  _
        Public Property FullName() As String
            Get
                Return Me._fullName
            End Get
            Set
                If (String.Equals(Me._fullName, value) = false) Then
                    Me.OnFullNameChanging(value)
                    Me.ValidateProperty("FullName", value)
                    Me._fullName = value
                    Me.RaisePropertyChanged("FullName")
                    Me.OnFullNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Name' value.
        ''' </summary>
        <CustomValidation(GetType(StateNameValidator), "IsStateNameValid"),  _
         DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RegularExpression("^[A-Z]*"),  _
         Required(),  _
         RoundtripOriginal(),  _
         StringLength(2)>  _
        Public Property Name() As String
            Get
                Return Me._name
            End Get
            Set
                If (String.Equals(Me._name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.ValidateProperty("Name", value)
                    Me._name = value
                    Me.RaisePropertyChanged("Name")
                    Me.OnNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ShippingZone' value.
        ''' </summary>
        <DataMember()>  _
        Public Property ShippingZone() As ShippingZone
            Get
                Return Me._shippingZone
            End Get
            Set
                If ((Me._shippingZone = value)  _
                            = false) Then
                    Me.OnShippingZoneChanging(value)
                    Me.RaiseDataMemberChanging("ShippingZone")
                    Me.ValidateProperty("ShippingZone", value)
                    Me._shippingZone = value
                    Me.RaiseDataMemberChanged("ShippingZone")
                    Me.OnShippingZoneChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'TimeZone' value.
        ''' </summary>
        <DataMember()>  _
        Public Property TimeZone() As TimeZone
            Get
                Return Me._timeZone
            End Get
            Set
                If ((Me._timeZone = value)  _
                            = false) Then
                    Me.OnTimeZoneChanging(value)
                    Me.RaiseDataMemberChanging("TimeZone")
                    Me.ValidateProperty("TimeZone", value)
                    Me._timeZone = value
                    Me.RaiseDataMemberChanged("TimeZone")
                    Me.OnTimeZoneChanged
                End If
            End Set
        End Property
        
        Private Sub AttachCounties(ByVal entity As County)
            entity.State = Me
        End Sub
        
        Private Sub DetachCounties(ByVal entity As County)
            entity.State = Nothing
        End Sub
        
        Private Function FilterCounties(ByVal entity As County) As Boolean
            Return Object.Equals(entity.StateName, Me.Name)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            If ((Me._fullName Is Nothing)  _
                        OrElse (Me._name Is Nothing)) Then
                Return Nothing
            End If
            Return EntityKey.Create(Me._fullName, Me._name)
        End Function
    End Class
    
    ''' <summary>
    ''' The 'Zip' entity class.
    ''' </summary>
    <CustomValidation(GetType(ZipValidator), "IsZipValid", ErrorMessage:="Zip codes cannot have matching city and state names"),  _
     DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/Cities"),  _
     Description("Zip code entity"),  _
     DomainIdentifier("ZipPattern"),  _
     KnownType(GetType(ZipWithInfo))>  _
    Partial Public Class Zip
        Inherits Entity
        
        Private _city As EntityRef(Of City)
        
        Private _cityName As String
        
        Private _code As Integer
        
        Private _countyName As String
        
        Private _fourDigit As Integer
        
        Private _stateName As String
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnCityNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnCityNameChanged()
        End Sub
        Private Partial Sub OnCodeChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnCodeChanged()
        End Sub
        Private Partial Sub OnCountyNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnCountyNameChanged()
        End Sub
        Private Partial Sub OnFourDigitChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnFourDigitChanged()
        End Sub
        Private Partial Sub OnStateNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnStateNameChanged()
        End Sub
        Private Partial Sub OnReassignZipCodeInvoking(<Range(-9999, 9999)> ByVal offset As Integer, ByVal useFull As Boolean)
        End Sub
        Private Partial Sub OnReassignZipCodeInvoked()
        End Sub
        Private Partial Sub OnThrowExceptionInvoking(ByVal scenario As String)
        End Sub
        Private Partial Sub OnThrowExceptionInvoked()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="Zip"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="City"/> entity.
        ''' </summary>
        <Association("City_Zip", "CityName,  CountyName, StateName", "Name, CountyName, StateName", IsForeignKey:=true),  _
         CustomValidation(GetType(CityPropertyValidator), "IsValidCity")>  _
        Public Property City() As City
            Get
                If (Me._city Is Nothing) Then
                    Me._city = New EntityRef(Of City)(Me, "City", AddressOf Me.FilterCity)
                End If
                Return Me._city.Entity
            End Get
            Set
                Dim previous As City = Me.City
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("City", value)
                    If (Not (previous) Is Nothing) Then
                        Me._city.Entity = Nothing
                        previous.ZipCodes.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.CityName = value.Name
                        Me.CountyName = value.CountyName
                        Me.StateName = value.StateName
                    Else
                        Me.CityName = CType(Nothing, String)
                        Me.CountyName = CType(Nothing, String)
                        Me.StateName = CType(Nothing, String)
                    End If
                    Me._city.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.ZipCodes.Add(Me)
                    End If
                    Me.RaisePropertyChanged("City")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'CityName' value.
        ''' </summary>
        <DataMember(),  _
         Required(),  _
         RoundtripOriginal()>  _
        Public Property CityName() As String
            Get
                Return Me._cityName
            End Get
            Set
                If (String.Equals(Me._cityName, value) = false) Then
                    Me.OnCityNameChanging(value)
                    Me.RaiseDataMemberChanging("CityName")
                    Me.ValidateProperty("CityName", value)
                    Me._cityName = value
                    Me.RaiseDataMemberChanged("CityName")
                    Me.OnCityNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Code' value.
        ''' </summary>
        <DataMember(),  _
         Description("Zip codes must be 5 digits starting with 9"),  _
         DisplayFormat(DataFormatString:="nnnnn"),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         MustStartWith(9),  _
         Range(0, 99999),  _
         RoundtripOriginal()>  _
        Public Property Code() As Integer
            Get
                Return Me._code
            End Get
            Set
                If ((Me._code = value)  _
                            = false) Then
                    Me.OnCodeChanging(value)
                    Me.ValidateProperty("Code", value)
                    Me._code = value
                    Me.RaisePropertyChanged("Code")
                    Me.OnCodeChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'CountyName' value.
        ''' </summary>
        <DataMember(),  _
         RoundtripOriginal()>  _
        Public Property CountyName() As String
            Get
                Return Me._countyName
            End Get
            Set
                If (String.Equals(Me._countyName, value) = false) Then
                    Me.OnCountyNameChanging(value)
                    Me.RaiseDataMemberChanging("CountyName")
                    Me.ValidateProperty("CountyName", value)
                    Me._countyName = value
                    Me.RaiseDataMemberChanged("CountyName")
                    Me.OnCountyNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'FourDigit' value.
        ''' </summary>
        <DataMember(),  _
         DisplayFormat(NullDisplayText:="(optional)"),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         Range(0, 9999),  _
         RoundtripOriginal(),  _
         UIHint("DataGrid", "Jolt", "stringParam", "hello", "doubleParam", CType(2R,Double))>  _
        Public Property FourDigit() As Integer
            Get
                Return Me._fourDigit
            End Get
            Set
                If ((Me._fourDigit = value)  _
                            = false) Then
                    Me.OnFourDigitChanging(value)
                    Me.ValidateProperty("FourDigit", value)
                    Me._fourDigit = value
                    Me.RaisePropertyChanged("FourDigit")
                    Me.OnFourDigitChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'StateName' value.
        ''' </summary>
        <DataMember(),  _
         Required(),  _
         RoundtripOriginal()>  _
        Public Property StateName() As String
            Get
                Return Me._stateName
            End Get
            Set
                If (String.Equals(Me._stateName, value) = false) Then
                    Me.OnStateNameChanging(value)
                    Me.RaiseDataMemberChanging("StateName")
                    Me.ValidateProperty("StateName", value)
                    Me._stateName = value
                    Me.RaiseDataMemberChanged("StateName")
                    Me.OnStateNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'ReassignZipCode' action has been invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property IsReassignZipCodeInvoked() As Boolean
            Get
                Return MyBase.IsActionInvoked("ReassignZipCode")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'ReassignZipCode' method can be invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property CanReassignZipCode() As Boolean
            Get
                Return MyBase.CanInvokeAction("ReassignZipCode")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'ThrowException' action has been invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property IsThrowExceptionInvoked() As Boolean
            Get
                Return MyBase.IsActionInvoked("ThrowException")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'ThrowException' method can be invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property CanThrowException() As Boolean
            Get
                Return MyBase.CanInvokeAction("ThrowException")
            End Get
        End Property
        
        Private Function FilterCity(ByVal entity As City) As Boolean
            Return ((Object.Equals(entity.Name, Me.CityName) AndAlso Object.Equals(entity.CountyName, Me.CountyName))  _
                        AndAlso Object.Equals(entity.StateName, Me.StateName))
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return EntityKey.Create(Me._code, Me._fourDigit)
        End Function
        
        ''' <summary>
        ''' Invokes the 'ReassignZipCode' action on this entity.
        ''' </summary>
        ''' <param name="offset">The value to pass to the server method's 'offset' parameter.</param>
        ''' <param name="useFull">The value to pass to the server method's 'useFull' parameter.</param>
        <CustomValidation(GetType(ZipValidator), "IsZipValid", ErrorMessage:="Zip codes cannot have matching city and state names"),  _
         EntityAction("ReassignZipCode", AllowMultipleInvocations:=false)>  _
        Public Sub ReassignZipCode(<Range(-9999, 9999)> ByVal offset As Integer, ByVal useFull As Boolean)
            Me.OnReassignZipCodeInvoking(offset, useFull)
            MyBase.InvokeAction("ReassignZipCode", offset, useFull)
            Me.OnReassignZipCodeInvoked
        End Sub
        
        ''' <summary>
        ''' Invokes the 'ThrowException' action on this entity.
        ''' </summary>
        ''' <param name="scenario">The value to pass to the server method's 'scenario' parameter.</param>
        <CustomValidation(GetType(ThrowExValidator), "IsThrowExValid"),  _
         EntityAction("ThrowException", AllowMultipleInvocations:=false)>  _
        Public Sub ThrowException(ByVal scenario As String)
            Me.OnThrowExceptionInvoking(scenario)
            MyBase.InvokeAction("ThrowException", scenario)
            Me.OnThrowExceptionInvoked
        End Sub
    End Class
    
    ''' <summary>
    ''' The 'ZipWithInfo' entity class.
    ''' </summary>
    <CustomValidation(GetType(ZipValidator), "IsZipValid", ErrorMessage:="Zip codes cannot have matching city and state names"),  _
     DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/Cities"),  _
     Description("Zip code entity"),  _
     DomainIdentifier("ZipPattern")>  _
    Partial Public NotInheritable Class ZipWithInfo
        Inherits Zip
        
        Private _info As String
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnInfoChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnInfoChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ZipWithInfo"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'Info' value.
        ''' </summary>
        <DataMember()>  _
        Public Property Info() As String
            Get
                Return Me._info
            End Get
            Set
                If (String.Equals(Me._info, value) = false) Then
                    Me.OnInfoChanging(value)
                    Me.RaiseDataMemberChanging("Info")
                    Me.ValidateProperty("Info", value)
                    Me._info = value
                    Me.RaiseDataMemberChanged("Info")
                    Me.OnInfoChanged
                End If
            End Set
        End Property
    End Class
End Namespace
