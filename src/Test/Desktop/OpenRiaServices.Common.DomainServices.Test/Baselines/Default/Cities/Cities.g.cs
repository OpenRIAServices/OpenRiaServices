//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cities
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.Threading;
    using System.Threading.Tasks;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The 'City' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Cities")]
    [KnownType(typeof(CityWithEditHistory))]
    [KnownType(typeof(CityWithInfo))]
    public partial class City : Entity
    {
        
        private string _calculatedCounty;
        
        private EntityRef<County> _county;
        
        private string _countyName;
        
        private string _name;
        
        private string _stateName;
        
        private EntityCollection<Zip> _zipCodes;
        
        private int _zoneID;
        
        private string _zoneName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCalculatedCountyChanging(string value);
        partial void OnCalculatedCountyChanged();
        partial void OnCountyNameChanging(string value);
        partial void OnCountyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnStateNameChanging(string value);
        partial void OnStateNameChanged();
        partial void OnZoneIDChanging(int value);
        partial void OnZoneIDChanged();
        partial void OnZoneNameChanging(string value);
        partial void OnZoneNameChanged();
        partial void OnAssignCityZoneInvoking(string zoneName);
        partial void OnAssignCityZoneInvoked();
        partial void OnAssignCityZoneIfAuthorizedInvoking(string zoneName);
        partial void OnAssignCityZoneIfAuthorizedInvoked();
        partial void OnAutoAssignCityZoneInvoking();
        partial void OnAutoAssignCityZoneInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="City"/> class.
        /// </summary>
        public City()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CalculatedCounty' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string CalculatedCounty
        {
            get
            {
                return this._calculatedCounty;
            }
            set
            {
                if ((this._calculatedCounty != value))
                {
                    this.OnCalculatedCountyChanging(value);
                    this.ValidateProperty("CalculatedCounty", value);
                    this._calculatedCounty = value;
                    this.RaisePropertyChanged("CalculatedCounty");
                    this.OnCalculatedCountyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="County"/> entity.
        /// </summary>
        [Association("County_City", "CountyName,StateName", "Name,StateName", IsForeignKey=true)]
        public County County
        {
            get
            {
                if ((this._county == null))
                {
                    this._county = new EntityRef<County>(this, "County", this.FilterCounty);
                }
                return this._county.Entity;
            }
            set
            {
                County previous = this.County;
                if ((previous != value))
                {
                    this.ValidateProperty("County", value);
                    if ((previous != null))
                    {
                        this._county.Entity = null;
                        previous.Cities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CountyName = value.Name;
                        this.StateName = value.StateName;
                    }
                    else
                    {
                        this.CountyName = default(string);
                        this.StateName = default(string);
                    }
                    this._county.Entity = value;
                    if ((value != null))
                    {
                        value.Cities.Add(this);
                    }
                    this.RaisePropertyChanged("County");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CountyName' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public string CountyName
        {
            get
            {
                return this._countyName;
            }
            set
            {
                if ((this._countyName != value))
                {
                    this.OnCountyNameChanging(value);
                    this.RaiseDataMemberChanging("CountyName");
                    this.ValidateProperty("CountyName", value);
                    this._countyName = value;
                    this.RaiseDataMemberChanged("CountyName");
                    this.OnCountyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Display(Description="CityHelpText", Name="CityName", Prompt="CityPrompt", ResourceType=typeof(Cities_Resources), ShortName="CityCaption")]
        [Key()]
        [RegularExpression("^[A-Z]+[a-z A-Z]*$")]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StateName' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RegularExpression("^[A-Z]+[a-z A-Z]*$")]
        [RoundtripOriginal()]
        [StringLength(2)]
        public string StateName
        {
            get
            {
                return this._stateName;
            }
            set
            {
                if ((this._stateName != value))
                {
                    this.OnStateNameChanging(value);
                    this.RaiseDataMemberChanging("StateName");
                    this.ValidateProperty("StateName", value);
                    this._stateName = value;
                    this.RaiseDataMemberChanged("StateName");
                    this.OnStateNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Zip"/> entity instances.
        /// </summary>
        [Association("City_Zip", "Name, CountyName, StateName", "CityName,  CountyName, StateName")]
        public EntityCollection<Zip> ZipCodes
        {
            get
            {
                if ((this._zipCodes == null))
                {
                    this._zipCodes = new EntityCollection<Zip>(this, "ZipCodes", this.FilterZipCodes, this.AttachZipCodes, this.DetachZipCodes);
                }
                return this._zipCodes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZoneID' value.
        /// </summary>
        [DataMember()]
        [Range(0, 9999)]
        [RoundtripOriginal()]
        public int ZoneID
        {
            get
            {
                return this._zoneID;
            }
            set
            {
                if ((this._zoneID != value))
                {
                    this.OnZoneIDChanging(value);
                    this.RaiseDataMemberChanging("ZoneID");
                    this.ValidateProperty("ZoneID", value);
                    this._zoneID = value;
                    this.RaiseDataMemberChanged("ZoneID");
                    this.OnZoneIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZoneName' value.
        /// </summary>
        [CustomValidation(typeof(CityPropertyValidator), "IsValidZoneName")]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [RoundtripOriginal()]
        public string ZoneName
        {
            get
            {
                return this._zoneName;
            }
            set
            {
                if ((this._zoneName != value))
                {
                    this.OnZoneNameChanging(value);
                    this.RaiseDataMemberChanging("ZoneName");
                    this.ValidateProperty("ZoneName", value);
                    this._zoneName = value;
                    this.RaiseDataMemberChanged("ZoneName");
                    this.OnZoneNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'AssignCityZone' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsAssignCityZoneInvoked
        {
            get
            {
                return base.IsActionInvoked("AssignCityZone");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'AssignCityZone' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanAssignCityZone
        {
            get
            {
                return base.CanInvokeAction("AssignCityZone");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'AssignCityZoneIfAuthorized' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsAssignCityZoneIfAuthorizedInvoked
        {
            get
            {
                return base.IsActionInvoked("AssignCityZoneIfAuthorized");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'AssignCityZoneIfAuthorized' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanAssignCityZoneIfAuthorized
        {
            get
            {
                return base.CanInvokeAction("AssignCityZoneIfAuthorized");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'AutoAssignCityZone' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsAutoAssignCityZoneInvoked
        {
            get
            {
                return base.IsActionInvoked("AutoAssignCityZone");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'AutoAssignCityZone' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanAutoAssignCityZone
        {
            get
            {
                return base.CanInvokeAction("AutoAssignCityZone");
            }
        }
        
        private bool FilterCounty(County entity)
        {
            return ((entity.Name == this.CountyName) 
                        && (entity.StateName == this.StateName));
        }
        
        private void AttachZipCodes(Zip entity)
        {
            entity.City = this;
        }
        
        private void DetachZipCodes(Zip entity)
        {
            entity.City = null;
        }
        
        private bool FilterZipCodes(Zip entity)
        {
            return (((entity.CityName == this.Name) 
                        && (entity.CountyName == this.CountyName)) 
                        && (entity.StateName == this.StateName));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((((this._countyName == null) 
                        || (this._name == null)) 
                        || (this._stateName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._countyName, this._name, this._stateName);
        }
        
        /// <summary>
        /// Invokes the 'AssignCityZone' action on this entity.
        /// </summary>
        /// <param name="zoneName">The value to pass to the server method's 'zoneName' parameter.</param>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'Cities.CityMethodValidator' that is not accessible in the client project 'MockProject'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'ValidateMethod' on type 'Cities.CityMethodValidator' that is not accessible in the client project 'MockProject'.
        // [CustomValidationAttribute(typeof(Cities.CityMethodValidator), "ValidateMethod")]
        // 
        [EntityAction("AssignCityZone", AllowMultipleInvocations=false)]
        public void AssignCityZone(string zoneName)
        {
            this.OnAssignCityZoneInvoking(zoneName);
            base.InvokeAction("AssignCityZone", zoneName);
            this.OnAssignCityZoneInvoked();
        }
        
        /// <summary>
        /// Invokes the 'AssignCityZoneIfAuthorized' action on this entity.
        /// </summary>
        /// <param name="zoneName">The value to pass to the server method's 'zoneName' parameter.</param>
        [EntityAction("AssignCityZoneIfAuthorized", AllowMultipleInvocations=false)]
        public void AssignCityZoneIfAuthorized(string zoneName)
        {
            this.OnAssignCityZoneIfAuthorizedInvoking(zoneName);
            base.InvokeAction("AssignCityZoneIfAuthorized", zoneName);
            this.OnAssignCityZoneIfAuthorizedInvoked();
        }
        
        /// <summary>
        /// Invokes the 'AutoAssignCityZone' action on this entity.
        /// </summary>
        [EntityAction("AutoAssignCityZone", AllowMultipleInvocations=false)]
        public void AutoAssignCityZone()
        {
            this.OnAutoAssignCityZoneInvoking();
            base.InvokeAction("AutoAssignCityZone");
            this.OnAutoAssignCityZoneInvoked();
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'CityDomainService' DomainService.
    /// </summary>
    [DomainIdentifier("CityProvider")]
    public sealed partial class CityDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CityDomainContext"/> class.
        /// </summary>
        public CityDomainContext() : 
                this(new Uri("Cities-CityDomainService.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CityDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CityDomainService service URI.</param>
        public CityDomainContext(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(ICityDomainServiceContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CityDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CityDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="City"/> entity instances that have been loaded into this <see cref="CityDomainContext"/> instance.
        /// </summary>
        public EntitySet<City> Cities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<City>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="County"/> entity instances that have been loaded into this <see cref="CityDomainContext"/> instance.
        /// </summary>
        public EntitySet<County> Counties
        {
            get
            {
                return base.EntityContainer.GetEntitySet<County>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="State"/> entity instances that have been loaded into this <see cref="CityDomainContext"/> instance.
        /// </summary>
        public EntitySet<State> States
        {
            get
            {
                return base.EntityContainer.GetEntitySet<State>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Zip"/> entity instances that have been loaded into this <see cref="CityDomainContext"/> instance.
        /// </summary>
        public EntitySet<Zip> Zips
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Zip>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="City"/> entity instances using the 'GetCities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="City"/> entity instances.</returns>
        public EntityQuery<City> GetCitiesQuery()
        {
            this.ValidateMethod("GetCitiesQuery", null);
            return base.CreateQuery<City>("GetCities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="City"/> entity instances using the 'GetCitiesInState' query.
        /// </summary>
        /// <param name="state">The value for the 'state' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="City"/> entity instances.</returns>
        public EntityQuery<City> GetCitiesInStateQuery(string state)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("state", state);
            this.ValidateMethod("GetCitiesInStateQuery", parameters);
            return base.CreateQuery<City>("GetCitiesInState", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithEditHistory"/> entity instances using the 'GetCitiesWithEditHistory' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithEditHistory"/> entity instances.</returns>
        public EntityQuery<CityWithEditHistory> GetCitiesWithEditHistoryQuery()
        {
            this.ValidateMethod("GetCitiesWithEditHistoryQuery", null);
            return base.CreateQuery<CityWithEditHistory>("GetCitiesWithEditHistory", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithInfo"/> entity instances using the 'GetCitiesWithInfo' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithInfo"/> entity instances.</returns>
        public EntityQuery<CityWithInfo> GetCitiesWithInfoQuery()
        {
            this.ValidateMethod("GetCitiesWithInfoQuery", null);
            return base.CreateQuery<CityWithInfo>("GetCitiesWithInfo", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="County"/> entity instances using the 'GetCounties' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="County"/> entity instances.</returns>
        public EntityQuery<County> GetCountiesQuery()
        {
            this.ValidateMethod("GetCountiesQuery", null);
            return base.CreateQuery<County>("GetCounties", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithEditHistory"/> entity instances using the 'GetDeletedCities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithEditHistory"/> entity instances.</returns>
        public EntityQuery<CityWithEditHistory> GetDeletedCitiesQuery()
        {
            this.ValidateMethod("GetDeletedCitiesQuery", null);
            return base.CreateQuery<CityWithEditHistory>("GetDeletedCities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="State"/> entity instances using the 'GetStates' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="State"/> entity instances.</returns>
        public EntityQuery<State> GetStatesQuery()
        {
            this.ValidateMethod("GetStatesQuery", null);
            return base.CreateQuery<State>("GetStates", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="State"/> entity instances using the 'GetStatesInShippingZone' query.
        /// </summary>
        /// <param name="shippingZone">The value for the 'shippingZone' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="State"/> entity instances.</returns>
        public EntityQuery<State> GetStatesInShippingZoneQuery(ShippingZone shippingZone)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("shippingZone", shippingZone);
            this.ValidateMethod("GetStatesInShippingZoneQuery", parameters);
            return base.CreateQuery<State>("GetStatesInShippingZone", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Zip"/> entity instances using the 'GetZips' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Zip"/> entity instances.</returns>
        public EntityQuery<Zip> GetZipsQuery()
        {
            this.ValidateMethod("GetZipsQuery", null);
            return base.CreateQuery<Zip>("GetZips", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Zip"/> entity instances using the 'GetZipsIfAuthenticated' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Zip"/> entity instances.</returns>
        public EntityQuery<Zip> GetZipsIfAuthenticatedQuery()
        {
            this.ValidateMethod("GetZipsIfAuthenticatedQuery", null);
            return base.CreateQuery<Zip>("GetZipsIfAuthenticated", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Zip"/> entity instances using the 'GetZipsIfInRole' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Zip"/> entity instances.</returns>
        public EntityQuery<Zip> GetZipsIfInRoleQuery()
        {
            this.ValidateMethod("GetZipsIfInRoleQuery", null);
            return base.CreateQuery<Zip>("GetZipsIfInRole", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Zip"/> entity instances using the 'GetZipsIfUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Zip"/> entity instances.</returns>
        public EntityQuery<Zip> GetZipsIfUserQuery()
        {
            this.ValidateMethod("GetZipsIfUserQuery", null);
            return base.CreateQuery<Zip>("GetZipsIfUser", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Zip"/> entity instances using the 'GetZipsWithDelay' query.
        /// </summary>
        /// <param name="delay">The value for the 'delay' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Zip"/> entity instances.</returns>
        public EntityQuery<Zip> GetZipsWithDelayQuery(TimeSpan delay)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("delay", delay);
            this.ValidateMethod("GetZipsWithDelayQuery", parameters);
            return base.CreateQuery<Zip>("GetZipsWithDelay", parameters, false, true);
        }
        
        /// <summary>
        /// Invokes the 'AssignCityZone' method of the specified <see cref="City"/> entity.
        /// </summary>
        /// <param name="city">The <see cref="City"/> entity instance.</param>
        /// <param name="zoneName">The value for the 'zoneName' parameter for this action.</param>
        public void AssignCityZone(City city, string zoneName)
        {
            city.AssignCityZone(zoneName);
        }
        
        /// <summary>
        /// Invokes the 'AutoAssignCityZone' method of the specified <see cref="City"/> entity.
        /// </summary>
        /// <param name="city">The <see cref="City"/> entity instance.</param>
        public void AutoAssignCityZone(City city)
        {
            city.AutoAssignCityZone();
        }
        
        /// <summary>
        /// Invokes the 'AssignCityZoneIfAuthorized' method of the specified <see cref="City"/> entity.
        /// </summary>
        /// <param name="city">The <see cref="City"/> entity instance.</param>
        /// <param name="zoneName">The value for the 'zoneName' parameter for this action.</param>
        public void AssignCityZoneIfAuthorized(City city, string zoneName)
        {
            city.AssignCityZoneIfAuthorized(zoneName);
        }
        
        /// <summary>
        /// Invokes the 'TouchHistory' method of the specified <see cref="CityWithEditHistory"/> entity.
        /// </summary>
        /// <param name="city">The <see cref="CityWithEditHistory"/> entity instance.</param>
        /// <param name="touchString">The value for the 'touchString' parameter for this action.</param>
        public void TouchHistory(CityWithEditHistory city, string touchString)
        {
            city.TouchHistory(touchString);
        }
        
        /// <summary>
        /// Invokes the 'SetCityInfo' method of the specified <see cref="CityWithInfo"/> entity.
        /// </summary>
        /// <param name="cityWithInfo">The <see cref="CityWithInfo"/> entity instance.</param>
        /// <param name="info">The value for the 'info' parameter for this action.</param>
        public void SetCityInfo(CityWithInfo cityWithInfo, string info)
        {
            cityWithInfo.SetCityInfo(info);
        }
        
        /// <summary>
        /// Invokes the 'ReassignZipCode' method of the specified <see cref="Zip"/> entity.
        /// </summary>
        /// <param name="zip">The <see cref="Zip"/> entity instance.</param>
        /// <param name="offset">The value for the 'offset' parameter for this action.</param>
        /// <param name="useFull">The value for the 'useFull' parameter for this action.</param>
        public void ReassignZipCode(Zip zip, int offset, bool useFull)
        {
            zip.ReassignZipCode(offset, useFull);
        }
        
        /// <summary>
        /// Invokes the 'ThrowException' method of the specified <see cref="Zip"/> entity.
        /// </summary>
        /// <param name="zip">The <see cref="Zip"/> entity instance.</param>
        /// <param name="scenario">The value for the 'scenario' parameter for this action.</param>
        public void ThrowException(Zip zip, string scenario)
        {
            zip.ThrowException(scenario);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'Echo' method of the DomainService.
        /// </summary>
        /// <param name="msg">The value for the 'msg' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> Echo(string msg, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("msg", msg);
            this.ValidateMethod("Echo", parameters);
            return this.InvokeOperation<string>("Echo", typeof(string), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'Echo' method of the DomainService.
        /// </summary>
        /// <param name="msg">The value for the 'msg' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> Echo(string msg)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("msg", msg);
            this.ValidateMethod("Echo", parameters);
            return this.InvokeOperation<string>("Echo", typeof(string), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'Echo' method of the DomainService.
        /// </summary>
        /// <param name="msg">The value for the 'msg' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<string>> EchoAsync(string msg, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("msg", msg);
            this.ValidateMethod("Echo", parameters);
            return this.InvokeOperationAsync<string>("Echo", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EchoWithDelay' method of the DomainService.
        /// </summary>
        /// <param name="msg">The value for the 'msg' parameter of this action.</param>
        /// <param name="delay">The value for the 'delay' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> EchoWithDelay(string msg, TimeSpan delay, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("msg", msg);
            parameters.Add("delay", delay);
            this.ValidateMethod("EchoWithDelay", parameters);
            return this.InvokeOperation<string>("EchoWithDelay", typeof(string), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EchoWithDelay' method of the DomainService.
        /// </summary>
        /// <param name="msg">The value for the 'msg' parameter of this action.</param>
        /// <param name="delay">The value for the 'delay' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> EchoWithDelay(string msg, TimeSpan delay)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("msg", msg);
            parameters.Add("delay", delay);
            this.ValidateMethod("EchoWithDelay", parameters);
            return this.InvokeOperation<string>("EchoWithDelay", typeof(string), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EchoWithDelay' method of the DomainService.
        /// </summary>
        /// <param name="msg">The value for the 'msg' parameter of this action.</param>
        /// <param name="delay">The value for the 'delay' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<string>> EchoWithDelayAsync(string msg, TimeSpan delay, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("msg", msg);
            parameters.Add("delay", delay);
            this.ValidateMethod("EchoWithDelay", parameters);
            return this.InvokeOperationAsync<string>("EchoWithDelay", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetStateIfUser' method of the DomainService.
        /// </summary>
        /// <param name="city">The value for the 'city' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetStateIfUser(City city, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("city", city);
            this.ValidateMethod("GetStateIfUser", parameters);
            return this.InvokeOperation<string>("GetStateIfUser", typeof(string), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetStateIfUser' method of the DomainService.
        /// </summary>
        /// <param name="city">The value for the 'city' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetStateIfUser(City city)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("city", city);
            this.ValidateMethod("GetStateIfUser", parameters);
            return this.InvokeOperation<string>("GetStateIfUser", typeof(string), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetStateIfUser' method of the DomainService.
        /// </summary>
        /// <param name="city">The value for the 'city' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<string>> GetStateIfUserAsync(City city, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("city", city);
            this.ValidateMethod("GetStateIfUser", parameters);
            return this.InvokeOperationAsync<string>("GetStateIfUser", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ResetData' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ResetData(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("ResetData", null);
            return this.InvokeOperation("ResetData", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ResetData' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ResetData()
        {
            this.ValidateMethod("ResetData", null);
            return this.InvokeOperation("ResetData", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ResetData' method of the DomainService.
        /// </summary>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult> ResetDataAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ValidateMethod("ResetData", null);
            return this.InvokeOperationAsync("ResetData", null, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UsesCustomHost' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UsesCustomHost(Action<InvokeOperation<bool>> callback, object userState)
        {
            this.ValidateMethod("UsesCustomHost", null);
            return this.InvokeOperation<bool>("UsesCustomHost", typeof(bool), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UsesCustomHost' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UsesCustomHost()
        {
            this.ValidateMethod("UsesCustomHost", null);
            return this.InvokeOperation<bool>("UsesCustomHost", typeof(bool), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UsesCustomHost' method of the DomainService.
        /// </summary>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<bool>> UsesCustomHostAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ValidateMethod("UsesCustomHost", null);
            return this.InvokeOperationAsync<bool>("UsesCustomHost", null, true, cancellationToken);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CityDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CityDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICityDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'Echo' operation.
            /// </summary>
            /// <param name="msg">The value for the 'msg' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/Echo", ReplyAction="http://tempuri.org/CityDomainService/EchoResponse")]
            IAsyncResult BeginEcho(string msg, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginEcho'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginEcho'.</param>
            /// <returns>The 'String' returned from the 'Echo' operation.</returns>
            string EndEcho(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'EchoWithDelay' operation.
            /// </summary>
            /// <param name="msg">The value for the 'msg' parameter of this action.</param>
            /// <param name="delay">The value for the 'delay' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/EchoWithDelay", ReplyAction="http://tempuri.org/CityDomainService/EchoWithDelayResponse")]
            IAsyncResult BeginEchoWithDelay(string msg, TimeSpan delay, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginEchoWithDelay'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginEchoWithDelay'.</param>
            /// <returns>The 'String' returned from the 'EchoWithDelay' operation.</returns>
            string EndEchoWithDelay(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetCities", ReplyAction="http://tempuri.org/CityDomainService/GetCitiesResponse")]
            IAsyncResult BeginGetCities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCities' operation.</returns>
            QueryResult<City> EndGetCities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesInState' operation.
            /// </summary>
            /// <param name="state">The value for the 'state' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetCitiesInState", ReplyAction="http://tempuri.org/CityDomainService/GetCitiesInStateResponse")]
            IAsyncResult BeginGetCitiesInState(string state, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesInState'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesInState'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesInState' operation.</returns>
            QueryResult<City> EndGetCitiesInState(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesWithEditHistory' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetCitiesWithEditHistory", ReplyAction="http://tempuri.org/CityDomainService/GetCitiesWithEditHistoryResponse")]
            IAsyncResult BeginGetCitiesWithEditHistory(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesWithEditHistory'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithEditHistory'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesWithEditHistory' operation.</returns>
            QueryResult<CityWithEditHistory> EndGetCitiesWithEditHistory(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesWithInfo' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetCitiesWithInfo", ReplyAction="http://tempuri.org/CityDomainService/GetCitiesWithInfoResponse")]
            IAsyncResult BeginGetCitiesWithInfo(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesWithInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesWithInfo' operation.</returns>
            QueryResult<CityWithInfo> EndGetCitiesWithInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCounties' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetCounties", ReplyAction="http://tempuri.org/CityDomainService/GetCountiesResponse")]
            IAsyncResult BeginGetCounties(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCounties'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCounties'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCounties' operation.</returns>
            QueryResult<County> EndGetCounties(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeletedCities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetDeletedCities", ReplyAction="http://tempuri.org/CityDomainService/GetDeletedCitiesResponse")]
            IAsyncResult BeginGetDeletedCities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeletedCities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeletedCities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeletedCities' operation.</returns>
            QueryResult<CityWithEditHistory> EndGetDeletedCities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStateIfUser' operation.
            /// </summary>
            /// <param name="city">The value for the 'city' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetStateIfUser", ReplyAction="http://tempuri.org/CityDomainService/GetStateIfUserResponse")]
            IAsyncResult BeginGetStateIfUser(City city, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStateIfUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStateIfUser'.</param>
            /// <returns>The 'String' returned from the 'GetStateIfUser' operation.</returns>
            string EndGetStateIfUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetStates", ReplyAction="http://tempuri.org/CityDomainService/GetStatesResponse")]
            IAsyncResult BeginGetStates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStates'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStates' operation.</returns>
            QueryResult<State> EndGetStates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStatesInShippingZone' operation.
            /// </summary>
            /// <param name="shippingZone">The value for the 'shippingZone' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetStatesInShippingZone", ReplyAction="http://tempuri.org/CityDomainService/GetStatesInShippingZoneResponse")]
            IAsyncResult BeginGetStatesInShippingZone(ShippingZone shippingZone, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStatesInShippingZone'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStatesInShippingZone'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStatesInShippingZone' operation.</returns>
            QueryResult<State> EndGetStatesInShippingZone(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetZips' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetZips", ReplyAction="http://tempuri.org/CityDomainService/GetZipsResponse")]
            IAsyncResult BeginGetZips(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetZips'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetZips'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetZips' operation.</returns>
            QueryResult<Zip> EndGetZips(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetZipsIfAuthenticated' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetZipsIfAuthenticated", ReplyAction="http://tempuri.org/CityDomainService/GetZipsIfAuthenticatedResponse")]
            IAsyncResult BeginGetZipsIfAuthenticated(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetZipsIfAuthenticated'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetZipsIfAuthenticated'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetZipsIfAuthenticated' operation.</returns>
            QueryResult<Zip> EndGetZipsIfAuthenticated(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetZipsIfInRole' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetZipsIfInRole", ReplyAction="http://tempuri.org/CityDomainService/GetZipsIfInRoleResponse")]
            IAsyncResult BeginGetZipsIfInRole(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetZipsIfInRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetZipsIfInRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetZipsIfInRole' operation.</returns>
            QueryResult<Zip> EndGetZipsIfInRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetZipsIfUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetZipsIfUser", ReplyAction="http://tempuri.org/CityDomainService/GetZipsIfUserResponse")]
            IAsyncResult BeginGetZipsIfUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetZipsIfUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetZipsIfUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetZipsIfUser' operation.</returns>
            QueryResult<Zip> EndGetZipsIfUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetZipsWithDelay' operation.
            /// </summary>
            /// <param name="delay">The value for the 'delay' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/GetZipsWithDelay", ReplyAction="http://tempuri.org/CityDomainService/GetZipsWithDelayResponse")]
            IAsyncResult BeginGetZipsWithDelay(TimeSpan delay, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetZipsWithDelay'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetZipsWithDelay'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetZipsWithDelay' operation.</returns>
            QueryResult<Zip> EndGetZipsWithDelay(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ResetData' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/ResetData", ReplyAction="http://tempuri.org/CityDomainService/ResetDataResponse")]
            IAsyncResult BeginResetData(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginResetData'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginResetData'.</param>
            void EndResetData(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UsesCustomHost' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/UsesCustomHost", ReplyAction="http://tempuri.org/CityDomainService/UsesCustomHostResponse")]
            IAsyncResult BeginUsesCustomHost(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUsesCustomHost'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUsesCustomHost'.</param>
            /// <returns>The 'Boolean' returned from the 'UsesCustomHost' operation.</returns>
            bool EndUsesCustomHost(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CityDomainService/SubmitChanges", ReplyAction="http://tempuri.org/CityDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CityDomainContextEntityContainer : EntityContainer
        {
            
            public CityDomainContextEntityContainer()
            {
                this.CreateEntitySet<City>(EntitySetOperations.All);
                this.CreateEntitySet<County>(EntitySetOperations.None);
                this.CreateEntitySet<State>(EntitySetOperations.Edit);
                this.CreateEntitySet<Zip>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'CityWithEditHistory' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Cities")]
    public abstract partial class CityWithEditHistory : City
    {
        
        private string _editHistory;
        
        private DateTime _lastUpdated;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEditHistoryChanging(string value);
        partial void OnEditHistoryChanged();
        partial void OnLastUpdatedChanging(DateTime value);
        partial void OnLastUpdatedChanged();
        partial void OnTouchHistoryInvoking(string touchString);
        partial void OnTouchHistoryInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CityWithEditHistory"/> class.
        /// </summary>
        protected CityWithEditHistory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EditHistory' value.
        /// </summary>
        [DataMember()]
        public string EditHistory
        {
            get
            {
                return this._editHistory;
            }
            set
            {
                if ((this._editHistory != value))
                {
                    this.OnEditHistoryChanging(value);
                    this.RaiseDataMemberChanging("EditHistory");
                    this.ValidateProperty("EditHistory", value);
                    this._editHistory = value;
                    this.RaiseDataMemberChanged("EditHistory");
                    this.OnEditHistoryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastUpdated' value.
        /// </summary>
        [DataMember()]
        public DateTime LastUpdated
        {
            get
            {
                return this._lastUpdated;
            }
            set
            {
                if ((this._lastUpdated != value))
                {
                    this.OnLastUpdatedChanging(value);
                    this.RaiseDataMemberChanging("LastUpdated");
                    this.ValidateProperty("LastUpdated", value);
                    this._lastUpdated = value;
                    this.RaiseDataMemberChanged("LastUpdated");
                    this.OnLastUpdatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TouchHistory' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsTouchHistoryInvoked
        {
            get
            {
                return base.IsActionInvoked("TouchHistory");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TouchHistory' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanTouchHistory
        {
            get
            {
                return base.CanInvokeAction("TouchHistory");
            }
        }
        
        /// <summary>
        /// Invokes the 'TouchHistory' action on this entity.
        /// </summary>
        /// <param name="touchString">The value to pass to the server method's 'touchString' parameter.</param>
        [EntityAction("TouchHistory", AllowMultipleInvocations=false)]
        public void TouchHistory(string touchString)
        {
            this.OnTouchHistoryInvoking(touchString);
            base.InvokeAction("TouchHistory", touchString);
            this.OnTouchHistoryInvoked();
        }
    }
    
    /// <summary>
    /// The 'CityWithInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Cities")]
    public sealed partial class CityWithInfo : CityWithEditHistory
    {
        
        private string _info;
        
        private EntityCollection<ZipWithInfo> _zipCodesWithInfo;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnInfoChanging(string value);
        partial void OnInfoChanged();
        partial void OnSetCityInfoInvoking(string info);
        partial void OnSetCityInfoInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CityWithInfo"/> class.
        /// </summary>
        public CityWithInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Info' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(32)]
        public string Info
        {
            get
            {
                return this._info;
            }
            set
            {
                if ((this._info != value))
                {
                    this.OnInfoChanging(value);
                    this.RaiseDataMemberChanging("Info");
                    this.ValidateProperty("Info", value);
                    this._info = value;
                    this.RaiseDataMemberChanged("Info");
                    this.OnInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ZipWithInfo"/> entity instances.
        /// </summary>
        [Association("CityWithInfo_ZipWithInfo", "Name, CountyName, StateName", "CityName,  CountyName, StateName")]
        public EntityCollection<ZipWithInfo> ZipCodesWithInfo
        {
            get
            {
                if ((this._zipCodesWithInfo == null))
                {
                    this._zipCodesWithInfo = new EntityCollection<ZipWithInfo>(this, "ZipCodesWithInfo", this.FilterZipCodesWithInfo);
                }
                return this._zipCodesWithInfo;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'SetCityInfo' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsSetCityInfoInvoked
        {
            get
            {
                return base.IsActionInvoked("SetCityInfo");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'SetCityInfo' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanSetCityInfo
        {
            get
            {
                return base.CanInvokeAction("SetCityInfo");
            }
        }
        
        private bool FilterZipCodesWithInfo(ZipWithInfo entity)
        {
            return (((entity.CityName == this.Name) 
                        && (entity.CountyName == this.CountyName)) 
                        && (entity.StateName == this.StateName));
        }
        
        /// <summary>
        /// Invokes the 'SetCityInfo' action on this entity.
        /// </summary>
        /// <param name="info">The value to pass to the server method's 'info' parameter.</param>
        [EntityAction("SetCityInfo", AllowMultipleInvocations=false)]
        public void SetCityInfo(string info)
        {
            this.OnSetCityInfoInvoking(info);
            base.InvokeAction("SetCityInfo", info);
            this.OnSetCityInfoInvoked();
        }
    }
    
    /// <summary>
    /// The 'County' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Cities")]
    public sealed partial class County : Entity
    {
        
        private EntityCollection<City> _cities;
        
        private string _name;
        
        private EntityRef<State> _state;
        
        private string _stateName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnStateNameChanging(string value);
        partial void OnStateNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="County"/> class.
        /// </summary>
        public County()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="City"/> entity instances.
        /// </summary>
        [Association("County_City", "Name,StateName", "CountyName,StateName")]
        public EntityCollection<City> Cities
        {
            get
            {
                if ((this._cities == null))
                {
                    this._cities = new EntityCollection<City>(this, "Cities", this.FilterCities, this.AttachCities, this.DetachCities);
                }
                return this._cities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RegularExpression("^[A-Z]+[a-z A-Z]*$")]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_County", "StateName", "Name", IsForeignKey=true)]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.Counties.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.StateName = value.Name;
                    }
                    else
                    {
                        this.StateName = default(string);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.Counties.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StateName' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public string StateName
        {
            get
            {
                return this._stateName;
            }
            set
            {
                if ((this._stateName != value))
                {
                    this.OnStateNameChanging(value);
                    this.RaiseDataMemberChanging("StateName");
                    this.ValidateProperty("StateName", value);
                    this._stateName = value;
                    this.RaiseDataMemberChanged("StateName");
                    this.OnStateNameChanged();
                }
            }
        }
        
        private void AttachCities(City entity)
        {
            entity.County = this;
        }
        
        private void DetachCities(City entity)
        {
            entity.County = null;
        }
        
        private bool FilterCities(City entity)
        {
            return ((entity.CountyName == this.Name) 
                        && (entity.StateName == this.StateName));
        }
        
        private bool FilterState(State entity)
        {
            return (entity.Name == this.StateName);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._name == null) 
                        || (this._stateName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._name, this._stateName);
        }
    }
    
    /// <summary>
    /// Enum ShippingZone
    /// </summary>
    [DataContract(Namespace="CityNamespace", Name="CityName")]
    public enum ShippingZone
    {
        
        /// <summary>
        /// Pacific
        /// </summary>
        [EnumMember(Value="P")]
        Pacific = 0,
        
        /// <summary>
        /// Central
        /// </summary>
        [EnumMember(Value="C")]
        Central = 1,
        
        /// <summary>
        /// Eastern
        /// </summary>
        [EnumMember(Value="E")]
        Eastern = 2,
    }
    
    /// <summary>
    /// The 'State' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Cities")]
    public sealed partial class State : Entity
    {
        
        private EntityCollection<County> _counties;
        
        private string _fullName;
        
        private string _name;
        
        private ShippingZone _shippingZone;
        
        private TimeZone _timeZone;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnShippingZoneChanging(ShippingZone value);
        partial void OnShippingZoneChanged();
        partial void OnTimeZoneChanging(TimeZone value);
        partial void OnTimeZoneChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="State"/> class.
        /// </summary>
        public State()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="County"/> entity instances.
        /// </summary>
        [Association("State_County", "Name", "StateName")]
        [CustomValidation(typeof(CountiesValidator), "AreCountiesValid")]
        [Editable(false)]
        [ReadOnly(true)]
        public EntityCollection<County> Counties
        {
            get
            {
                if ((this._counties == null))
                {
                    this._counties = new EntityCollection<County>(this, "Counties", this.FilterCounties, this.AttachCounties, this.DetachCounties);
                }
                return this._counties;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullName' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^[A-Z]+[a-z A-Z]*$")]
        [Required()]
        [RoundtripOriginal()]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaisePropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [CustomValidation(typeof(StateNameValidator), "IsStateNameValid")]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^[A-Z]*")]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(2)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShippingZone' value.
        /// </summary>
        [DataMember()]
        public ShippingZone ShippingZone
        {
            get
            {
                return this._shippingZone;
            }
            set
            {
                if ((this._shippingZone != value))
                {
                    this.OnShippingZoneChanging(value);
                    this.RaiseDataMemberChanging("ShippingZone");
                    this.ValidateProperty("ShippingZone", value);
                    this._shippingZone = value;
                    this.RaiseDataMemberChanged("ShippingZone");
                    this.OnShippingZoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeZone' value.
        /// </summary>
        [DataMember()]
        public TimeZone TimeZone
        {
            get
            {
                return this._timeZone;
            }
            set
            {
                if ((this._timeZone != value))
                {
                    this.OnTimeZoneChanging(value);
                    this.RaiseDataMemberChanging("TimeZone");
                    this.ValidateProperty("TimeZone", value);
                    this._timeZone = value;
                    this.RaiseDataMemberChanged("TimeZone");
                    this.OnTimeZoneChanged();
                }
            }
        }
        
        private void AttachCounties(County entity)
        {
            entity.State = this;
        }
        
        private void DetachCounties(County entity)
        {
            entity.State = null;
        }
        
        private bool FilterCounties(County entity)
        {
            return (entity.StateName == this.Name);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._fullName == null) 
                        || (this._name == null)))
            {
                return null;
            }
            return EntityKey.Create(this._fullName, this._name);
        }
    }
    
    /// <summary>
    /// The 'Zip' entity class.
    /// </summary>
    [CustomValidation(typeof(ZipValidator), "IsZipValid", ErrorMessage="Zip codes cannot have matching city and state names")]
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Cities")]
    [Description("Zip code entity")]
    [DomainIdentifier("ZipPattern")]
    [KnownType(typeof(ZipWithInfo))]
    public partial class Zip : Entity
    {
        
        private EntityRef<City> _city;
        
        private string _cityName;
        
        private int _code;
        
        private string _countyName;
        
        private int _fourDigit;
        
        private string _stateName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCityNameChanging(string value);
        partial void OnCityNameChanged();
        partial void OnCodeChanging(int value);
        partial void OnCodeChanged();
        partial void OnCountyNameChanging(string value);
        partial void OnCountyNameChanged();
        partial void OnFourDigitChanging(int value);
        partial void OnFourDigitChanged();
        partial void OnStateNameChanging(string value);
        partial void OnStateNameChanged();
        partial void OnReassignZipCodeInvoking([Range(-9999, 9999)] int offset, bool useFull);
        partial void OnReassignZipCodeInvoked();
        partial void OnThrowExceptionInvoking(string scenario);
        partial void OnThrowExceptionInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Zip"/> class.
        /// </summary>
        public Zip()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="City"/> entity.
        /// </summary>
        [Association("City_Zip", "CityName,  CountyName, StateName", "Name, CountyName, StateName", IsForeignKey=true)]
        [CustomValidation(typeof(CityPropertyValidator), "IsValidCity")]
        public City City
        {
            get
            {
                if ((this._city == null))
                {
                    this._city = new EntityRef<City>(this, "City", this.FilterCity);
                }
                return this._city.Entity;
            }
            set
            {
                City previous = this.City;
                if ((previous != value))
                {
                    this.ValidateProperty("City", value);
                    if ((previous != null))
                    {
                        this._city.Entity = null;
                        previous.ZipCodes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CityName = value.Name;
                        this.CountyName = value.CountyName;
                        this.StateName = value.StateName;
                    }
                    else
                    {
                        this.CityName = default(string);
                        this.CountyName = default(string);
                        this.StateName = default(string);
                    }
                    this._city.Entity = value;
                    if ((value != null))
                    {
                        value.ZipCodes.Add(this);
                    }
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CityName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public string CityName
        {
            get
            {
                return this._cityName;
            }
            set
            {
                if ((this._cityName != value))
                {
                    this.OnCityNameChanging(value);
                    this.RaiseDataMemberChanging("CityName");
                    this.ValidateProperty("CityName", value);
                    this._cityName = value;
                    this.RaiseDataMemberChanged("CityName");
                    this.OnCityNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Description("Zip codes must be 5 digits starting with 9")]
        [DisplayFormat(DataFormatString="nnnnn")]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [MustStartWith(9)]
        [Range(0, 99999)]
        [RoundtripOriginal()]
        public int Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CountyName' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string CountyName
        {
            get
            {
                return this._countyName;
            }
            set
            {
                if ((this._countyName != value))
                {
                    this.OnCountyNameChanging(value);
                    this.RaiseDataMemberChanging("CountyName");
                    this.ValidateProperty("CountyName", value);
                    this._countyName = value;
                    this.RaiseDataMemberChanged("CountyName");
                    this.OnCountyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FourDigit' value.
        /// </summary>
        [DataMember()]
        [DisplayFormat(NullDisplayText="(optional)")]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Range(0, 9999)]
        [RoundtripOriginal()]
        [UIHint("DataGrid", "Jolt", "stringParam", "hello", "doubleParam", ((double)(2D)))]
        public int FourDigit
        {
            get
            {
                return this._fourDigit;
            }
            set
            {
                if ((this._fourDigit != value))
                {
                    this.OnFourDigitChanging(value);
                    this.ValidateProperty("FourDigit", value);
                    this._fourDigit = value;
                    this.RaisePropertyChanged("FourDigit");
                    this.OnFourDigitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StateName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public string StateName
        {
            get
            {
                return this._stateName;
            }
            set
            {
                if ((this._stateName != value))
                {
                    this.OnStateNameChanging(value);
                    this.RaiseDataMemberChanging("StateName");
                    this.ValidateProperty("StateName", value);
                    this._stateName = value;
                    this.RaiseDataMemberChanged("StateName");
                    this.OnStateNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'ReassignZipCode' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsReassignZipCodeInvoked
        {
            get
            {
                return base.IsActionInvoked("ReassignZipCode");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'ReassignZipCode' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanReassignZipCode
        {
            get
            {
                return base.CanInvokeAction("ReassignZipCode");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'ThrowException' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsThrowExceptionInvoked
        {
            get
            {
                return base.IsActionInvoked("ThrowException");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'ThrowException' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanThrowException
        {
            get
            {
                return base.CanInvokeAction("ThrowException");
            }
        }
        
        private bool FilterCity(City entity)
        {
            return (((entity.Name == this.CityName) 
                        && (entity.CountyName == this.CountyName)) 
                        && (entity.StateName == this.StateName));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._code, this._fourDigit);
        }
        
        /// <summary>
        /// Invokes the 'ReassignZipCode' action on this entity.
        /// </summary>
        /// <param name="offset">The value to pass to the server method's 'offset' parameter.</param>
        /// <param name="useFull">The value to pass to the server method's 'useFull' parameter.</param>
        [CustomValidation(typeof(ZipValidator), "IsZipValid", ErrorMessage="Zip codes cannot have matching city and state names")]
        [EntityAction("ReassignZipCode", AllowMultipleInvocations=false)]
        public void ReassignZipCode([Range(-9999, 9999)] int offset, bool useFull)
        {
            this.OnReassignZipCodeInvoking(offset, useFull);
            base.InvokeAction("ReassignZipCode", offset, useFull);
            this.OnReassignZipCodeInvoked();
        }
        
        /// <summary>
        /// Invokes the 'ThrowException' action on this entity.
        /// </summary>
        /// <param name="scenario">The value to pass to the server method's 'scenario' parameter.</param>
        [CustomValidation(typeof(ThrowExValidator), "IsThrowExValid")]
        [EntityAction("ThrowException", AllowMultipleInvocations=false)]
        public void ThrowException(string scenario)
        {
            this.OnThrowExceptionInvoking(scenario);
            base.InvokeAction("ThrowException", scenario);
            this.OnThrowExceptionInvoked();
        }
    }
    
    /// <summary>
    /// The 'ZipWithInfo' entity class.
    /// </summary>
    [CustomValidation(typeof(ZipValidator), "IsZipValid", ErrorMessage="Zip codes cannot have matching city and state names")]
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Cities")]
    [Description("Zip code entity")]
    [DomainIdentifier("ZipPattern")]
    public sealed partial class ZipWithInfo : Zip
    {
        
        private string _info;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnInfoChanging(string value);
        partial void OnInfoChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ZipWithInfo"/> class.
        /// </summary>
        public ZipWithInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Info' value.
        /// </summary>
        [DataMember()]
        public string Info
        {
            get
            {
                return this._info;
            }
            set
            {
                if ((this._info != value))
                {
                    this.OnInfoChanging(value);
                    this.RaiseDataMemberChanging("Info");
                    this.ValidateProperty("Info", value);
                    this._info = value;
                    this.RaiseDataMemberChanged("Info");
                    this.OnInfoChanged();
                }
            }
        }
    }
}
