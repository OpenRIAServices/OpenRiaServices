//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataTests.Scenarios.EF.Northwind
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Threading.Tasks;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The 'AddressCT' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.Scenarios.EF.Northwind")]
    public sealed partial class AddressCT : ComplexObject
    {
        
        private string _addressLine;
        
        private string _city;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressLineChanging(string value);
        partial void OnAddressLineChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressCT"/> class.
        /// </summary>
        public AddressCT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AddressLine' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(100)]
        public string AddressLine
        {
            get
            {
                return this._addressLine;
            }
            set
            {
                if ((this._addressLine != value))
                {
                    this.OnAddressLineChanging(value);
                    this.RaiseDataMemberChanging("AddressLine");
                    this.ValidateProperty("AddressLine", value);
                    this._addressLine = value;
                    this.RaiseDataMemberChanged("AddressLine");
                    this.OnAddressLineChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'ContactInfoCT' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.Scenarios.EF.Northwind")]
    public sealed partial class ContactInfoCT : ComplexObject
    {
        
        private AddressCT _address;
        
        private string _homePhone;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(AddressCT value);
        partial void OnAddressChanged();
        partial void OnHomePhoneChanging(string value);
        partial void OnHomePhoneChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactInfoCT"/> class.
        /// </summary>
        public ContactInfoCT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        [Display(AutoGenerateField=false)]
        [Required()]
        public AddressCT Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HomePhone' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(24)]
        public string HomePhone
        {
            get
            {
                return this._homePhone;
            }
            set
            {
                if ((this._homePhone != value))
                {
                    this.OnHomePhoneChanging(value);
                    this.RaiseDataMemberChanging("HomePhone");
                    this.ValidateProperty("HomePhone", value);
                    this._homePhone = value;
                    this.RaiseDataMemberChanged("HomePhone");
                    this.OnHomePhoneChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'EmployeeWithCT' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.Scenarios.EF.Northwind")]
    public sealed partial class EmployeeWithCT : Entity
    {
        
        private ContactInfoCT _contactInfo;
        
        private int _employeeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnContactInfoChanging(ContactInfoCT value);
        partial void OnContactInfoChanged();
        partial void OnEmployeeIDChanging(int value);
        partial void OnEmployeeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeWithCT"/> class.
        /// </summary>
        public EmployeeWithCT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ContactInfo' value.
        /// </summary>
        [DataMember()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        [Display(AutoGenerateField=false)]
        [Required()]
        public ContactInfoCT ContactInfo
        {
            get
            {
                return this._contactInfo;
            }
            set
            {
                if ((this._contactInfo != value))
                {
                    this.OnContactInfoChanging(value);
                    this.RaiseDataMemberChanging("ContactInfo");
                    this.ValidateProperty("ContactInfo", value);
                    this._contactInfo = value;
                    this.RaiseDataMemberChanged("ContactInfo");
                    this.OnContactInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaisePropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._employeeID;
        }
    }
}
namespace OpenRiaServices.Tools.Test
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.Threading.Tasks;
    using DataTests.Scenarios.EF.Northwind;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'EFComplexTypesService' DomainService.
    /// </summary>
    public sealed partial class EFComplexTypesContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EFComplexTypesContext"/> class.
        /// </summary>
        public EFComplexTypesContext() : 
                this(new Uri("OpenRiaServices-Tools-Test-EFComplexTypesService.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EFComplexTypesContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The EFComplexTypesService service URI.</param>
        public EFComplexTypesContext(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(IEFComplexTypesServiceContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EFComplexTypesContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public EFComplexTypesContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EmployeeWithCT"/> entity instances that have been loaded into this <see cref="EFComplexTypesContext"/> instance.
        /// </summary>
        public EntitySet<EmployeeWithCT> EmployeeWithCTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EmployeeWithCT>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EmployeeWithCT"/> entity instances using the 'GetCustomers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EmployeeWithCT"/> entity instances.</returns>
        public EntityQuery<EmployeeWithCT> GetCustomersQuery()
        {
            this.ValidateMethod("GetCustomersQuery", null);
            return base.CreateQuery<EmployeeWithCT>("GetCustomers", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new EFComplexTypesContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'EFComplexTypesService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IEFComplexTypesServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EFComplexTypesService/GetCustomers", ReplyAction="http://tempuri.org/EFComplexTypesService/GetCustomersResponse")]
            IAsyncResult BeginGetCustomers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomers' operation.</returns>
            QueryResult<EmployeeWithCT> EndGetCustomers(IAsyncResult result);
        }
        
        internal sealed class EFComplexTypesContextEntityContainer : EntityContainer
        {
            
            public EFComplexTypesContextEntityContainer()
            {
                this.CreateEntitySet<EmployeeWithCT>(EntitySetOperations.None);
            }
        }
    }
}
