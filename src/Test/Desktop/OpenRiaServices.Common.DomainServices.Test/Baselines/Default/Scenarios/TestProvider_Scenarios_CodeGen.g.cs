//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestDomainServices
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.Threading;
    using System.Threading.Tasks;
    using CustomNamespace;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The 'A' entity class.
    /// </summary>
    // The following attributes were not generated:
    // 
    // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
    // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsObjectValid' on type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'.
    // [CustomValidationAttribute(typeof(TestDomainServices.ServerOnlyValidator), "IsObjectValid")]
    // 
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class A : Entity
    {
        
        private EntityRef<B> _b;
        
        private int _bid1;
        
        private int _bid2;
        
        private int _id;
        
        private string _readOnlyData_NoReadOnlyAttribute;
        
        private string _readOnlyData_NoSetter;
        
        private string _readOnlyData_WithSetter;
        
        private string _requiredString;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBID1Changing(int value);
        partial void OnBID1Changed();
        partial void OnBID2Changing(int value);
        partial void OnBID2Changed();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnReadOnlyData_NoReadOnlyAttributeChanging(string value);
        partial void OnReadOnlyData_NoReadOnlyAttributeChanged();
        partial void OnReadOnlyData_NoSetterChanging(string value);
        partial void OnReadOnlyData_NoSetterChanged();
        partial void OnReadOnlyData_WithSetterChanging(string value);
        partial void OnReadOnlyData_WithSetterChanged();
        partial void OnRequiredStringChanging(string value);
        partial void OnRequiredStringChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="A"/> class.
        /// </summary>
        public A()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="B"/> entity.
        /// </summary>
        [Association("A_B", "BID1, BID2", "ID1, ID2", IsForeignKey=true)]
        public B B
        {
            get
            {
                if ((this._b == null))
                {
                    this._b = new EntityRef<B>(this, "B", this.FilterB);
                }
                return this._b.Entity;
            }
            set
            {
                B previous = this.B;
                if ((previous != value))
                {
                    this.ValidateProperty("B", value);
                    if ((value != null))
                    {
                        this.BID1 = value.ID1;
                        this.BID2 = value.ID2;
                    }
                    else
                    {
                        this.BID1 = default(int);
                        this.BID2 = default(int);
                    }
                    this._b.Entity = value;
                    this.RaisePropertyChanged("B");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BID1' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int BID1
        {
            get
            {
                return this._bid1;
            }
            set
            {
                if ((this._bid1 != value))
                {
                    this.OnBID1Changing(value);
                    this.RaiseDataMemberChanging("BID1");
                    this.ValidateProperty("BID1", value);
                    this._bid1 = value;
                    this.RaiseDataMemberChanged("BID1");
                    this.OnBID1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BID2' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int BID2
        {
            get
            {
                return this._bid2;
            }
            set
            {
                if ((this._bid2 != value))
                {
                    this.OnBID2Changing(value);
                    this.RaiseDataMemberChanging("BID2");
                    this.ValidateProperty("BID2", value);
                    this._bid2 = value;
                    this.RaiseDataMemberChanged("BID2");
                    this.OnBID2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyData_NoReadOnlyAttribute' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string ReadOnlyData_NoReadOnlyAttribute
        {
            get
            {
                return this._readOnlyData_NoReadOnlyAttribute;
            }
            set
            {
                if ((this._readOnlyData_NoReadOnlyAttribute != value))
                {
                    this.OnReadOnlyData_NoReadOnlyAttributeChanging(value);
                    this.ValidateProperty("ReadOnlyData_NoReadOnlyAttribute", value);
                    this._readOnlyData_NoReadOnlyAttribute = value;
                    this.RaisePropertyChanged("ReadOnlyData_NoReadOnlyAttribute");
                    this.OnReadOnlyData_NoReadOnlyAttributeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyData_NoSetter' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string ReadOnlyData_NoSetter
        {
            get
            {
                return this._readOnlyData_NoSetter;
            }
            set
            {
                if ((this._readOnlyData_NoSetter != value))
                {
                    this.OnReadOnlyData_NoSetterChanging(value);
                    this.ValidateProperty("ReadOnlyData_NoSetter", value);
                    this._readOnlyData_NoSetter = value;
                    this.RaisePropertyChanged("ReadOnlyData_NoSetter");
                    this.OnReadOnlyData_NoSetterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyData_WithSetter' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string ReadOnlyData_WithSetter
        {
            get
            {
                return this._readOnlyData_WithSetter;
            }
            set
            {
                if ((this._readOnlyData_WithSetter != value))
                {
                    this.OnReadOnlyData_WithSetterChanging(value);
                    this.ValidateProperty("ReadOnlyData_WithSetter", value);
                    this._readOnlyData_WithSetter = value;
                    this.RaisePropertyChanged("ReadOnlyData_WithSetter");
                    this.OnReadOnlyData_WithSetterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequiredString' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsStringValid' on type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'.
        // [CustomValidationAttribute(typeof(TestDomainServices.ServerOnlyValidator), "IsStringValid")]
        // 
        // - The validation attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' contains ErrorMessageResourceName='NonExistentProperty' which was not found on declared ErrorMessageResourceType 'System.String'.
        // [StringLengthAttribute(1234, ErrorMessageResourceName = "NonExistentProperty", ErrorMessageResourceType = typeof(System.String))]
        // 
        [Custom()]
        [DataMember()]
        [Editable(true)]
        [Required()]
        public string RequiredString
        {
            get
            {
                return this._requiredString;
            }
            set
            {
                if ((this._requiredString != value))
                {
                    this.OnRequiredStringChanging(value);
                    this.RaiseDataMemberChanging("RequiredString");
                    this.ValidateProperty("RequiredString", value);
                    this._requiredString = value;
                    this.RaiseDataMemberChanged("RequiredString");
                    this.OnRequiredStringChanged();
                }
            }
        }
        
        private bool FilterB(B entity)
        {
            return ((entity.ID1 == this.BID1) 
                        && (entity.ID2 == this.BID2));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'B' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class B : Entity
    {
        
        private EntityCollection<C> _cs;
        
        private int _id1;
        
        private int _id2;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnID1Changing(int value);
        partial void OnID1Changed();
        partial void OnID2Changing(int value);
        partial void OnID2Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="B"/> class.
        /// </summary>
        public B()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="C"/> entity instances.
        /// </summary>
        [Association("B_C", "ID1, ID2", "BID1, BID2")]
        [Display(Description="Cs")]
        public EntityCollection<C> Cs
        {
            get
            {
                if ((this._cs == null))
                {
                    this._cs = new EntityCollection<C>(this, "Cs", this.FilterCs);
                }
                return this._cs;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID1' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID1
        {
            get
            {
                return this._id1;
            }
            set
            {
                if ((this._id1 != value))
                {
                    this.OnID1Changing(value);
                    this.ValidateProperty("ID1", value);
                    this._id1 = value;
                    this.RaisePropertyChanged("ID1");
                    this.OnID1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID2' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID2
        {
            get
            {
                return this._id2;
            }
            set
            {
                if ((this._id2 != value))
                {
                    this.OnID2Changing(value);
                    this.ValidateProperty("ID2", value);
                    this._id2 = value;
                    this.RaisePropertyChanged("ID2");
                    this.OnID2Changed();
                }
            }
        }
        
        private bool FilterCs(C entity)
        {
            return ((entity.BID1 == this.ID1) 
                        && (entity.BID2 == this.ID2));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._id1, this._id2);
        }
    }
    
    /// <summary>
    /// The 'C' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class C : Entity
    {
        
        private int _bid1;
        
        private int _bid2;
        
        private EntityRef<D> _d_Ref1;
        
        private EntityRef<D> _d_Ref2;
        
        private int _did_Ref1;
        
        private int _did_Ref2;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBID1Changing(int value);
        partial void OnBID1Changed();
        partial void OnBID2Changing(int value);
        partial void OnBID2Changed();
        partial void OnDID_Ref1Changing(int value);
        partial void OnDID_Ref1Changed();
        partial void OnDID_Ref2Changing(int value);
        partial void OnDID_Ref2Changed();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="C"/> class.
        /// </summary>
        public C()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BID1' value.
        /// </summary>
        [DataMember()]
        public int BID1
        {
            get
            {
                return this._bid1;
            }
            set
            {
                if ((this._bid1 != value))
                {
                    this.OnBID1Changing(value);
                    this.RaiseDataMemberChanging("BID1");
                    this.ValidateProperty("BID1", value);
                    this._bid1 = value;
                    this.RaiseDataMemberChanged("BID1");
                    this.OnBID1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BID2' value.
        /// </summary>
        [DataMember()]
        public int BID2
        {
            get
            {
                return this._bid2;
            }
            set
            {
                if ((this._bid2 != value))
                {
                    this.OnBID2Changing(value);
                    this.RaiseDataMemberChanging("BID2");
                    this.ValidateProperty("BID2", value);
                    this._bid2 = value;
                    this.RaiseDataMemberChanged("BID2");
                    this.OnBID2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="D"/> entity.
        /// </summary>
        [Association("C_D_Ref1", "DID_Ref1", "ID", IsForeignKey=true)]
        [Display(Description="D_Ref1")]
        public D D_Ref1
        {
            get
            {
                if ((this._d_Ref1 == null))
                {
                    this._d_Ref1 = new EntityRef<D>(this, "D_Ref1", this.FilterD_Ref1);
                }
                return this._d_Ref1.Entity;
            }
            set
            {
                D previous = this.D_Ref1;
                if ((previous != value))
                {
                    this.ValidateProperty("D_Ref1", value);
                    if ((previous != null))
                    {
                        this._d_Ref1.Entity = null;
                        previous.C = null;
                    }
                    if ((value != null))
                    {
                        this.DID_Ref1 = value.ID;
                    }
                    else
                    {
                        this.DID_Ref1 = default(int);
                    }
                    this._d_Ref1.Entity = value;
                    if ((value != null))
                    {
                        value.C = this;
                    }
                    this.RaisePropertyChanged("D_Ref1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="D"/> entity.
        /// </summary>
        [Association("C_D_Ref2", "DID_Ref2", "ID", IsForeignKey=true)]
        public D D_Ref2
        {
            get
            {
                if ((this._d_Ref2 == null))
                {
                    this._d_Ref2 = new EntityRef<D>(this, "D_Ref2", this.FilterD_Ref2);
                }
                return this._d_Ref2.Entity;
            }
            set
            {
                D previous = this.D_Ref2;
                if ((previous != value))
                {
                    this.ValidateProperty("D_Ref2", value);
                    if ((value != null))
                    {
                        this.DID_Ref2 = value.ID;
                    }
                    else
                    {
                        this.DID_Ref2 = default(int);
                    }
                    this._d_Ref2.Entity = value;
                    this.RaisePropertyChanged("D_Ref2");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DID_Ref1' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DID_Ref1
        {
            get
            {
                return this._did_Ref1;
            }
            set
            {
                if ((this._did_Ref1 != value))
                {
                    this.OnDID_Ref1Changing(value);
                    this.RaiseDataMemberChanging("DID_Ref1");
                    this.ValidateProperty("DID_Ref1", value);
                    this._did_Ref1 = value;
                    this.RaiseDataMemberChanged("DID_Ref1");
                    this.OnDID_Ref1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DID_Ref2' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DID_Ref2
        {
            get
            {
                return this._did_Ref2;
            }
            set
            {
                if ((this._did_Ref2 != value))
                {
                    this.OnDID_Ref2Changing(value);
                    this.RaiseDataMemberChanging("DID_Ref2");
                    this.ValidateProperty("DID_Ref2", value);
                    this._did_Ref2 = value;
                    this.RaiseDataMemberChanged("DID_Ref2");
                    this.OnDID_Ref2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        private bool FilterD_Ref1(D entity)
        {
            return (entity.ID == this.DID_Ref1);
        }
        
        private bool FilterD_Ref2(D entity)
        {
            return (entity.ID == this.DID_Ref2);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'D' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class D : Entity
    {
        
        private byte[] _binaryData;
        
        private EntityRef<C> _c;
        
        private EntityRef<D> _d1;
        
        private EntityRef<D> _d2;
        
        private EntityRef<D> _d2_BackRef;
        
        private EntityCollection<D> _ds;
        
        private int _dSelfRef_ID1;
        
        private int _dSelfRef_ID2;
        
        private int _id;
        
        private byte[] _projectedD1BinaryData;
        
        private int _projectedD1ID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBinaryDataChanging(byte[] value);
        partial void OnBinaryDataChanged();
        partial void OnDSelfRef_ID1Changing(int value);
        partial void OnDSelfRef_ID1Changed();
        partial void OnDSelfRef_ID2Changing(int value);
        partial void OnDSelfRef_ID2Changed();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnProjectedD1BinaryDataChanging(byte[] value);
        partial void OnProjectedD1BinaryDataChanged();
        partial void OnProjectedD1IDChanging(int value);
        partial void OnProjectedD1IDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="D"/> class.
        /// </summary>
        public D()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BinaryData' value.
        /// </summary>
        [DataMember()]
        public byte[] BinaryData
        {
            get
            {
                return this._binaryData;
            }
            set
            {
                if ((this._binaryData != value))
                {
                    this.OnBinaryDataChanging(value);
                    this.RaiseDataMemberChanging("BinaryData");
                    this.ValidateProperty("BinaryData", value);
                    this._binaryData = value;
                    this.RaiseDataMemberChanged("BinaryData");
                    this.OnBinaryDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="C"/> entity.
        /// </summary>
        [Association("C_D_Ref1", "ID", "DID_Ref1")]
        public C C
        {
            get
            {
                if ((this._c == null))
                {
                    this._c = new EntityRef<C>(this, "C", this.FilterC);
                }
                return this._c.Entity;
            }
            set
            {
                C previous = this.C;
                if ((previous != value))
                {
                    this.ValidateProperty("C", value);
                    if ((previous != null))
                    {
                        this._c.Entity = null;
                        previous.D_Ref1 = null;
                    }
                    this._c.Entity = value;
                    if ((value != null))
                    {
                        value.D_Ref1 = this;
                    }
                    this.RaisePropertyChanged("C");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="D"/> entity.
        /// </summary>
        [Association("D_D", "DSelfRef_ID1", "ID", IsForeignKey=true)]
        public D D1
        {
            get
            {
                if ((this._d1 == null))
                {
                    this._d1 = new EntityRef<D>(this, "D1", this.FilterD1);
                }
                return this._d1.Entity;
            }
            set
            {
                D previous = this.D1;
                if ((previous != value))
                {
                    this.ValidateProperty("D1", value);
                    if ((previous != null))
                    {
                        this._d1.Entity = null;
                        previous.Ds.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DSelfRef_ID1 = value.ID;
                    }
                    else
                    {
                        this.DSelfRef_ID1 = default(int);
                    }
                    this._d1.Entity = value;
                    if ((value != null))
                    {
                        value.Ds.Add(this);
                    }
                    this.RaisePropertyChanged("D1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="D"/> entity.
        /// </summary>
        [Association("D_D2", "DSelfRef_ID2", "ID", IsForeignKey=true)]
        public D D2
        {
            get
            {
                if ((this._d2 == null))
                {
                    this._d2 = new EntityRef<D>(this, "D2", this.FilterD2);
                }
                return this._d2.Entity;
            }
            set
            {
                D previous = this.D2;
                if ((previous != value))
                {
                    this.ValidateProperty("D2", value);
                    if ((previous != null))
                    {
                        this._d2.Entity = null;
                        previous.D2_BackRef = null;
                    }
                    if ((value != null))
                    {
                        this.DSelfRef_ID2 = value.ID;
                    }
                    else
                    {
                        this.DSelfRef_ID2 = default(int);
                    }
                    this._d2.Entity = value;
                    if ((value != null))
                    {
                        value.D2_BackRef = this;
                    }
                    this.RaisePropertyChanged("D2");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="D"/> entity.
        /// </summary>
        [Association("D_D2", "ID", "DSelfRef_ID2")]
        public D D2_BackRef
        {
            get
            {
                if ((this._d2_BackRef == null))
                {
                    this._d2_BackRef = new EntityRef<D>(this, "D2_BackRef", this.FilterD2_BackRef);
                }
                return this._d2_BackRef.Entity;
            }
            set
            {
                D previous = this.D2_BackRef;
                if ((previous != value))
                {
                    this.ValidateProperty("D2_BackRef", value);
                    if ((previous != null))
                    {
                        this._d2_BackRef.Entity = null;
                        previous.D2 = null;
                    }
                    this._d2_BackRef.Entity = value;
                    if ((value != null))
                    {
                        value.D2 = this;
                    }
                    this.RaisePropertyChanged("D2_BackRef");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="D"/> entity instances.
        /// </summary>
        [Association("D_D", "ID", "DSelfRef_ID1")]
        public EntityCollection<D> Ds
        {
            get
            {
                if ((this._ds == null))
                {
                    this._ds = new EntityCollection<D>(this, "Ds", this.FilterDs, this.AttachDs, this.DetachDs);
                }
                return this._ds;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DSelfRef_ID1' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DSelfRef_ID1
        {
            get
            {
                return this._dSelfRef_ID1;
            }
            set
            {
                if ((this._dSelfRef_ID1 != value))
                {
                    this.OnDSelfRef_ID1Changing(value);
                    this.RaiseDataMemberChanging("DSelfRef_ID1");
                    this.ValidateProperty("DSelfRef_ID1", value);
                    this._dSelfRef_ID1 = value;
                    this.RaiseDataMemberChanged("DSelfRef_ID1");
                    this.OnDSelfRef_ID1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DSelfRef_ID2' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DSelfRef_ID2
        {
            get
            {
                return this._dSelfRef_ID2;
            }
            set
            {
                if ((this._dSelfRef_ID2 != value))
                {
                    this.OnDSelfRef_ID2Changing(value);
                    this.RaiseDataMemberChanging("DSelfRef_ID2");
                    this.ValidateProperty("DSelfRef_ID2", value);
                    this._dSelfRef_ID2 = value;
                    this.RaiseDataMemberChanged("DSelfRef_ID2");
                    this.OnDSelfRef_ID2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Range(0, 99999)]
        [RoundtripOriginal()]
        [UIHint("TextBlock")]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProjectedD1BinaryData' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public byte[] ProjectedD1BinaryData
        {
            get
            {
                return this._projectedD1BinaryData;
            }
            set
            {
                if ((this._projectedD1BinaryData != value))
                {
                    this.OnProjectedD1BinaryDataChanging(value);
                    this.ValidateProperty("ProjectedD1BinaryData", value);
                    this._projectedD1BinaryData = value;
                    this.RaisePropertyChanged("ProjectedD1BinaryData");
                    this.OnProjectedD1BinaryDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProjectedD1ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [UIHint("TextBlock")]
        public int ProjectedD1ID
        {
            get
            {
                return this._projectedD1ID;
            }
            set
            {
                if ((this._projectedD1ID != value))
                {
                    this.OnProjectedD1IDChanging(value);
                    this.ValidateProperty("ProjectedD1ID", value);
                    this._projectedD1ID = value;
                    this.RaisePropertyChanged("ProjectedD1ID");
                    this.OnProjectedD1IDChanged();
                }
            }
        }
        
        private bool FilterC(C entity)
        {
            return (entity.DID_Ref1 == this.ID);
        }
        
        private bool FilterD1(D entity)
        {
            return (entity.ID == this.DSelfRef_ID1);
        }
        
        private bool FilterD2(D entity)
        {
            return (entity.ID == this.DSelfRef_ID2);
        }
        
        private bool FilterD2_BackRef(D entity)
        {
            return (entity.DSelfRef_ID2 == this.ID);
        }
        
        private void AttachDs(D entity)
        {
            entity.D1 = this;
        }
        
        private void DetachDs(D entity)
        {
            entity.D1 = null;
        }
        
        private bool FilterDs(D entity)
        {
            return (entity.DSelfRef_ID1 == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Enum ImageKindEnum
    /// </summary>
    public enum ImageKindEnum
    {
        
        /// <summary>
        /// ThumbNail
        /// </summary>
        ThumbNail = 0,
        
        /// <summary>
        /// Full
        /// </summary>
        Full = 1,
    }
    
    /// <summary>
    /// The 'SpecialDataTypes' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class SpecialDataTypes : Entity
    {
        
        private IEnumerable<Nullable<bool>> _booleanProperty;
        
        private IEnumerable<Nullable<DateTime>> _dateTimeProperty;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBooleanPropertyChanging(IEnumerable<Nullable<bool>> value);
        partial void OnBooleanPropertyChanged();
        partial void OnDateTimePropertyChanging(IEnumerable<Nullable<DateTime>> value);
        partial void OnDateTimePropertyChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialDataTypes"/> class.
        /// </summary>
        public SpecialDataTypes()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BooleanProperty' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<Nullable<bool>> BooleanProperty
        {
            get
            {
                return this._booleanProperty;
            }
            set
            {
                if ((this._booleanProperty != value))
                {
                    this.OnBooleanPropertyChanging(value);
                    this.RaiseDataMemberChanging("BooleanProperty");
                    this.ValidateProperty("BooleanProperty", value);
                    this._booleanProperty = value;
                    this.RaiseDataMemberChanged("BooleanProperty");
                    this.OnBooleanPropertyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateTimeProperty' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<Nullable<DateTime>> DateTimeProperty
        {
            get
            {
                return this._dateTimeProperty;
            }
            set
            {
                if ((this._dateTimeProperty != value))
                {
                    this.OnDateTimePropertyChanging(value);
                    this.RaiseDataMemberChanging("DateTimeProperty");
                    this.ValidateProperty("DateTimeProperty", value);
                    this._dateTimeProperty = value;
                    this.RaiseDataMemberChanged("DateTimeProperty");
                    this.OnDateTimePropertyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'TestEntity_DataMemberBuddy' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class TestEntity_DataMemberBuddy : Entity
    {
        
        private int _id;
        
        private int _prop1;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnProp1Changing(int value);
        partial void OnProp1Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestEntity_DataMemberBuddy"/> class.
        /// </summary>
        public TestEntity_DataMemberBuddy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Prop1' value.
        /// </summary>
        [DataMember(IsRequired=true, Name="P1")]
        public int Prop1
        {
            get
            {
                return this._prop1;
            }
            set
            {
                if ((this._prop1 != value))
                {
                    this.OnProp1Changing(value);
                    this.RaiseDataMemberChanging("Prop1");
                    this.ValidateProperty("Prop1", value);
                    this._prop1 = value;
                    this.RaiseDataMemberChanged("Prop1");
                    this.OnProp1Changed();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'TestProvider_Scenarios_CodeGen' DomainService.
    /// </summary>
    public sealed partial class TestProvider_Scenarios_CodeGen : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestProvider_Scenarios_CodeGen"/> class.
        /// </summary>
        public TestProvider_Scenarios_CodeGen() : 
                this(new Uri("TestDomainServices-TestProvider_Scenarios_CodeGen.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestProvider_Scenarios_CodeGen"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The TestProvider_Scenarios_CodeGen service URI.</param>
        public TestProvider_Scenarios_CodeGen(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(ITestProvider_Scenarios_CodeGenContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestProvider_Scenarios_CodeGen"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public TestProvider_Scenarios_CodeGen(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="D"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios_CodeGen"/> instance.
        /// </summary>
        public EntitySet<D> Ds
        {
            get
            {
                return base.EntityContainer.GetEntitySet<D>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="A"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios_CodeGen"/> instance.
        /// </summary>
        public EntitySet<A> As
        {
            get
            {
                return base.EntityContainer.GetEntitySet<A>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="B"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios_CodeGen"/> instance.
        /// </summary>
        public EntitySet<B> Bs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<B>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="C"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios_CodeGen"/> instance.
        /// </summary>
        public EntitySet<C> Cs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<C>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SpecialDataTypes"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios_CodeGen"/> instance.
        /// </summary>
        public EntitySet<SpecialDataTypes> SpecialDataTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SpecialDataTypes>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TestEntity_DataMemberBuddy"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios_CodeGen"/> instance.
        /// </summary>
        public EntitySet<TestEntity_DataMemberBuddy> TestEntity_DataMemberBuddies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TestEntity_DataMemberBuddy>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Turkishİ2"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios_CodeGen"/> instance.
        /// </summary>
        public EntitySet<Turkishİ2> Turkishİ2s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Turkishİ2>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="D"/> entity instances using the 'FetchDs2' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="D"/> entity instances.</returns>
        public EntityQuery<D> FetchDs2Query()
        {
            this.ValidateMethod("FetchDs2Query", null);
            return base.CreateQuery<D>("FetchDs2", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="D"/> entity instances using the 'FindDs6' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="D"/> entity instances.</returns>
        public EntityQuery<D> FindDs6Query()
        {
            this.ValidateMethod("FindDs6Query", null);
            return base.CreateQuery<D>("FindDs6", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="D"/> entity instances using the 'Get_Images' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="D"/> entity instances.</returns>
        public EntityQuery<D> Get_ImagesQuery()
        {
            this.ValidateMethod("Get_ImagesQuery", null);
            return base.CreateQuery<D>("Get_Images", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="D"/> entity instances using the 'Get_Images_OfKind' query.
        /// </summary>
        /// <param name="kind">The value for the 'kind' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="D"/> entity instances.</returns>
        public EntityQuery<D> Get_Images_OfKindQuery(Nullable<ImageKindEnum> kind)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("kind", kind);
            this.ValidateMethod("Get_Images_OfKindQuery", parameters);
            return base.CreateQuery<D>("Get_Images_OfKind", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="A"/> entity instances using the 'GetAs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="A"/> entity instances.</returns>
        public EntityQuery<A> GetAsQuery()
        {
            this.ValidateMethod("GetAsQuery", null);
            return base.CreateQuery<A>("GetAs", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="A"/> entity instances using the 'GetAsWithSideEffects' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="A"/> entity instances.</returns>
        public EntityQuery<A> GetAsWithSideEffectsQuery()
        {
            this.ValidateMethod("GetAsWithSideEffectsQuery", null);
            return base.CreateQuery<A>("GetAsWithSideEffects", null, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="B"/> entity instances using the 'GetBs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="B"/> entity instances.</returns>
        public EntityQuery<B> GetBsQuery()
        {
            this.ValidateMethod("GetBsQuery", null);
            return base.CreateQuery<B>("GetBs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="C"/> entity instances using the 'GetCs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="C"/> entity instances.</returns>
        public EntityQuery<C> GetCsQuery()
        {
            this.ValidateMethod("GetCsQuery", null);
            return base.CreateQuery<C>("GetCs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SpecialDataTypes"/> entity instances using the 'GetSpecialDataTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SpecialDataTypes"/> entity instances.</returns>
        public EntityQuery<SpecialDataTypes> GetSpecialDataTypesQuery()
        {
            this.ValidateMethod("GetSpecialDataTypesQuery", null);
            return base.CreateQuery<SpecialDataTypes>("GetSpecialDataTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TestEntity_DataMemberBuddy"/> entity instances using the 'GetTestEntity_DataMemberBuddys' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TestEntity_DataMemberBuddy"/> entity instances.</returns>
        public EntityQuery<TestEntity_DataMemberBuddy> GetTestEntity_DataMemberBuddysQuery()
        {
            this.ValidateMethod("GetTestEntity_DataMemberBuddysQuery", null);
            return base.CreateQuery<TestEntity_DataMemberBuddy>("GetTestEntity_DataMemberBuddys", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Turkishİ2"/> entity instances using the 'GetTurkishİ2' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Turkishİ2"/> entity instances.</returns>
        public EntityQuery<Turkishİ2> GetTurkishİ2Query()
        {
            this.ValidateMethod("GetTurkishİ2Query", null);
            return base.CreateQuery<Turkishİ2>("GetTurkishİ2", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="D"/> entity instances using the 'GettyImages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="D"/> entity instances.</returns>
        public EntityQuery<D> GettyImagesQuery()
        {
            this.ValidateMethod("GettyImagesQuery", null);
            return base.CreateQuery<D>("GettyImages", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="D"/> entity instances using the 'QueryDs3' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="D"/> entity instances.</returns>
        public EntityQuery<D> QueryDs3Query()
        {
            this.ValidateMethod("QueryDs3Query", null);
            return base.CreateQuery<D>("QueryDs3", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="D"/> entity instances using the 'RandomNameButStillAQuery' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="D"/> entity instances.</returns>
        public EntityQuery<D> RandomNameButStillAQueryQuery()
        {
            this.ValidateMethod("RandomNameButStillAQueryQuery", null);
            return base.CreateQuery<D>("RandomNameButStillAQuery", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="D"/> entity instances using the 'RetrieveDs4' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="D"/> entity instances.</returns>
        public EntityQuery<D> RetrieveDs4Query()
        {
            this.ValidateMethod("RetrieveDs4Query", null);
            return base.CreateQuery<D>("RetrieveDs4", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="D"/> entity instances using the 'RetrieveDs5' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="D"/> entity instances.</returns>
        public EntityQuery<D> RetrieveDs5Query()
        {
            this.ValidateMethod("RetrieveDs5Query", null);
            return base.CreateQuery<D>("RetrieveDs5", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="D"/> entity instances using the 'SelectDs1' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="D"/> entity instances.</returns>
        public EntityQuery<D> SelectDs1Query()
        {
            this.ValidateMethod("SelectDs1Query", null);
            return base.CreateQuery<D>("SelectDs1", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'OnlineMethod' method of the DomainService.
        /// </summary>
        /// <param name="x">The value for the 'x' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation OnlineMethod(D x, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("x", x);
            this.ValidateMethod("OnlineMethod", parameters);
            return this.InvokeOperation("OnlineMethod", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'OnlineMethod' method of the DomainService.
        /// </summary>
        /// <param name="x">The value for the 'x' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation OnlineMethod(D x)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("x", x);
            this.ValidateMethod("OnlineMethod", parameters);
            return this.InvokeOperation("OnlineMethod", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'OnlineMethod' method of the DomainService.
        /// </summary>
        /// <param name="x">The value for the 'x' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult> OnlineMethodAsync(D x, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("x", x);
            this.ValidateMethod("OnlineMethod", parameters);
            return this.InvokeOperationAsync("OnlineMethod", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new TestProvider_Scenarios_CodeGenEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'TestProvider_Scenarios_CodeGen' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ITestProvider_Scenarios_CodeGenContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'FetchDs2' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/FetchDs2", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/FetchDs2Response")]
            IAsyncResult BeginFetchDs2(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginFetchDs2'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginFetchDs2'.</param>
            /// <returns>The 'QueryResult' returned from the 'FetchDs2' operation.</returns>
            QueryResult<D> EndFetchDs2(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'FindDs6' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/FindDs6", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/FindDs6Response")]
            IAsyncResult BeginFindDs6(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginFindDs6'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginFindDs6'.</param>
            /// <returns>The 'QueryResult' returned from the 'FindDs6' operation.</returns>
            QueryResult<D> EndFindDs6(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Get_Images' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/Get_Images", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/Get_ImagesResponse")]
            IAsyncResult BeginGet_Images(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGet_Images'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGet_Images'.</param>
            /// <returns>The 'QueryResult' returned from the 'Get_Images' operation.</returns>
            QueryResult<D> EndGet_Images(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Get_Images_OfKind' operation.
            /// </summary>
            /// <param name="kind">The value for the 'kind' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/Get_Images_OfKind", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/Get_Images_OfKindResponse")]
            IAsyncResult BeginGet_Images_OfKind(Nullable<ImageKindEnum> kind, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGet_Images_OfKind'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGet_Images_OfKind'.</param>
            /// <returns>The 'QueryResult' returned from the 'Get_Images_OfKind' operation.</returns>
            QueryResult<D> EndGet_Images_OfKind(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetAs", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetAsResponse")]
            IAsyncResult BeginGetAs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAs' operation.</returns>
            QueryResult<A> EndGetAs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAsWithSideEffects' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetAsWithSideEffects", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetAsWithSideEffectsResponse")]
            IAsyncResult BeginGetAsWithSideEffects(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAsWithSideEffects'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAsWithSideEffects'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAsWithSideEffects' operation.</returns>
            QueryResult<A> EndGetAsWithSideEffects(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetBs", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetBsResponse")]
            IAsyncResult BeginGetBs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBs' operation.</returns>
            QueryResult<B> EndGetBs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetCs", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetCsResponse")]
            IAsyncResult BeginGetCs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCs' operation.</returns>
            QueryResult<C> EndGetCs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSpecialDataTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetSpecialDataTypes", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetSpecialDataTypesResponse")]
            IAsyncResult BeginGetSpecialDataTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSpecialDataTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSpecialDataTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSpecialDataTypes' operation.</returns>
            QueryResult<SpecialDataTypes> EndGetSpecialDataTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTestEntity_DataMemberBuddys' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetTestEntity_DataMemberBuddys", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetTestEntity_DataMemberBuddysR" +
                "esponse")]
            IAsyncResult BeginGetTestEntity_DataMemberBuddys(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTestEntity_DataMemberBuddys'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTestEntity_DataMemberBuddys'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTestEntity_DataMemberBuddys' operation.</returns>
            QueryResult<TestEntity_DataMemberBuddy> EndGetTestEntity_DataMemberBuddys(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTurkishİ2' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetTurkishİ2", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/GetTurkishİ2Response")]
            IAsyncResult BeginGetTurkishİ2(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTurkishİ2'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTurkishİ2'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTurkishİ2' operation.</returns>
            QueryResult<Turkishİ2> EndGetTurkishİ2(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GettyImages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/GettyImages", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/GettyImagesResponse")]
            IAsyncResult BeginGettyImages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGettyImages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGettyImages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GettyImages' operation.</returns>
            QueryResult<D> EndGettyImages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'OnlineMethod' operation.
            /// </summary>
            /// <param name="x">The value for the 'x' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/OnlineMethod", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/OnlineMethodResponse")]
            IAsyncResult BeginOnlineMethod(D x, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginOnlineMethod'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginOnlineMethod'.</param>
            void EndOnlineMethod(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'QueryDs3' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/QueryDs3", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/QueryDs3Response")]
            IAsyncResult BeginQueryDs3(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginQueryDs3'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginQueryDs3'.</param>
            /// <returns>The 'QueryResult' returned from the 'QueryDs3' operation.</returns>
            QueryResult<D> EndQueryDs3(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RandomNameButStillAQuery' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/RandomNameButStillAQuery", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/RandomNameButStillAQueryRespons" +
                "e")]
            IAsyncResult BeginRandomNameButStillAQuery(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRandomNameButStillAQuery'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRandomNameButStillAQuery'.</param>
            /// <returns>The 'QueryResult' returned from the 'RandomNameButStillAQuery' operation.</returns>
            QueryResult<D> EndRandomNameButStillAQuery(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RetrieveDs4' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/RetrieveDs4", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/RetrieveDs4Response")]
            IAsyncResult BeginRetrieveDs4(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRetrieveDs4'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRetrieveDs4'.</param>
            /// <returns>The 'QueryResult' returned from the 'RetrieveDs4' operation.</returns>
            QueryResult<D> EndRetrieveDs4(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RetrieveDs5' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/RetrieveDs5", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/RetrieveDs5Response")]
            IAsyncResult BeginRetrieveDs5(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRetrieveDs5'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRetrieveDs5'.</param>
            /// <returns>The 'QueryResult' returned from the 'RetrieveDs5' operation.</returns>
            QueryResult<D> EndRetrieveDs5(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SelectDs1' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios_CodeGen/SelectDs1", ReplyAction="http://tempuri.org/TestProvider_Scenarios_CodeGen/SelectDs1Response")]
            IAsyncResult BeginSelectDs1(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSelectDs1'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSelectDs1'.</param>
            /// <returns>The 'QueryResult' returned from the 'SelectDs1' operation.</returns>
            QueryResult<D> EndSelectDs1(IAsyncResult result);
        }
        
        internal sealed class TestProvider_Scenarios_CodeGenEntityContainer : EntityContainer
        {
            
            public TestProvider_Scenarios_CodeGenEntityContainer()
            {
                this.CreateEntitySet<A>(EntitySetOperations.None);
                this.CreateEntitySet<B>(EntitySetOperations.None);
                this.CreateEntitySet<C>(EntitySetOperations.None);
                this.CreateEntitySet<D>(EntitySetOperations.None);
                this.CreateEntitySet<SpecialDataTypes>(EntitySetOperations.None);
                this.CreateEntitySet<TestEntity_DataMemberBuddy>(EntitySetOperations.None);
                this.CreateEntitySet<Turkishİ2>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'Turkishİ2' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class Turkishİ2 : Entity
    {
        
        private string _data;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Turkishİ2"/> class.
        /// </summary>
        public Turkishİ2()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public string Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
