//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DbContextModels.Northwind
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Threading.Tasks;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The 'Category' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.Northwind")]
    public sealed partial class Category : Entity
    {
        
        private int _categoryID;
        
        private string _categoryName;
        
        private string _description;
        
        private byte[] _picture;
        
        private EntityCollection<Product> _products;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPictureChanging(byte[] value);
        partial void OnPictureChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Category"/> class.
        /// </summary>
        public Category()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.ValidateProperty("CategoryID", value);
                    this._categoryID = value;
                    this.RaisePropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(15)]
        public string CategoryName
        {
            get
            {
                return this._categoryName;
            }
            set
            {
                if ((this._categoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.RaiseDataMemberChanging("CategoryName");
                    this.ValidateProperty("CategoryName", value);
                    this._categoryName = value;
                    this.RaiseDataMemberChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Picture' value.
        /// </summary>
        [DataMember()]
        public byte[] Picture
        {
            get
            {
                return this._picture;
            }
            set
            {
                if ((this._picture != value))
                {
                    this.OnPictureChanging(value);
                    this.RaiseDataMemberChanging("Picture");
                    this.ValidateProperty("Picture", value);
                    this._picture = value;
                    this.RaiseDataMemberChanged("Picture");
                    this.OnPictureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Product"/> entity instances.
        /// </summary>
        [Association("Category_Product", "CategoryID", "CategoryID")]
        public EntityCollection<Product> Products
        {
            get
            {
                if ((this._products == null))
                {
                    this._products = new EntityCollection<Product>(this, "Products", this.FilterProducts, this.AttachProducts, this.DetachProducts);
                }
                return this._products;
            }
        }
        
        private void AttachProducts(Product entity)
        {
            entity.Category = this;
        }
        
        private void DetachProducts(Product entity)
        {
            entity.Category = null;
        }
        
        private bool FilterProducts(Product entity)
        {
            return (entity.CategoryID == this.CategoryID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._categoryID;
        }
    }
    
    /// <summary>
    /// The 'Customer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.Northwind")]
    public sealed partial class Customer : Entity
    {
        
        private string _address;
        
        private string _city;
        
        private string _companyName;
        
        private string _contactName;
        
        private string _contactTitle;
        
        private string _country;
        
        private string _customerID;
        
        private string _fax;
        
        private EntityCollection<Order> _orders;
        
        private string _phone;
        
        private string _postalCode;
        
        private string _region;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnContactNameChanging(string value);
        partial void OnContactNameChanged();
        partial void OnContactTitleChanging(string value);
        partial void OnContactTitleChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnCustomerIDChanging(string value);
        partial void OnCustomerIDChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class.
        /// </summary>
        public Customer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(60)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(15)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(40)]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactName' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string ContactName
        {
            get
            {
                return this._contactName;
            }
            set
            {
                if ((this._contactName != value))
                {
                    this.OnContactNameChanging(value);
                    this.RaiseDataMemberChanging("ContactName");
                    this.ValidateProperty("ContactName", value);
                    this._contactName = value;
                    this.RaiseDataMemberChanged("ContactName");
                    this.OnContactNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactTitle' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(30)]
        public string ContactTitle
        {
            get
            {
                return this._contactTitle;
            }
            set
            {
                if ((this._contactTitle != value))
                {
                    this.OnContactTitleChanging(value);
                    this.RaiseDataMemberChanging("ContactTitle");
                    this.ValidateProperty("ContactTitle", value);
                    this._contactTitle = value;
                    this.RaiseDataMemberChanged("ContactTitle");
                    this.OnContactTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(15)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(5)]
        public string CustomerID
        {
            get
            {
                return this._customerID;
            }
            set
            {
                if ((this._customerID != value))
                {
                    this.OnCustomerIDChanging(value);
                    this.ValidateProperty("CustomerID", value);
                    this._customerID = value;
                    this.RaisePropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Fax' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(24)]
        public string Fax
        {
            get
            {
                return this._fax;
            }
            set
            {
                if ((this._fax != value))
                {
                    this.OnFaxChanging(value);
                    this.RaiseDataMemberChanging("Fax");
                    this.ValidateProperty("Fax", value);
                    this._fax = value;
                    this.RaiseDataMemberChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Order"/> entity instances.
        /// </summary>
        [Association("Customer_Order", "CustomerID", "CustomerID")]
        public EntityCollection<Order> Orders
        {
            get
            {
                if ((this._orders == null))
                {
                    this._orders = new EntityCollection<Order>(this, "Orders", this.FilterOrders, this.AttachOrders, this.DetachOrders);
                }
                return this._orders;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(24)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PostalCode' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string PostalCode
        {
            get
            {
                return this._postalCode;
            }
            set
            {
                if ((this._postalCode != value))
                {
                    this.OnPostalCodeChanging(value);
                    this.RaiseDataMemberChanging("PostalCode");
                    this.ValidateProperty("PostalCode", value);
                    this._postalCode = value;
                    this.RaiseDataMemberChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Region' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(15)]
        public string Region
        {
            get
            {
                return this._region;
            }
            set
            {
                if ((this._region != value))
                {
                    this.OnRegionChanging(value);
                    this.RaiseDataMemberChanging("Region");
                    this.ValidateProperty("Region", value);
                    this._region = value;
                    this.RaiseDataMemberChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }
        
        private void AttachOrders(Order entity)
        {
            entity.Customer = this;
        }
        
        private void DetachOrders(Order entity)
        {
            entity.Customer = null;
        }
        
        private bool FilterOrders(Order entity)
        {
            return (entity.CustomerID == this.CustomerID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._customerID;
        }
    }
    
    /// <summary>
    /// The 'Order' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.Northwind")]
    public sealed partial class Order : Entity
    {
        
        private EntityRef<Customer> _customer;
        
        private string _customerID;
        
        private Nullable<int> _employeeID;
        
        private string _formattedName;
        
        private Nullable<decimal> _freight;
        
        private EntityCollection<Order_Detail> _order_Details;
        
        private Nullable<DateTime> _orderDate;
        
        private int _orderID;
        
        private Nullable<DateTime> _requiredDate;
        
        private string _shipAddress;
        
        private string _shipCity;
        
        private string _shipCountry;
        
        private string _shipName;
        
        private Nullable<DateTime> _shippedDate;
        
        private string _shipPostalCode;
        
        private string _shipRegion;
        
        private Nullable<int> _shipVia;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomerIDChanging(string value);
        partial void OnCustomerIDChanged();
        partial void OnEmployeeIDChanging(Nullable<int> value);
        partial void OnEmployeeIDChanged();
        partial void OnFormattedNameChanging(string value);
        partial void OnFormattedNameChanged();
        partial void OnFreightChanging(Nullable<decimal> value);
        partial void OnFreightChanged();
        partial void OnOrderDateChanging(Nullable<DateTime> value);
        partial void OnOrderDateChanged();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnRequiredDateChanging(Nullable<DateTime> value);
        partial void OnRequiredDateChanged();
        partial void OnShipAddressChanging(string value);
        partial void OnShipAddressChanged();
        partial void OnShipCityChanging(string value);
        partial void OnShipCityChanged();
        partial void OnShipCountryChanging(string value);
        partial void OnShipCountryChanged();
        partial void OnShipNameChanging(string value);
        partial void OnShipNameChanged();
        partial void OnShippedDateChanging(Nullable<DateTime> value);
        partial void OnShippedDateChanged();
        partial void OnShipPostalCodeChanging(string value);
        partial void OnShipPostalCodeChanged();
        partial void OnShipRegionChanging(string value);
        partial void OnShipRegionChanged();
        partial void OnShipViaChanging(Nullable<int> value);
        partial void OnShipViaChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Order"/> class.
        /// </summary>
        public Order()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Customer"/> entity.
        /// </summary>
        [Association("Customer_Order", "CustomerID", "CustomerID", IsForeignKey=true)]
        public Customer Customer
        {
            get
            {
                if ((this._customer == null))
                {
                    this._customer = new EntityRef<Customer>(this, "Customer", this.FilterCustomer);
                }
                return this._customer.Entity;
            }
            set
            {
                Customer previous = this.Customer;
                if ((previous != value))
                {
                    this.ValidateProperty("Customer", value);
                    if ((previous != null))
                    {
                        this._customer.Entity = null;
                        previous.Orders.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CustomerID = value.CustomerID;
                    }
                    else
                    {
                        this.CustomerID = default(string);
                    }
                    this._customer.Entity = value;
                    if ((value != null))
                    {
                        value.Orders.Add(this);
                    }
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(5)]
        public string CustomerID
        {
            get
            {
                return this._customerID;
            }
            set
            {
                if ((this._customerID != value))
                {
                    this.OnCustomerIDChanging(value);
                    this.RaiseDataMemberChanging("CustomerID");
                    this.ValidateProperty("CustomerID", value);
                    this._customerID = value;
                    this.RaiseDataMemberChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.RaiseDataMemberChanging("EmployeeID");
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaiseDataMemberChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FormattedName' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string FormattedName
        {
            get
            {
                return this._formattedName;
            }
            set
            {
                if ((this._formattedName != value))
                {
                    this.OnFormattedNameChanging(value);
                    this.ValidateProperty("FormattedName", value);
                    this._formattedName = value;
                    this.RaisePropertyChanged("FormattedName");
                    this.OnFormattedNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Freight' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> Freight
        {
            get
            {
                return this._freight;
            }
            set
            {
                if ((this._freight != value))
                {
                    this.OnFreightChanging(value);
                    this.RaiseDataMemberChanging("Freight");
                    this.ValidateProperty("Freight", value);
                    this._freight = value;
                    this.RaiseDataMemberChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Order_Detail"/> entity instances.
        /// </summary>
        [Association("Order_Order_Detail", "OrderID", "OrderID")]
        public EntityCollection<Order_Detail> Order_Details
        {
            get
            {
                if ((this._order_Details == null))
                {
                    this._order_Details = new EntityCollection<Order_Detail>(this, "Order_Details", this.FilterOrder_Details, this.AttachOrder_Details, this.DetachOrder_Details);
                }
                return this._order_Details;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<DateTime> OrderDate
        {
            get
            {
                return this._orderDate;
            }
            set
            {
                if ((this._orderDate != value))
                {
                    this.OnOrderDateChanging(value);
                    this.RaiseDataMemberChanging("OrderDate");
                    this.ValidateProperty("OrderDate", value);
                    this._orderDate = value;
                    this.RaiseDataMemberChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int OrderID
        {
            get
            {
                return this._orderID;
            }
            set
            {
                if ((this._orderID != value))
                {
                    this.OnOrderIDChanging(value);
                    this.ValidateProperty("OrderID", value);
                    this._orderID = value;
                    this.RaisePropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequiredDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<DateTime> RequiredDate
        {
            get
            {
                return this._requiredDate;
            }
            set
            {
                if ((this._requiredDate != value))
                {
                    this.OnRequiredDateChanging(value);
                    this.RaiseDataMemberChanging("RequiredDate");
                    this.ValidateProperty("RequiredDate", value);
                    this._requiredDate = value;
                    this.RaiseDataMemberChanged("RequiredDate");
                    this.OnRequiredDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipAddress' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(60)]
        public string ShipAddress
        {
            get
            {
                return this._shipAddress;
            }
            set
            {
                if ((this._shipAddress != value))
                {
                    this.OnShipAddressChanging(value);
                    this.RaiseDataMemberChanging("ShipAddress");
                    this.ValidateProperty("ShipAddress", value);
                    this._shipAddress = value;
                    this.RaiseDataMemberChanged("ShipAddress");
                    this.OnShipAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipCity' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(15)]
        public string ShipCity
        {
            get
            {
                return this._shipCity;
            }
            set
            {
                if ((this._shipCity != value))
                {
                    this.OnShipCityChanging(value);
                    this.RaiseDataMemberChanging("ShipCity");
                    this.ValidateProperty("ShipCity", value);
                    this._shipCity = value;
                    this.RaiseDataMemberChanged("ShipCity");
                    this.OnShipCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipCountry' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(15)]
        public string ShipCountry
        {
            get
            {
                return this._shipCountry;
            }
            set
            {
                if ((this._shipCountry != value))
                {
                    this.OnShipCountryChanging(value);
                    this.RaiseDataMemberChanging("ShipCountry");
                    this.ValidateProperty("ShipCountry", value);
                    this._shipCountry = value;
                    this.RaiseDataMemberChanged("ShipCountry");
                    this.OnShipCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipName' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(40)]
        public string ShipName
        {
            get
            {
                return this._shipName;
            }
            set
            {
                if ((this._shipName != value))
                {
                    this.OnShipNameChanging(value);
                    this.RaiseDataMemberChanging("ShipName");
                    this.ValidateProperty("ShipName", value);
                    this._shipName = value;
                    this.RaiseDataMemberChanged("ShipName");
                    this.OnShipNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShippedDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<DateTime> ShippedDate
        {
            get
            {
                return this._shippedDate;
            }
            set
            {
                if ((this._shippedDate != value))
                {
                    this.OnShippedDateChanging(value);
                    this.RaiseDataMemberChanging("ShippedDate");
                    this.ValidateProperty("ShippedDate", value);
                    this._shippedDate = value;
                    this.RaiseDataMemberChanged("ShippedDate");
                    this.OnShippedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipPostalCode' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string ShipPostalCode
        {
            get
            {
                return this._shipPostalCode;
            }
            set
            {
                if ((this._shipPostalCode != value))
                {
                    this.OnShipPostalCodeChanging(value);
                    this.RaiseDataMemberChanging("ShipPostalCode");
                    this.ValidateProperty("ShipPostalCode", value);
                    this._shipPostalCode = value;
                    this.RaiseDataMemberChanged("ShipPostalCode");
                    this.OnShipPostalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipRegion' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(15)]
        public string ShipRegion
        {
            get
            {
                return this._shipRegion;
            }
            set
            {
                if ((this._shipRegion != value))
                {
                    this.OnShipRegionChanging(value);
                    this.RaiseDataMemberChanging("ShipRegion");
                    this.ValidateProperty("ShipRegion", value);
                    this._shipRegion = value;
                    this.RaiseDataMemberChanged("ShipRegion");
                    this.OnShipRegionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipVia' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ShipVia
        {
            get
            {
                return this._shipVia;
            }
            set
            {
                if ((this._shipVia != value))
                {
                    this.OnShipViaChanging(value);
                    this.RaiseDataMemberChanging("ShipVia");
                    this.ValidateProperty("ShipVia", value);
                    this._shipVia = value;
                    this.RaiseDataMemberChanged("ShipVia");
                    this.OnShipViaChanged();
                }
            }
        }
        
        private bool FilterCustomer(Customer entity)
        {
            return (entity.CustomerID == this.CustomerID);
        }
        
        private void AttachOrder_Details(Order_Detail entity)
        {
            entity.Order = this;
        }
        
        private void DetachOrder_Details(Order_Detail entity)
        {
            entity.Order = null;
        }
        
        private bool FilterOrder_Details(Order_Detail entity)
        {
            return (entity.OrderID == this.OrderID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._orderID;
        }
    }
    
    /// <summary>
    /// The 'Order_Detail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.Northwind")]
    public sealed partial class Order_Detail : Entity
    {
        
        private float _discount;
        
        private EntityRef<Order> _order;
        
        private int _orderID;
        
        private EntityRef<Product> _product;
        
        private int _productID;
        
        private short _quantity;
        
        private decimal _unitPrice;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDiscountChanging(float value);
        partial void OnDiscountChanged();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnQuantityChanging(short value);
        partial void OnQuantityChanged();
        partial void OnUnitPriceChanging(decimal value);
        partial void OnUnitPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Order_Detail"/> class.
        /// </summary>
        public Order_Detail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Discount' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public float Discount
        {
            get
            {
                return this._discount;
            }
            set
            {
                if ((this._discount != value))
                {
                    this.OnDiscountChanging(value);
                    this.RaiseDataMemberChanging("Discount");
                    this.ValidateProperty("Discount", value);
                    this._discount = value;
                    this.RaiseDataMemberChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Order"/> entity.
        /// </summary>
        [Association("Order_Order_Detail", "OrderID", "OrderID", IsForeignKey=true)]
        public Order Order
        {
            get
            {
                if ((this._order == null))
                {
                    this._order = new EntityRef<Order>(this, "Order", this.FilterOrder);
                }
                return this._order.Entity;
            }
            set
            {
                Order previous = this.Order;
                if ((previous != value))
                {
                    this.ValidateProperty("Order", value);
                    if ((previous != null))
                    {
                        this._order.Entity = null;
                        previous.Order_Details.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OrderID = value.OrderID;
                    }
                    else
                    {
                        this.OrderID = default(int);
                    }
                    this._order.Entity = value;
                    if ((value != null))
                    {
                        value.Order_Details.Add(this);
                    }
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int OrderID
        {
            get
            {
                return this._orderID;
            }
            set
            {
                if ((this._orderID != value))
                {
                    this.OnOrderIDChanging(value);
                    this.RaiseDataMemberChanging("OrderID");
                    this.ValidateProperty("OrderID", value);
                    this._orderID = value;
                    this.RaiseDataMemberChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_Order_Detail", "ProductID", "ProductID", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.Order_Details.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProductID = value.ProductID;
                    }
                    else
                    {
                        this.ProductID = default(int);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.Order_Details.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public short Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitPrice' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal UnitPrice
        {
            get
            {
                return this._unitPrice;
            }
            set
            {
                if ((this._unitPrice != value))
                {
                    this.OnUnitPriceChanging(value);
                    this.RaiseDataMemberChanging("UnitPrice");
                    this.ValidateProperty("UnitPrice", value);
                    this._unitPrice = value;
                    this.RaiseDataMemberChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }
        
        private bool FilterOrder(Order entity)
        {
            return (entity.OrderID == this.OrderID);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductID == this.ProductID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._orderID, this._productID);
        }
    }
    
    /// <summary>
    /// The 'Product' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.Northwind")]
    public sealed partial class Product : Entity
    {
        
        private EntityRef<Category> _category;
        
        private Nullable<int> _categoryID;
        
        private string _categoryName;
        
        private bool _discontinued;
        
        private EntityCollection<Order_Detail> _order_Details;
        
        private int _productID;
        
        private string _productName;
        
        private string _quantityPerUnit;
        
        private Nullable<short> _reorderLevel;
        
        private string _resolveMethod;
        
        private Nullable<int> _supplierID;
        
        private string _supplierName;
        
        private Nullable<decimal> _unitPrice;
        
        private Nullable<short> _unitsInStock;
        
        private Nullable<short> _unitsOnOrder;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIDChanging(Nullable<int> value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnDiscontinuedChanging(bool value);
        partial void OnDiscontinuedChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnQuantityPerUnitChanging(string value);
        partial void OnQuantityPerUnitChanged();
        partial void OnReorderLevelChanging(Nullable<short> value);
        partial void OnReorderLevelChanged();
        partial void OnResolveMethodChanging(string value);
        partial void OnResolveMethodChanged();
        partial void OnSupplierIDChanging(Nullable<int> value);
        partial void OnSupplierIDChanged();
        partial void OnSupplierNameChanging(string value);
        partial void OnSupplierNameChanged();
        partial void OnUnitPriceChanging(Nullable<decimal> value);
        partial void OnUnitPriceChanged();
        partial void OnUnitsInStockChanging(Nullable<short> value);
        partial void OnUnitsInStockChanged();
        partial void OnUnitsOnOrderChanging(Nullable<short> value);
        partial void OnUnitsOnOrderChanged();
        partial void OnDiscontinueProductInvoking();
        partial void OnDiscontinueProductInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Product"/> class.
        /// </summary>
        public Product()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Category"/> entity.
        /// </summary>
        [Association("Category_Product", "CategoryID", "CategoryID", IsForeignKey=true)]
        public Category Category
        {
            get
            {
                if ((this._category == null))
                {
                    this._category = new EntityRef<Category>(this, "Category", this.FilterCategory);
                }
                return this._category.Entity;
            }
            set
            {
                Category previous = this.Category;
                if ((previous != value))
                {
                    this.ValidateProperty("Category", value);
                    if ((previous != null))
                    {
                        this._category.Entity = null;
                        previous.Products.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CategoryID = value.CategoryID;
                    }
                    else
                    {
                        this.CategoryID = default(Nullable<int>);
                    }
                    this._category.Entity = value;
                    if ((value != null))
                    {
                        value.Products.Add(this);
                    }
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.RaiseDataMemberChanging("CategoryID");
                    this.ValidateProperty("CategoryID", value);
                    this._categoryID = value;
                    this.RaiseDataMemberChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryName' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [StringLength(15)]
        public string CategoryName
        {
            get
            {
                return this._categoryName;
            }
            set
            {
                if ((this._categoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.ValidateProperty("CategoryName", value);
                    this._categoryName = value;
                    this.RaisePropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Discontinued' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public bool Discontinued
        {
            get
            {
                return this._discontinued;
            }
            set
            {
                if ((this._discontinued != value))
                {
                    this.OnDiscontinuedChanging(value);
                    this.RaiseDataMemberChanging("Discontinued");
                    this.ValidateProperty("Discontinued", value);
                    this._discontinued = value;
                    this.RaiseDataMemberChanged("Discontinued");
                    this.OnDiscontinuedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Order_Detail"/> entity instances.
        /// </summary>
        [Association("Product_Order_Detail", "ProductID", "ProductID")]
        public EntityCollection<Order_Detail> Order_Details
        {
            get
            {
                if ((this._order_Details == null))
                {
                    this._order_Details = new EntityCollection<Order_Detail>(this, "Order_Details", this.FilterOrder_Details, this.AttachOrder_Details, this.DetachOrder_Details);
                }
                return this._order_Details;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaisePropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(40)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QuantityPerUnit' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string QuantityPerUnit
        {
            get
            {
                return this._quantityPerUnit;
            }
            set
            {
                if ((this._quantityPerUnit != value))
                {
                    this.OnQuantityPerUnitChanging(value);
                    this.RaiseDataMemberChanging("QuantityPerUnit");
                    this.ValidateProperty("QuantityPerUnit", value);
                    this._quantityPerUnit = value;
                    this.RaiseDataMemberChanged("QuantityPerUnit");
                    this.OnQuantityPerUnitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReorderLevel' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<short> ReorderLevel
        {
            get
            {
                return this._reorderLevel;
            }
            set
            {
                if ((this._reorderLevel != value))
                {
                    this.OnReorderLevelChanging(value);
                    this.RaiseDataMemberChanging("ReorderLevel");
                    this.ValidateProperty("ReorderLevel", value);
                    this._reorderLevel = value;
                    this.RaiseDataMemberChanged("ReorderLevel");
                    this.OnReorderLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResolveMethod' value.
        /// </summary>
        [DataMember()]
        public string ResolveMethod
        {
            get
            {
                return this._resolveMethod;
            }
            set
            {
                if ((this._resolveMethod != value))
                {
                    this.OnResolveMethodChanging(value);
                    this.RaiseDataMemberChanging("ResolveMethod");
                    this.ValidateProperty("ResolveMethod", value);
                    this._resolveMethod = value;
                    this.RaiseDataMemberChanged("ResolveMethod");
                    this.OnResolveMethodChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SupplierID' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> SupplierID
        {
            get
            {
                return this._supplierID;
            }
            set
            {
                if ((this._supplierID != value))
                {
                    this.OnSupplierIDChanging(value);
                    this.RaiseDataMemberChanging("SupplierID");
                    this.ValidateProperty("SupplierID", value);
                    this._supplierID = value;
                    this.RaiseDataMemberChanged("SupplierID");
                    this.OnSupplierIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SupplierName' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string SupplierName
        {
            get
            {
                return this._supplierName;
            }
            set
            {
                if ((this._supplierName != value))
                {
                    this.OnSupplierNameChanging(value);
                    this.ValidateProperty("SupplierName", value);
                    this._supplierName = value;
                    this.RaisePropertyChanged("SupplierName");
                    this.OnSupplierNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitPrice' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> UnitPrice
        {
            get
            {
                return this._unitPrice;
            }
            set
            {
                if ((this._unitPrice != value))
                {
                    this.OnUnitPriceChanging(value);
                    this.RaiseDataMemberChanging("UnitPrice");
                    this.ValidateProperty("UnitPrice", value);
                    this._unitPrice = value;
                    this.RaiseDataMemberChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitsInStock' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<short> UnitsInStock
        {
            get
            {
                return this._unitsInStock;
            }
            set
            {
                if ((this._unitsInStock != value))
                {
                    this.OnUnitsInStockChanging(value);
                    this.RaiseDataMemberChanging("UnitsInStock");
                    this.ValidateProperty("UnitsInStock", value);
                    this._unitsInStock = value;
                    this.RaiseDataMemberChanged("UnitsInStock");
                    this.OnUnitsInStockChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitsOnOrder' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<short> UnitsOnOrder
        {
            get
            {
                return this._unitsOnOrder;
            }
            set
            {
                if ((this._unitsOnOrder != value))
                {
                    this.OnUnitsOnOrderChanging(value);
                    this.RaiseDataMemberChanging("UnitsOnOrder");
                    this.ValidateProperty("UnitsOnOrder", value);
                    this._unitsOnOrder = value;
                    this.RaiseDataMemberChanged("UnitsOnOrder");
                    this.OnUnitsOnOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'DiscontinueProduct' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsDiscontinueProductInvoked
        {
            get
            {
                return base.IsActionInvoked("DiscontinueProduct");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'DiscontinueProduct' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanDiscontinueProduct
        {
            get
            {
                return base.CanInvokeAction("DiscontinueProduct");
            }
        }
        
        private bool FilterCategory(Category entity)
        {
            return (entity.CategoryID == this.CategoryID);
        }
        
        private void AttachOrder_Details(Order_Detail entity)
        {
            entity.Product = this;
        }
        
        private void DetachOrder_Details(Order_Detail entity)
        {
            entity.Product = null;
        }
        
        private bool FilterOrder_Details(Order_Detail entity)
        {
            return (entity.ProductID == this.ProductID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productID;
        }
        
        /// <summary>
        /// Invokes the 'DiscontinueProduct' action on this entity.
        /// </summary>
        [EntityAction("DiscontinueProduct", AllowMultipleInvocations=false)]
        public void DiscontinueProduct()
        {
            this.OnDiscontinueProductInvoking();
            base.InvokeAction("DiscontinueProduct");
            this.OnDiscontinueProductInvoked();
        }
    }
    
    /// <summary>
    /// The 'ProductInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.Northwind")]
    public sealed partial class ProductInfo : Entity
    {
        
        private string _categoryName;
        
        private int _productID;
        
        private string _productName;
        
        private string _supplierName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnSupplierNameChanging(string value);
        partial void OnSupplierNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInfo"/> class.
        /// </summary>
        public ProductInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryName' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string CategoryName
        {
            get
            {
                return this._categoryName;
            }
            set
            {
                if ((this._categoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.ValidateProperty("CategoryName", value);
                    this._categoryName = value;
                    this.RaisePropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaisePropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SupplierName' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string SupplierName
        {
            get
            {
                return this._supplierName;
            }
            set
            {
                if ((this._supplierName != value))
                {
                    this.OnSupplierNameChanging(value);
                    this.ValidateProperty("SupplierName", value);
                    this._supplierName = value;
                    this.RaisePropertyChanged("SupplierName");
                    this.OnSupplierNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productID;
        }
    }
    
    /// <summary>
    /// The 'Region' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.Northwind")]
    public sealed partial class Region : Entity
    {
        
        private string _regionDescription;
        
        private int _regionID;
        
        private EntityCollection<Territory> _territories;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRegionDescriptionChanging(string value);
        partial void OnRegionDescriptionChanged();
        partial void OnRegionIDChanging(int value);
        partial void OnRegionIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Region"/> class.
        /// </summary>
        public Region()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'RegionDescription' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string RegionDescription
        {
            get
            {
                return this._regionDescription;
            }
            set
            {
                if ((this._regionDescription != value))
                {
                    this.OnRegionDescriptionChanging(value);
                    this.RaiseDataMemberChanging("RegionDescription");
                    this.ValidateProperty("RegionDescription", value);
                    this._regionDescription = value;
                    this.RaiseDataMemberChanged("RegionDescription");
                    this.OnRegionDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RegionID
        {
            get
            {
                return this._regionID;
            }
            set
            {
                if ((this._regionID != value))
                {
                    this.OnRegionIDChanging(value);
                    this.ValidateProperty("RegionID", value);
                    this._regionID = value;
                    this.RaisePropertyChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Territory"/> entity instances.
        /// </summary>
        [Association("Region_Territory", "RegionID", "RegionID")]
        [Composition()]
        public EntityCollection<Territory> Territories
        {
            get
            {
                if ((this._territories == null))
                {
                    this._territories = new EntityCollection<Territory>(this, "Territories", this.FilterTerritories, this.AttachTerritories, this.DetachTerritories);
                }
                return this._territories;
            }
        }
        
        private void AttachTerritories(Territory entity)
        {
            entity.Region = this;
        }
        
        private void DetachTerritories(Territory entity)
        {
            entity.Region = null;
        }
        
        private bool FilterTerritories(Territory entity)
        {
            return (entity.RegionID == this.RegionID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._regionID;
        }
    }
    
    /// <summary>
    /// The 'Territory' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataTests.Northwind")]
    public sealed partial class Territory : Entity
    {
        
        private EntityRef<Region> _region;
        
        private int _regionID;
        
        private string _territoryDescription;
        
        private string _territoryID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRegionIDChanging(int value);
        partial void OnRegionIDChanged();
        partial void OnTerritoryDescriptionChanging(string value);
        partial void OnTerritoryDescriptionChanged();
        partial void OnTerritoryIDChanging(string value);
        partial void OnTerritoryIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Territory"/> class.
        /// </summary>
        public Territory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Region"/> entity.
        /// </summary>
        [Association("Region_Territory", "RegionID", "RegionID", IsForeignKey=true)]
        public Region Region
        {
            get
            {
                if ((this._region == null))
                {
                    this._region = new EntityRef<Region>(this, "Region", this.FilterRegion);
                }
                return this._region.Entity;
            }
            set
            {
                Region previous = this.Region;
                if ((previous != value))
                {
                    this.ValidateProperty("Region", value);
                    if ((previous != null))
                    {
                        this._region.Entity = null;
                        previous.Territories.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RegionID = value.RegionID;
                    }
                    else
                    {
                        this.RegionID = default(int);
                    }
                    this._region.Entity = value;
                    if ((value != null))
                    {
                        value.Territories.Add(this);
                    }
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int RegionID
        {
            get
            {
                return this._regionID;
            }
            set
            {
                if ((this._regionID != value))
                {
                    this.OnRegionIDChanging(value);
                    this.RaiseDataMemberChanging("RegionID");
                    this.ValidateProperty("RegionID", value);
                    this._regionID = value;
                    this.RaiseDataMemberChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TerritoryDescription' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string TerritoryDescription
        {
            get
            {
                return this._territoryDescription;
            }
            set
            {
                if ((this._territoryDescription != value))
                {
                    this.OnTerritoryDescriptionChanging(value);
                    this.RaiseDataMemberChanging("TerritoryDescription");
                    this.ValidateProperty("TerritoryDescription", value);
                    this._territoryDescription = value;
                    this.RaiseDataMemberChanged("TerritoryDescription");
                    this.OnTerritoryDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TerritoryID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string TerritoryID
        {
            get
            {
                return this._territoryID;
            }
            set
            {
                if ((this._territoryID != value))
                {
                    this.OnTerritoryIDChanging(value);
                    this.ValidateProperty("TerritoryID", value);
                    this._territoryID = value;
                    this.RaisePropertyChanged("TerritoryID");
                    this.OnTerritoryIDChanged();
                }
            }
        }
        
        private bool FilterRegion(Region entity)
        {
            return (entity.RegionID == this.RegionID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._territoryID;
        }
    }
}
namespace TestDomainServices.DbCtx
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.Threading.Tasks;
    using DbContextModels.Northwind;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'Northwind' DomainService.
    /// </summary>
    public sealed partial class Northwind : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Northwind"/> class.
        /// </summary>
        public Northwind() : 
                this(new Uri("TestDomainServices-DbCtx-Northwind.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Northwind"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The Northwind service URI.</param>
        public Northwind(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(INorthwindContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Northwind"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public Northwind(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Category"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        /// </summary>
        public EntitySet<Category> Categories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Category>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Customer"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        /// </summary>
        public EntitySet<Customer> Customers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Customer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Order_Detail"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        /// </summary>
        public EntitySet<Order_Detail> Order_Details
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Order_Detail>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Order"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        /// </summary>
        public EntitySet<Order> Orders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Order>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Product"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        /// </summary>
        public EntitySet<Product> Products
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Product>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProductInfo"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        /// </summary>
        public EntitySet<ProductInfo> ProductInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProductInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Region"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        /// </summary>
        public EntitySet<Region> Regions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Region>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Category"/> entity instances using the 'GetCategories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Category"/> entity instances.</returns>
        public EntityQuery<Category> GetCategoriesQuery()
        {
            this.ValidateMethod("GetCategoriesQuery", null);
            return base.CreateQuery<Category>("GetCategories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Customer"/> entity instances using the 'GetCustomers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Customer"/> entity instances.</returns>
        public EntityQuery<Customer> GetCustomersQuery()
        {
            this.ValidateMethod("GetCustomersQuery", null);
            return base.CreateQuery<Customer>("GetCustomers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Order_Detail"/> entity instances using the 'GetOrderDetails' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Order_Detail"/> entity instances.</returns>
        public EntityQuery<Order_Detail> GetOrderDetailsQuery()
        {
            this.ValidateMethod("GetOrderDetailsQuery", null);
            return base.CreateQuery<Order_Detail>("GetOrderDetails", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Order"/> entity instances using the 'GetOrders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Order"/> entity instances.</returns>
        public EntityQuery<Order> GetOrdersQuery()
        {
            this.ValidateMethod("GetOrdersQuery", null);
            return base.CreateQuery<Order>("GetOrders", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProductById' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductByIdQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetProductByIdQuery", parameters);
            return base.CreateQuery<Product>("GetProductById", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductInfo"/> entity instances using the 'GetProductInfos' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductInfo"/> entity instances.</returns>
        public EntityQuery<ProductInfo> GetProductInfosQuery()
        {
            this.ValidateMethod("GetProductInfosQuery", null);
            return base.CreateQuery<ProductInfo>("GetProductInfos", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductsQuery()
        {
            this.ValidateMethod("GetProductsQuery", null);
            return base.CreateQuery<Product>("GetProducts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Region"/> entity instances using the 'GetRegionById' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Region"/> entity instances.</returns>
        public EntityQuery<Region> GetRegionByIdQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetRegionByIdQuery", parameters);
            return base.CreateQuery<Region>("GetRegionById", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Region"/> entity instances using the 'GetRegions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Region"/> entity instances.</returns>
        public EntityQuery<Region> GetRegionsQuery()
        {
            this.ValidateMethod("GetRegionsQuery", null);
            return base.CreateQuery<Region>("GetRegions", null, false, true);
        }
        
        /// <summary>
        /// Invokes the 'DiscontinueProduct' method of the specified <see cref="Product"/> entity.
        /// </summary>
        /// <param name="product">The <see cref="Product"/> entity instance.</param>
        public void DiscontinueProduct(Product product)
        {
            product.DiscontinueProduct();
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new NorthwindEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'Northwind' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface INorthwindContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCategories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Northwind/GetCategories", ReplyAction="http://tempuri.org/Northwind/GetCategoriesResponse")]
            IAsyncResult BeginGetCategories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCategories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCategories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCategories' operation.</returns>
            QueryResult<Category> EndGetCategories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Northwind/GetCustomers", ReplyAction="http://tempuri.org/Northwind/GetCustomersResponse")]
            IAsyncResult BeginGetCustomers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomers' operation.</returns>
            QueryResult<Customer> EndGetCustomers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrderDetails' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Northwind/GetOrderDetails", ReplyAction="http://tempuri.org/Northwind/GetOrderDetailsResponse")]
            IAsyncResult BeginGetOrderDetails(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrderDetails'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrderDetails'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrderDetails' operation.</returns>
            QueryResult<Order_Detail> EndGetOrderDetails(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Northwind/GetOrders", ReplyAction="http://tempuri.org/Northwind/GetOrdersResponse")]
            IAsyncResult BeginGetOrders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrders' operation.</returns>
            QueryResult<Order> EndGetOrders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductById' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Northwind/GetProductById", ReplyAction="http://tempuri.org/Northwind/GetProductByIdResponse")]
            IAsyncResult BeginGetProductById(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductById' operation.</returns>
            QueryResult<Product> EndGetProductById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductInfos' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Northwind/GetProductInfos", ReplyAction="http://tempuri.org/Northwind/GetProductInfosResponse")]
            IAsyncResult BeginGetProductInfos(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductInfos'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductInfos'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductInfos' operation.</returns>
            QueryResult<ProductInfo> EndGetProductInfos(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Northwind/GetProducts", ReplyAction="http://tempuri.org/Northwind/GetProductsResponse")]
            IAsyncResult BeginGetProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProducts' operation.</returns>
            QueryResult<Product> EndGetProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegionById' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Northwind/GetRegionById", ReplyAction="http://tempuri.org/Northwind/GetRegionByIdResponse")]
            IAsyncResult BeginGetRegionById(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegionById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegionById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRegionById' operation.</returns>
            QueryResult<Region> EndGetRegionById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Northwind/GetRegions", ReplyAction="http://tempuri.org/Northwind/GetRegionsResponse")]
            IAsyncResult BeginGetRegions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRegions' operation.</returns>
            QueryResult<Region> EndGetRegions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Northwind/SubmitChanges", ReplyAction="http://tempuri.org/Northwind/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class NorthwindEntityContainer : EntityContainer
        {
            
            public NorthwindEntityContainer()
            {
                this.CreateEntitySet<Category>(EntitySetOperations.All);
                this.CreateEntitySet<Customer>(EntitySetOperations.All);
                this.CreateEntitySet<Order>(EntitySetOperations.All);
                this.CreateEntitySet<Order_Detail>(EntitySetOperations.All);
                this.CreateEntitySet<Product>(EntitySetOperations.All);
                this.CreateEntitySet<ProductInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<Region>(EntitySetOperations.All);
                this.CreateEntitySet<Territory>(EntitySetOperations.All);
            }
        }
    }
}
