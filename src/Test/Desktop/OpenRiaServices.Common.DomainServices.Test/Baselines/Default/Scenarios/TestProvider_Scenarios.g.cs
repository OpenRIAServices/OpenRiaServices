//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestDomainServices
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Xml.Linq;
    using CustomNamespace;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    using TestDomainServices.Saleãƒ†;
    
    
    /// <summary>
    /// The 'A' entity class.
    /// </summary>
    // The following attributes were not generated:
    // 
    // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
    // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsObjectValid' on type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'.
    // [CustomValidationAttribute(typeof(TestDomainServices.ServerOnlyValidator), "IsObjectValid")]
    // 
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class A : Entity
    {
        
        private EntityRef<B> _b;
        
        private int _bid1;
        
        private int _bid2;
        
        private int _id;
        
        private string _readOnlyData_NoReadOnlyAttribute;
        
        private string _readOnlyData_NoSetter;
        
        private string _readOnlyData_WithSetter;
        
        private string _requiredString;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBID1Changing(int value);
        partial void OnBID1Changed();
        partial void OnBID2Changing(int value);
        partial void OnBID2Changed();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnReadOnlyData_NoReadOnlyAttributeChanging(string value);
        partial void OnReadOnlyData_NoReadOnlyAttributeChanged();
        partial void OnReadOnlyData_NoSetterChanging(string value);
        partial void OnReadOnlyData_NoSetterChanged();
        partial void OnReadOnlyData_WithSetterChanging(string value);
        partial void OnReadOnlyData_WithSetterChanged();
        partial void OnRequiredStringChanging(string value);
        partial void OnRequiredStringChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="A"/> class.
        /// </summary>
        public A()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="B"/> entity.
        /// </summary>
        [Association("A_B", "BID1, BID2", "ID1, ID2", IsForeignKey=true)]
        public B B
        {
            get
            {
                if ((this._b == null))
                {
                    this._b = new EntityRef<B>(this, "B", this.FilterB);
                }
                return this._b.Entity;
            }
            set
            {
                B previous = this.B;
                if ((previous != value))
                {
                    this.ValidateProperty("B", value);
                    if ((value != null))
                    {
                        this.BID1 = value.ID1;
                        this.BID2 = value.ID2;
                    }
                    else
                    {
                        this.BID1 = default(int);
                        this.BID2 = default(int);
                    }
                    this._b.Entity = value;
                    this.RaisePropertyChanged("B");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BID1' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int BID1
        {
            get
            {
                return this._bid1;
            }
            set
            {
                if ((this._bid1 != value))
                {
                    this.OnBID1Changing(value);
                    this.RaiseDataMemberChanging("BID1");
                    this.ValidateProperty("BID1", value);
                    this._bid1 = value;
                    this.RaiseDataMemberChanged("BID1");
                    this.OnBID1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BID2' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int BID2
        {
            get
            {
                return this._bid2;
            }
            set
            {
                if ((this._bid2 != value))
                {
                    this.OnBID2Changing(value);
                    this.RaiseDataMemberChanging("BID2");
                    this.ValidateProperty("BID2", value);
                    this._bid2 = value;
                    this.RaiseDataMemberChanged("BID2");
                    this.OnBID2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyData_NoReadOnlyAttribute' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string ReadOnlyData_NoReadOnlyAttribute
        {
            get
            {
                return this._readOnlyData_NoReadOnlyAttribute;
            }
            set
            {
                if ((this._readOnlyData_NoReadOnlyAttribute != value))
                {
                    this.OnReadOnlyData_NoReadOnlyAttributeChanging(value);
                    this.ValidateProperty("ReadOnlyData_NoReadOnlyAttribute", value);
                    this._readOnlyData_NoReadOnlyAttribute = value;
                    this.RaisePropertyChanged("ReadOnlyData_NoReadOnlyAttribute");
                    this.OnReadOnlyData_NoReadOnlyAttributeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyData_NoSetter' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string ReadOnlyData_NoSetter
        {
            get
            {
                return this._readOnlyData_NoSetter;
            }
            set
            {
                if ((this._readOnlyData_NoSetter != value))
                {
                    this.OnReadOnlyData_NoSetterChanging(value);
                    this.ValidateProperty("ReadOnlyData_NoSetter", value);
                    this._readOnlyData_NoSetter = value;
                    this.RaisePropertyChanged("ReadOnlyData_NoSetter");
                    this.OnReadOnlyData_NoSetterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyData_WithSetter' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string ReadOnlyData_WithSetter
        {
            get
            {
                return this._readOnlyData_WithSetter;
            }
            set
            {
                if ((this._readOnlyData_WithSetter != value))
                {
                    this.OnReadOnlyData_WithSetterChanging(value);
                    this.ValidateProperty("ReadOnlyData_WithSetter", value);
                    this._readOnlyData_WithSetter = value;
                    this.RaisePropertyChanged("ReadOnlyData_WithSetter");
                    this.OnReadOnlyData_WithSetterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequiredString' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsStringValid' on type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'.
        // [CustomValidationAttribute(typeof(TestDomainServices.ServerOnlyValidator), "IsStringValid")]
        // 
        // - The validation attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' contains ErrorMessageResourceName='NonExistentProperty' which was not found on declared ErrorMessageResourceType 'System.String'.
        // [StringLengthAttribute(1234, ErrorMessageResourceName = "NonExistentProperty", ErrorMessageResourceType = typeof(System.String))]
        // 
        [Custom()]
        [DataMember()]
        [Editable(true)]
        [Required()]
        public string RequiredString
        {
            get
            {
                return this._requiredString;
            }
            set
            {
                if ((this._requiredString != value))
                {
                    this.OnRequiredStringChanging(value);
                    this.RaiseDataMemberChanging("RequiredString");
                    this.ValidateProperty("RequiredString", value);
                    this._requiredString = value;
                    this.RaiseDataMemberChanged("RequiredString");
                    this.OnRequiredStringChanged();
                }
            }
        }
        
        private bool FilterB(B entity)
        {
            return ((entity.ID1 == this.BID1) 
                        && (entity.ID2 == this.BID2));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'B' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class B : Entity
    {
        
        private EntityCollection<C> _cs;
        
        private int _id1;
        
        private int _id2;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnID1Changing(int value);
        partial void OnID1Changed();
        partial void OnID2Changing(int value);
        partial void OnID2Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="B"/> class.
        /// </summary>
        public B()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="C"/> entity instances.
        /// </summary>
        [Association("B_C", "ID1, ID2", "BID1, BID2")]
        [Display(Description="Cs")]
        public EntityCollection<C> Cs
        {
            get
            {
                if ((this._cs == null))
                {
                    this._cs = new EntityCollection<C>(this, "Cs", this.FilterCs);
                }
                return this._cs;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID1' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID1
        {
            get
            {
                return this._id1;
            }
            set
            {
                if ((this._id1 != value))
                {
                    this.OnID1Changing(value);
                    this.ValidateProperty("ID1", value);
                    this._id1 = value;
                    this.RaisePropertyChanged("ID1");
                    this.OnID1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID2' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID2
        {
            get
            {
                return this._id2;
            }
            set
            {
                if ((this._id2 != value))
                {
                    this.OnID2Changing(value);
                    this.ValidateProperty("ID2", value);
                    this._id2 = value;
                    this.RaisePropertyChanged("ID2");
                    this.OnID2Changed();
                }
            }
        }
        
        private bool FilterCs(C entity)
        {
            return ((entity.BID1 == this.ID1) 
                        && (entity.BID2 == this.ID2));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._id1, this._id2);
        }
    }
    
    /// <summary>
    /// The 'C' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class C : Entity
    {
        
        private int _bid1;
        
        private int _bid2;
        
        private EntityRef<D> _d_Ref1;
        
        private EntityRef<D> _d_Ref2;
        
        private int _did_Ref1;
        
        private int _did_Ref2;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBID1Changing(int value);
        partial void OnBID1Changed();
        partial void OnBID2Changing(int value);
        partial void OnBID2Changed();
        partial void OnDID_Ref1Changing(int value);
        partial void OnDID_Ref1Changed();
        partial void OnDID_Ref2Changing(int value);
        partial void OnDID_Ref2Changed();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="C"/> class.
        /// </summary>
        public C()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BID1' value.
        /// </summary>
        [DataMember()]
        public int BID1
        {
            get
            {
                return this._bid1;
            }
            set
            {
                if ((this._bid1 != value))
                {
                    this.OnBID1Changing(value);
                    this.RaiseDataMemberChanging("BID1");
                    this.ValidateProperty("BID1", value);
                    this._bid1 = value;
                    this.RaiseDataMemberChanged("BID1");
                    this.OnBID1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BID2' value.
        /// </summary>
        [DataMember()]
        public int BID2
        {
            get
            {
                return this._bid2;
            }
            set
            {
                if ((this._bid2 != value))
                {
                    this.OnBID2Changing(value);
                    this.RaiseDataMemberChanging("BID2");
                    this.ValidateProperty("BID2", value);
                    this._bid2 = value;
                    this.RaiseDataMemberChanged("BID2");
                    this.OnBID2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="D"/> entity.
        /// </summary>
        [Association("C_D_Ref1", "DID_Ref1", "ID", IsForeignKey=true)]
        [Display(Description="D_Ref1")]
        public D D_Ref1
        {
            get
            {
                if ((this._d_Ref1 == null))
                {
                    this._d_Ref1 = new EntityRef<D>(this, "D_Ref1", this.FilterD_Ref1);
                }
                return this._d_Ref1.Entity;
            }
            set
            {
                D previous = this.D_Ref1;
                if ((previous != value))
                {
                    this.ValidateProperty("D_Ref1", value);
                    if ((previous != null))
                    {
                        this._d_Ref1.Entity = null;
                        previous.C = null;
                    }
                    if ((value != null))
                    {
                        this.DID_Ref1 = value.ID;
                    }
                    else
                    {
                        this.DID_Ref1 = default(int);
                    }
                    this._d_Ref1.Entity = value;
                    if ((value != null))
                    {
                        value.C = this;
                    }
                    this.RaisePropertyChanged("D_Ref1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="D"/> entity.
        /// </summary>
        [Association("C_D_Ref2", "DID_Ref2", "ID", IsForeignKey=true)]
        public D D_Ref2
        {
            get
            {
                if ((this._d_Ref2 == null))
                {
                    this._d_Ref2 = new EntityRef<D>(this, "D_Ref2", this.FilterD_Ref2);
                }
                return this._d_Ref2.Entity;
            }
            set
            {
                D previous = this.D_Ref2;
                if ((previous != value))
                {
                    this.ValidateProperty("D_Ref2", value);
                    if ((value != null))
                    {
                        this.DID_Ref2 = value.ID;
                    }
                    else
                    {
                        this.DID_Ref2 = default(int);
                    }
                    this._d_Ref2.Entity = value;
                    this.RaisePropertyChanged("D_Ref2");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DID_Ref1' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DID_Ref1
        {
            get
            {
                return this._did_Ref1;
            }
            set
            {
                if ((this._did_Ref1 != value))
                {
                    this.OnDID_Ref1Changing(value);
                    this.RaiseDataMemberChanging("DID_Ref1");
                    this.ValidateProperty("DID_Ref1", value);
                    this._did_Ref1 = value;
                    this.RaiseDataMemberChanged("DID_Ref1");
                    this.OnDID_Ref1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DID_Ref2' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DID_Ref2
        {
            get
            {
                return this._did_Ref2;
            }
            set
            {
                if ((this._did_Ref2 != value))
                {
                    this.OnDID_Ref2Changing(value);
                    this.RaiseDataMemberChanging("DID_Ref2");
                    this.ValidateProperty("DID_Ref2", value);
                    this._did_Ref2 = value;
                    this.RaiseDataMemberChanged("DID_Ref2");
                    this.OnDID_Ref2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        private bool FilterD_Ref1(D entity)
        {
            return (entity.ID == this.DID_Ref1);
        }
        
        private bool FilterD_Ref2(D entity)
        {
            return (entity.ID == this.DID_Ref2);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Cart' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class Cart : Entity
    {
        
        private int _cartId;
        
        private EntityCollection<CartItem> _items;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCartIdChanging(int value);
        partial void OnCartIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Cart"/> class.
        /// </summary>
        public Cart()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CartId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CartId
        {
            get
            {
                return this._cartId;
            }
            set
            {
                if ((this._cartId != value))
                {
                    this.OnCartIdChanging(value);
                    this.ValidateProperty("CartId", value);
                    this._cartId = value;
                    this.RaisePropertyChanged("CartId");
                    this.OnCartIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CartItem"/> entity instances.
        /// </summary>
        [Association("CartItem_Cart", "CartId", "CartItemId")]
        [Editable(false)]
        [ReadOnly(true)]
        public EntityCollection<CartItem> Items
        {
            get
            {
                if ((this._items == null))
                {
                    this._items = new EntityCollection<CartItem>(this, "Items", this.FilterItems, this.AttachItems, this.DetachItems);
                }
                return this._items;
            }
        }
        
        private void AttachItems(CartItem entity)
        {
            entity.Cart = this;
        }
        
        private void DetachItems(CartItem entity)
        {
            entity.Cart = null;
        }
        
        private bool FilterItems(CartItem entity)
        {
            return (entity.CartItemId == this.CartId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._cartId;
        }
    }
    
    /// <summary>
    /// The 'CartItem' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class CartItem : Entity
    {
        
        private EntityRef<Cart> _cart;
        
        private int _cartId;
        
        private int _cartItemId;
        
        private string _data;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCartIdChanging(int value);
        partial void OnCartIdChanged();
        partial void OnCartItemIdChanging(int value);
        partial void OnCartItemIdChanged();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItem"/> class.
        /// </summary>
        public CartItem()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Cart"/> entity.
        /// </summary>
        [Association("CartItem_Cart", "CartItemId", "CartId", IsForeignKey=true)]
        public Cart Cart
        {
            get
            {
                if ((this._cart == null))
                {
                    this._cart = new EntityRef<Cart>(this, "Cart", this.FilterCart);
                }
                return this._cart.Entity;
            }
            set
            {
                Cart previous = this.Cart;
                if ((previous != value))
                {
                    this.ValidateProperty("Cart", value);
                    if ((previous != null))
                    {
                        this._cart.Entity = null;
                        previous.Items.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CartItemId = value.CartId;
                    }
                    else
                    {
                        this.CartItemId = default(int);
                    }
                    this._cart.Entity = value;
                    if ((value != null))
                    {
                        value.Items.Add(this);
                    }
                    this.RaisePropertyChanged("Cart");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CartId' value.
        /// </summary>
        [DataMember()]
        public int CartId
        {
            get
            {
                return this._cartId;
            }
            set
            {
                if ((this._cartId != value))
                {
                    this.OnCartIdChanging(value);
                    this.RaiseDataMemberChanging("CartId");
                    this.ValidateProperty("CartId", value);
                    this._cartId = value;
                    this.RaiseDataMemberChanged("CartId");
                    this.OnCartIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CartItemId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int CartItemId
        {
            get
            {
                return this._cartItemId;
            }
            set
            {
                if ((this._cartItemId != value))
                {
                    this.OnCartItemIdChanging(value);
                    this.RaiseDataMemberChanging("CartItemId");
                    this.ValidateProperty("CartItemId", value);
                    this._cartItemId = value;
                    this.RaiseDataMemberChanged("CartItemId");
                    this.OnCartItemIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public string Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        private bool FilterCart(Cart entity)
        {
            return (entity.CartId == this.CartItemId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._cartItemId;
        }
    }
    
    /// <summary>
    /// The 'CityWithCacheData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class CityWithCacheData : Entity
    {
        
        private string _cacheData;
        
        private string _name;
        
        private string _stateName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCacheDataChanging(string value);
        partial void OnCacheDataChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnStateNameChanging(string value);
        partial void OnStateNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CityWithCacheData"/> class.
        /// </summary>
        public CityWithCacheData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CacheData' value.
        /// </summary>
        [DataMember()]
        public string CacheData
        {
            get
            {
                return this._cacheData;
            }
            set
            {
                if ((this._cacheData != value))
                {
                    this.OnCacheDataChanging(value);
                    this.RaiseDataMemberChanging("CacheData");
                    this.ValidateProperty("CacheData", value);
                    this._cacheData = value;
                    this.RaiseDataMemberChanged("CacheData");
                    this.OnCacheDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StateName' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string StateName
        {
            get
            {
                return this._stateName;
            }
            set
            {
                if ((this._stateName != value))
                {
                    this.OnStateNameChanging(value);
                    this.ValidateProperty("StateName", value);
                    this._stateName = value;
                    this.RaisePropertyChanged("StateName");
                    this.OnStateNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._name == null) 
                        || (this._stateName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._name, this._stateName);
        }
    }
    
    /// <summary>
    /// The 'D' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class D : Entity
    {
        
        private byte[] _binaryData;
        
        private EntityRef<C> _c;
        
        private EntityRef<D> _d1;
        
        private EntityRef<D> _d2;
        
        private EntityRef<D> _d2_BackRef;
        
        private EntityCollection<D> _ds;
        
        private int _dSelfRef_ID1;
        
        private int _dSelfRef_ID2;
        
        private int _id;
        
        private byte[] _projectedD1BinaryData;
        
        private int _projectedD1ID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBinaryDataChanging(byte[] value);
        partial void OnBinaryDataChanged();
        partial void OnDSelfRef_ID1Changing(int value);
        partial void OnDSelfRef_ID1Changed();
        partial void OnDSelfRef_ID2Changing(int value);
        partial void OnDSelfRef_ID2Changed();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnProjectedD1BinaryDataChanging(byte[] value);
        partial void OnProjectedD1BinaryDataChanged();
        partial void OnProjectedD1IDChanging(int value);
        partial void OnProjectedD1IDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="D"/> class.
        /// </summary>
        public D()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BinaryData' value.
        /// </summary>
        [DataMember()]
        public byte[] BinaryData
        {
            get
            {
                return this._binaryData;
            }
            set
            {
                if ((this._binaryData != value))
                {
                    this.OnBinaryDataChanging(value);
                    this.RaiseDataMemberChanging("BinaryData");
                    this.ValidateProperty("BinaryData", value);
                    this._binaryData = value;
                    this.RaiseDataMemberChanged("BinaryData");
                    this.OnBinaryDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="C"/> entity.
        /// </summary>
        [Association("C_D_Ref1", "ID", "DID_Ref1")]
        public C C
        {
            get
            {
                if ((this._c == null))
                {
                    this._c = new EntityRef<C>(this, "C", this.FilterC);
                }
                return this._c.Entity;
            }
            set
            {
                C previous = this.C;
                if ((previous != value))
                {
                    this.ValidateProperty("C", value);
                    if ((previous != null))
                    {
                        this._c.Entity = null;
                        previous.D_Ref1 = null;
                    }
                    this._c.Entity = value;
                    if ((value != null))
                    {
                        value.D_Ref1 = this;
                    }
                    this.RaisePropertyChanged("C");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="D"/> entity.
        /// </summary>
        [Association("D_D", "DSelfRef_ID1", "ID", IsForeignKey=true)]
        public D D1
        {
            get
            {
                if ((this._d1 == null))
                {
                    this._d1 = new EntityRef<D>(this, "D1", this.FilterD1);
                }
                return this._d1.Entity;
            }
            set
            {
                D previous = this.D1;
                if ((previous != value))
                {
                    this.ValidateProperty("D1", value);
                    if ((previous != null))
                    {
                        this._d1.Entity = null;
                        previous.Ds.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DSelfRef_ID1 = value.ID;
                    }
                    else
                    {
                        this.DSelfRef_ID1 = default(int);
                    }
                    this._d1.Entity = value;
                    if ((value != null))
                    {
                        value.Ds.Add(this);
                    }
                    this.RaisePropertyChanged("D1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="D"/> entity.
        /// </summary>
        [Association("D_D2", "DSelfRef_ID2", "ID", IsForeignKey=true)]
        public D D2
        {
            get
            {
                if ((this._d2 == null))
                {
                    this._d2 = new EntityRef<D>(this, "D2", this.FilterD2);
                }
                return this._d2.Entity;
            }
            set
            {
                D previous = this.D2;
                if ((previous != value))
                {
                    this.ValidateProperty("D2", value);
                    if ((previous != null))
                    {
                        this._d2.Entity = null;
                        previous.D2_BackRef = null;
                    }
                    if ((value != null))
                    {
                        this.DSelfRef_ID2 = value.ID;
                    }
                    else
                    {
                        this.DSelfRef_ID2 = default(int);
                    }
                    this._d2.Entity = value;
                    if ((value != null))
                    {
                        value.D2_BackRef = this;
                    }
                    this.RaisePropertyChanged("D2");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="D"/> entity.
        /// </summary>
        [Association("D_D2", "ID", "DSelfRef_ID2")]
        public D D2_BackRef
        {
            get
            {
                if ((this._d2_BackRef == null))
                {
                    this._d2_BackRef = new EntityRef<D>(this, "D2_BackRef", this.FilterD2_BackRef);
                }
                return this._d2_BackRef.Entity;
            }
            set
            {
                D previous = this.D2_BackRef;
                if ((previous != value))
                {
                    this.ValidateProperty("D2_BackRef", value);
                    if ((previous != null))
                    {
                        this._d2_BackRef.Entity = null;
                        previous.D2 = null;
                    }
                    this._d2_BackRef.Entity = value;
                    if ((value != null))
                    {
                        value.D2 = this;
                    }
                    this.RaisePropertyChanged("D2_BackRef");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="D"/> entity instances.
        /// </summary>
        [Association("D_D", "ID", "DSelfRef_ID1")]
        public EntityCollection<D> Ds
        {
            get
            {
                if ((this._ds == null))
                {
                    this._ds = new EntityCollection<D>(this, "Ds", this.FilterDs, this.AttachDs, this.DetachDs);
                }
                return this._ds;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DSelfRef_ID1' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DSelfRef_ID1
        {
            get
            {
                return this._dSelfRef_ID1;
            }
            set
            {
                if ((this._dSelfRef_ID1 != value))
                {
                    this.OnDSelfRef_ID1Changing(value);
                    this.RaiseDataMemberChanging("DSelfRef_ID1");
                    this.ValidateProperty("DSelfRef_ID1", value);
                    this._dSelfRef_ID1 = value;
                    this.RaiseDataMemberChanged("DSelfRef_ID1");
                    this.OnDSelfRef_ID1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DSelfRef_ID2' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DSelfRef_ID2
        {
            get
            {
                return this._dSelfRef_ID2;
            }
            set
            {
                if ((this._dSelfRef_ID2 != value))
                {
                    this.OnDSelfRef_ID2Changing(value);
                    this.RaiseDataMemberChanging("DSelfRef_ID2");
                    this.ValidateProperty("DSelfRef_ID2", value);
                    this._dSelfRef_ID2 = value;
                    this.RaiseDataMemberChanged("DSelfRef_ID2");
                    this.OnDSelfRef_ID2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Range(0, 99999)]
        [RoundtripOriginal()]
        [UIHint("TextBlock")]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProjectedD1BinaryData' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public byte[] ProjectedD1BinaryData
        {
            get
            {
                return this._projectedD1BinaryData;
            }
            set
            {
                if ((this._projectedD1BinaryData != value))
                {
                    this.OnProjectedD1BinaryDataChanging(value);
                    this.ValidateProperty("ProjectedD1BinaryData", value);
                    this._projectedD1BinaryData = value;
                    this.RaisePropertyChanged("ProjectedD1BinaryData");
                    this.OnProjectedD1BinaryDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProjectedD1ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [UIHint("TextBlock")]
        public int ProjectedD1ID
        {
            get
            {
                return this._projectedD1ID;
            }
            set
            {
                if ((this._projectedD1ID != value))
                {
                    this.OnProjectedD1IDChanging(value);
                    this.ValidateProperty("ProjectedD1ID", value);
                    this._projectedD1ID = value;
                    this.RaisePropertyChanged("ProjectedD1ID");
                    this.OnProjectedD1IDChanged();
                }
            }
        }
        
        private bool FilterC(C entity)
        {
            return (entity.DID_Ref1 == this.ID);
        }
        
        private bool FilterD1(D entity)
        {
            return (entity.ID == this.DSelfRef_ID1);
        }
        
        private bool FilterD2(D entity)
        {
            return (entity.ID == this.DSelfRef_ID2);
        }
        
        private bool FilterD2_BackRef(D entity)
        {
            return (entity.DSelfRef_ID2 == this.ID);
        }
        
        private void AttachDs(D entity)
        {
            entity.D1 = this;
        }
        
        private void DetachDs(D entity)
        {
            entity.D1 = null;
        }
        
        private bool FilterDs(D entity)
        {
            return (entity.DSelfRef_ID1 == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Entity_TestEditableAttribute' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class Entity_TestEditableAttribute : Entity
    {
        
        private string _editableFalse;
        
        private string _editableFalse_AllowInitialValueFalse;
        
        private string _editableFalse_AllowInitialValueTrue;
        
        private string _editableTrue;
        
        private string _editableTrue_AllowInitialValueFalse;
        
        private string _editableTrue_AllowInitialValueTrue;
        
        private int _key_EditableFalse;
        
        private int _key_EditableFalse_AllowInitialValueTrue;
        
        private int _key_EditableTrue;
        
        private int _key_EditableTrue_AllowInitialValueFalse;
        
        private int _key_ReadOnlyFalse;
        
        private int _key_ReadOnlyTrue;
        
        private int _key_Timestamp;
        
        private int _key_Timestamp_ReadOnlyFalse;
        
        private int _key_Timestamp_ReadOnlyTrue;
        
        private int _keyField;
        
        private int _readOnlyFalse;
        
        private int _readOnlyFalse_EditableFalse;
        
        private int _readOnlyFalse_EditableFalse_AllowInitialValueTrue;
        
        private int _readOnlyFalse_EditableTrue;
        
        private int _readOnlyFalse_EditableTrue_AllowInitialValueFalse;
        
        private int _readOnlyTrue;
        
        private int _readOnlyTrue_EditableFalse;
        
        private int _readOnlyTrue_EditableFalse_AllowInitialValueTrue;
        
        private int _readOnlyTrue_EditableTrue;
        
        private int _readOnlyTrue_EditableTrue_AllowInitialValueFalse;
        
        private int _timestamp;
        
        private int _timestamp_EditableFalse;
        
        private int _timestamp_EditableFalse_AllowInitialValueTrue;
        
        private int _timestamp_EditableTrue;
        
        private int _timestamp_EditableTrue_AllowInitialValueFalse;
        
        private int _timestamp_ReadOnlyFalse;
        
        private int _timestamp_ReadOnlyTrue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEditableFalseChanging(string value);
        partial void OnEditableFalseChanged();
        partial void OnEditableFalse_AllowInitialValueFalseChanging(string value);
        partial void OnEditableFalse_AllowInitialValueFalseChanged();
        partial void OnEditableFalse_AllowInitialValueTrueChanging(string value);
        partial void OnEditableFalse_AllowInitialValueTrueChanged();
        partial void OnEditableTrueChanging(string value);
        partial void OnEditableTrueChanged();
        partial void OnEditableTrue_AllowInitialValueFalseChanging(string value);
        partial void OnEditableTrue_AllowInitialValueFalseChanged();
        partial void OnEditableTrue_AllowInitialValueTrueChanging(string value);
        partial void OnEditableTrue_AllowInitialValueTrueChanged();
        partial void OnKey_EditableFalseChanging(int value);
        partial void OnKey_EditableFalseChanged();
        partial void OnKey_EditableFalse_AllowInitialValueTrueChanging(int value);
        partial void OnKey_EditableFalse_AllowInitialValueTrueChanged();
        partial void OnKey_EditableTrueChanging(int value);
        partial void OnKey_EditableTrueChanged();
        partial void OnKey_EditableTrue_AllowInitialValueFalseChanging(int value);
        partial void OnKey_EditableTrue_AllowInitialValueFalseChanged();
        partial void OnKey_ReadOnlyFalseChanging(int value);
        partial void OnKey_ReadOnlyFalseChanged();
        partial void OnKey_ReadOnlyTrueChanging(int value);
        partial void OnKey_ReadOnlyTrueChanged();
        partial void OnKey_TimestampChanging(int value);
        partial void OnKey_TimestampChanged();
        partial void OnKey_Timestamp_ReadOnlyFalseChanging(int value);
        partial void OnKey_Timestamp_ReadOnlyFalseChanged();
        partial void OnKey_Timestamp_ReadOnlyTrueChanging(int value);
        partial void OnKey_Timestamp_ReadOnlyTrueChanged();
        partial void OnKeyFieldChanging(int value);
        partial void OnKeyFieldChanged();
        partial void OnReadOnlyFalseChanging(int value);
        partial void OnReadOnlyFalseChanged();
        partial void OnReadOnlyFalse_EditableFalseChanging(int value);
        partial void OnReadOnlyFalse_EditableFalseChanged();
        partial void OnReadOnlyFalse_EditableFalse_AllowInitialValueTrueChanging(int value);
        partial void OnReadOnlyFalse_EditableFalse_AllowInitialValueTrueChanged();
        partial void OnReadOnlyFalse_EditableTrueChanging(int value);
        partial void OnReadOnlyFalse_EditableTrueChanged();
        partial void OnReadOnlyFalse_EditableTrue_AllowInitialValueFalseChanging(int value);
        partial void OnReadOnlyFalse_EditableTrue_AllowInitialValueFalseChanged();
        partial void OnReadOnlyTrueChanging(int value);
        partial void OnReadOnlyTrueChanged();
        partial void OnReadOnlyTrue_EditableFalseChanging(int value);
        partial void OnReadOnlyTrue_EditableFalseChanged();
        partial void OnReadOnlyTrue_EditableFalse_AllowInitialValueTrueChanging(int value);
        partial void OnReadOnlyTrue_EditableFalse_AllowInitialValueTrueChanged();
        partial void OnReadOnlyTrue_EditableTrueChanging(int value);
        partial void OnReadOnlyTrue_EditableTrueChanged();
        partial void OnReadOnlyTrue_EditableTrue_AllowInitialValueFalseChanging(int value);
        partial void OnReadOnlyTrue_EditableTrue_AllowInitialValueFalseChanged();
        partial void OnTimestampChanging(int value);
        partial void OnTimestampChanged();
        partial void OnTimestamp_EditableFalseChanging(int value);
        partial void OnTimestamp_EditableFalseChanged();
        partial void OnTimestamp_EditableFalse_AllowInitialValueTrueChanging(int value);
        partial void OnTimestamp_EditableFalse_AllowInitialValueTrueChanged();
        partial void OnTimestamp_EditableTrueChanging(int value);
        partial void OnTimestamp_EditableTrueChanged();
        partial void OnTimestamp_EditableTrue_AllowInitialValueFalseChanging(int value);
        partial void OnTimestamp_EditableTrue_AllowInitialValueFalseChanged();
        partial void OnTimestamp_ReadOnlyFalseChanging(int value);
        partial void OnTimestamp_ReadOnlyFalseChanged();
        partial void OnTimestamp_ReadOnlyTrueChanging(int value);
        partial void OnTimestamp_ReadOnlyTrueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Entity_TestEditableAttribute"/> class.
        /// </summary>
        public Entity_TestEditableAttribute()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EditableFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string EditableFalse
        {
            get
            {
                return this._editableFalse;
            }
            set
            {
                if ((this._editableFalse != value))
                {
                    this.OnEditableFalseChanging(value);
                    this.ValidateProperty("EditableFalse", value);
                    this._editableFalse = value;
                    this.RaisePropertyChanged("EditableFalse");
                    this.OnEditableFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EditableFalse_AllowInitialValueFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public string EditableFalse_AllowInitialValueFalse
        {
            get
            {
                return this._editableFalse_AllowInitialValueFalse;
            }
            set
            {
                if ((this._editableFalse_AllowInitialValueFalse != value))
                {
                    this.OnEditableFalse_AllowInitialValueFalseChanging(value);
                    this.ValidateProperty("EditableFalse_AllowInitialValueFalse", value);
                    this._editableFalse_AllowInitialValueFalse = value;
                    this.RaisePropertyChanged("EditableFalse_AllowInitialValueFalse");
                    this.OnEditableFalse_AllowInitialValueFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EditableFalse_AllowInitialValueTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        public string EditableFalse_AllowInitialValueTrue
        {
            get
            {
                return this._editableFalse_AllowInitialValueTrue;
            }
            set
            {
                if ((this._editableFalse_AllowInitialValueTrue != value))
                {
                    this.OnEditableFalse_AllowInitialValueTrueChanging(value);
                    this.ValidateProperty("EditableFalse_AllowInitialValueTrue", value);
                    this._editableFalse_AllowInitialValueTrue = value;
                    this.RaisePropertyChanged("EditableFalse_AllowInitialValueTrue");
                    this.OnEditableFalse_AllowInitialValueTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EditableTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(true)]
        public string EditableTrue
        {
            get
            {
                return this._editableTrue;
            }
            set
            {
                if ((this._editableTrue != value))
                {
                    this.OnEditableTrueChanging(value);
                    this.RaiseDataMemberChanging("EditableTrue");
                    this.ValidateProperty("EditableTrue", value);
                    this._editableTrue = value;
                    this.RaiseDataMemberChanged("EditableTrue");
                    this.OnEditableTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EditableTrue_AllowInitialValueFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(true, AllowInitialValue=false)]
        public string EditableTrue_AllowInitialValueFalse
        {
            get
            {
                return this._editableTrue_AllowInitialValueFalse;
            }
            set
            {
                if ((this._editableTrue_AllowInitialValueFalse != value))
                {
                    this.OnEditableTrue_AllowInitialValueFalseChanging(value);
                    this.RaiseDataMemberChanging("EditableTrue_AllowInitialValueFalse");
                    this.ValidateProperty("EditableTrue_AllowInitialValueFalse", value);
                    this._editableTrue_AllowInitialValueFalse = value;
                    this.RaiseDataMemberChanged("EditableTrue_AllowInitialValueFalse");
                    this.OnEditableTrue_AllowInitialValueFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EditableTrue_AllowInitialValueTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(true)]
        public string EditableTrue_AllowInitialValueTrue
        {
            get
            {
                return this._editableTrue_AllowInitialValueTrue;
            }
            set
            {
                if ((this._editableTrue_AllowInitialValueTrue != value))
                {
                    this.OnEditableTrue_AllowInitialValueTrueChanging(value);
                    this.RaiseDataMemberChanging("EditableTrue_AllowInitialValueTrue");
                    this.ValidateProperty("EditableTrue_AllowInitialValueTrue", value);
                    this._editableTrue_AllowInitialValueTrue = value;
                    this.RaiseDataMemberChanged("EditableTrue_AllowInitialValueTrue");
                    this.OnEditableTrue_AllowInitialValueTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key_EditableFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [Key()]
        [RoundtripOriginal()]
        public int Key_EditableFalse
        {
            get
            {
                return this._key_EditableFalse;
            }
            set
            {
                if ((this._key_EditableFalse != value))
                {
                    this.OnKey_EditableFalseChanging(value);
                    this.ValidateProperty("Key_EditableFalse", value);
                    this._key_EditableFalse = value;
                    this.RaisePropertyChanged("Key_EditableFalse");
                    this.OnKey_EditableFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key_EditableFalse_AllowInitialValueTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Key_EditableFalse_AllowInitialValueTrue
        {
            get
            {
                return this._key_EditableFalse_AllowInitialValueTrue;
            }
            set
            {
                if ((this._key_EditableFalse_AllowInitialValueTrue != value))
                {
                    this.OnKey_EditableFalse_AllowInitialValueTrueChanging(value);
                    this.ValidateProperty("Key_EditableFalse_AllowInitialValueTrue", value);
                    this._key_EditableFalse_AllowInitialValueTrue = value;
                    this.RaisePropertyChanged("Key_EditableFalse_AllowInitialValueTrue");
                    this.OnKey_EditableFalse_AllowInitialValueTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key_EditableTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(true)]
        [Key()]
        [RoundtripOriginal()]
        public int Key_EditableTrue
        {
            get
            {
                return this._key_EditableTrue;
            }
            set
            {
                if ((this._key_EditableTrue != value))
                {
                    this.OnKey_EditableTrueChanging(value);
                    this.RaiseDataMemberChanging("Key_EditableTrue");
                    this.ValidateProperty("Key_EditableTrue", value);
                    this._key_EditableTrue = value;
                    this.RaiseDataMemberChanged("Key_EditableTrue");
                    this.OnKey_EditableTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key_EditableTrue_AllowInitialValueFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(true, AllowInitialValue=false)]
        [Key()]
        [RoundtripOriginal()]
        public int Key_EditableTrue_AllowInitialValueFalse
        {
            get
            {
                return this._key_EditableTrue_AllowInitialValueFalse;
            }
            set
            {
                if ((this._key_EditableTrue_AllowInitialValueFalse != value))
                {
                    this.OnKey_EditableTrue_AllowInitialValueFalseChanging(value);
                    this.RaiseDataMemberChanging("Key_EditableTrue_AllowInitialValueFalse");
                    this.ValidateProperty("Key_EditableTrue_AllowInitialValueFalse", value);
                    this._key_EditableTrue_AllowInitialValueFalse = value;
                    this.RaiseDataMemberChanged("Key_EditableTrue_AllowInitialValueFalse");
                    this.OnKey_EditableTrue_AllowInitialValueFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key_ReadOnlyFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [ReadOnly(false)]
        [RoundtripOriginal()]
        public int Key_ReadOnlyFalse
        {
            get
            {
                return this._key_ReadOnlyFalse;
            }
            set
            {
                if ((this._key_ReadOnlyFalse != value))
                {
                    this.OnKey_ReadOnlyFalseChanging(value);
                    this.ValidateProperty("Key_ReadOnlyFalse", value);
                    this._key_ReadOnlyFalse = value;
                    this.RaisePropertyChanged("Key_ReadOnlyFalse");
                    this.OnKey_ReadOnlyFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key_ReadOnlyTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public int Key_ReadOnlyTrue
        {
            get
            {
                return this._key_ReadOnlyTrue;
            }
            set
            {
                if ((this._key_ReadOnlyTrue != value))
                {
                    this.OnKey_ReadOnlyTrueChanging(value);
                    this.ValidateProperty("Key_ReadOnlyTrue", value);
                    this._key_ReadOnlyTrue = value;
                    this.RaisePropertyChanged("Key_ReadOnlyTrue");
                    this.OnKey_ReadOnlyTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key_Timestamp' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        [Timestamp()]
        public int Key_Timestamp
        {
            get
            {
                return this._key_Timestamp;
            }
            set
            {
                if ((this._key_Timestamp != value))
                {
                    this.OnKey_TimestampChanging(value);
                    this.ValidateProperty("Key_Timestamp", value);
                    this._key_Timestamp = value;
                    this.RaisePropertyChanged("Key_Timestamp");
                    this.OnKey_TimestampChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key_Timestamp_ReadOnlyFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [ReadOnly(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public int Key_Timestamp_ReadOnlyFalse
        {
            get
            {
                return this._key_Timestamp_ReadOnlyFalse;
            }
            set
            {
                if ((this._key_Timestamp_ReadOnlyFalse != value))
                {
                    this.OnKey_Timestamp_ReadOnlyFalseChanging(value);
                    this.ValidateProperty("Key_Timestamp_ReadOnlyFalse", value);
                    this._key_Timestamp_ReadOnlyFalse = value;
                    this.RaisePropertyChanged("Key_Timestamp_ReadOnlyFalse");
                    this.OnKey_Timestamp_ReadOnlyFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key_Timestamp_ReadOnlyTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        [Timestamp()]
        public int Key_Timestamp_ReadOnlyTrue
        {
            get
            {
                return this._key_Timestamp_ReadOnlyTrue;
            }
            set
            {
                if ((this._key_Timestamp_ReadOnlyTrue != value))
                {
                    this.OnKey_Timestamp_ReadOnlyTrueChanging(value);
                    this.ValidateProperty("Key_Timestamp_ReadOnlyTrue", value);
                    this._key_Timestamp_ReadOnlyTrue = value;
                    this.RaisePropertyChanged("Key_Timestamp_ReadOnlyTrue");
                    this.OnKey_Timestamp_ReadOnlyTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KeyField' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int KeyField
        {
            get
            {
                return this._keyField;
            }
            set
            {
                if ((this._keyField != value))
                {
                    this.OnKeyFieldChanging(value);
                    this.ValidateProperty("KeyField", value);
                    this._keyField = value;
                    this.RaisePropertyChanged("KeyField");
                    this.OnKeyFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(true)]
        [ReadOnly(false)]
        public int ReadOnlyFalse
        {
            get
            {
                return this._readOnlyFalse;
            }
            set
            {
                if ((this._readOnlyFalse != value))
                {
                    this.OnReadOnlyFalseChanging(value);
                    this.RaiseDataMemberChanging("ReadOnlyFalse");
                    this.ValidateProperty("ReadOnlyFalse", value);
                    this._readOnlyFalse = value;
                    this.RaiseDataMemberChanged("ReadOnlyFalse");
                    this.OnReadOnlyFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyFalse_EditableFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(false)]
        public int ReadOnlyFalse_EditableFalse
        {
            get
            {
                return this._readOnlyFalse_EditableFalse;
            }
            set
            {
                if ((this._readOnlyFalse_EditableFalse != value))
                {
                    this.OnReadOnlyFalse_EditableFalseChanging(value);
                    this.ValidateProperty("ReadOnlyFalse_EditableFalse", value);
                    this._readOnlyFalse_EditableFalse = value;
                    this.RaisePropertyChanged("ReadOnlyFalse_EditableFalse");
                    this.OnReadOnlyFalse_EditableFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyFalse_EditableFalse_AllowInitialValueTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [ReadOnly(false)]
        public int ReadOnlyFalse_EditableFalse_AllowInitialValueTrue
        {
            get
            {
                return this._readOnlyFalse_EditableFalse_AllowInitialValueTrue;
            }
            set
            {
                if ((this._readOnlyFalse_EditableFalse_AllowInitialValueTrue != value))
                {
                    this.OnReadOnlyFalse_EditableFalse_AllowInitialValueTrueChanging(value);
                    this.ValidateProperty("ReadOnlyFalse_EditableFalse_AllowInitialValueTrue", value);
                    this._readOnlyFalse_EditableFalse_AllowInitialValueTrue = value;
                    this.RaisePropertyChanged("ReadOnlyFalse_EditableFalse_AllowInitialValueTrue");
                    this.OnReadOnlyFalse_EditableFalse_AllowInitialValueTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyFalse_EditableTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(true)]
        [ReadOnly(false)]
        public int ReadOnlyFalse_EditableTrue
        {
            get
            {
                return this._readOnlyFalse_EditableTrue;
            }
            set
            {
                if ((this._readOnlyFalse_EditableTrue != value))
                {
                    this.OnReadOnlyFalse_EditableTrueChanging(value);
                    this.RaiseDataMemberChanging("ReadOnlyFalse_EditableTrue");
                    this.ValidateProperty("ReadOnlyFalse_EditableTrue", value);
                    this._readOnlyFalse_EditableTrue = value;
                    this.RaiseDataMemberChanged("ReadOnlyFalse_EditableTrue");
                    this.OnReadOnlyFalse_EditableTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyFalse_EditableTrue_AllowInitialValueFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(true, AllowInitialValue=false)]
        [ReadOnly(false)]
        public int ReadOnlyFalse_EditableTrue_AllowInitialValueFalse
        {
            get
            {
                return this._readOnlyFalse_EditableTrue_AllowInitialValueFalse;
            }
            set
            {
                if ((this._readOnlyFalse_EditableTrue_AllowInitialValueFalse != value))
                {
                    this.OnReadOnlyFalse_EditableTrue_AllowInitialValueFalseChanging(value);
                    this.RaiseDataMemberChanging("ReadOnlyFalse_EditableTrue_AllowInitialValueFalse");
                    this.ValidateProperty("ReadOnlyFalse_EditableTrue_AllowInitialValueFalse", value);
                    this._readOnlyFalse_EditableTrue_AllowInitialValueFalse = value;
                    this.RaiseDataMemberChanged("ReadOnlyFalse_EditableTrue_AllowInitialValueFalse");
                    this.OnReadOnlyFalse_EditableTrue_AllowInitialValueFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int ReadOnlyTrue
        {
            get
            {
                return this._readOnlyTrue;
            }
            set
            {
                if ((this._readOnlyTrue != value))
                {
                    this.OnReadOnlyTrueChanging(value);
                    this.ValidateProperty("ReadOnlyTrue", value);
                    this._readOnlyTrue = value;
                    this.RaisePropertyChanged("ReadOnlyTrue");
                    this.OnReadOnlyTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyTrue_EditableFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int ReadOnlyTrue_EditableFalse
        {
            get
            {
                return this._readOnlyTrue_EditableFalse;
            }
            set
            {
                if ((this._readOnlyTrue_EditableFalse != value))
                {
                    this.OnReadOnlyTrue_EditableFalseChanging(value);
                    this.ValidateProperty("ReadOnlyTrue_EditableFalse", value);
                    this._readOnlyTrue_EditableFalse = value;
                    this.RaisePropertyChanged("ReadOnlyTrue_EditableFalse");
                    this.OnReadOnlyTrue_EditableFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyTrue_EditableFalse_AllowInitialValueTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [ReadOnly(true)]
        public int ReadOnlyTrue_EditableFalse_AllowInitialValueTrue
        {
            get
            {
                return this._readOnlyTrue_EditableFalse_AllowInitialValueTrue;
            }
            set
            {
                if ((this._readOnlyTrue_EditableFalse_AllowInitialValueTrue != value))
                {
                    this.OnReadOnlyTrue_EditableFalse_AllowInitialValueTrueChanging(value);
                    this.ValidateProperty("ReadOnlyTrue_EditableFalse_AllowInitialValueTrue", value);
                    this._readOnlyTrue_EditableFalse_AllowInitialValueTrue = value;
                    this.RaisePropertyChanged("ReadOnlyTrue_EditableFalse_AllowInitialValueTrue");
                    this.OnReadOnlyTrue_EditableFalse_AllowInitialValueTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyTrue_EditableTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(true)]
        [ReadOnly(true)]
        public int ReadOnlyTrue_EditableTrue
        {
            get
            {
                return this._readOnlyTrue_EditableTrue;
            }
            set
            {
                if ((this._readOnlyTrue_EditableTrue != value))
                {
                    this.OnReadOnlyTrue_EditableTrueChanging(value);
                    this.ValidateProperty("ReadOnlyTrue_EditableTrue", value);
                    this._readOnlyTrue_EditableTrue = value;
                    this.RaisePropertyChanged("ReadOnlyTrue_EditableTrue");
                    this.OnReadOnlyTrue_EditableTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnlyTrue_EditableTrue_AllowInitialValueFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(true, AllowInitialValue=false)]
        [ReadOnly(true)]
        public int ReadOnlyTrue_EditableTrue_AllowInitialValueFalse
        {
            get
            {
                return this._readOnlyTrue_EditableTrue_AllowInitialValueFalse;
            }
            set
            {
                if ((this._readOnlyTrue_EditableTrue_AllowInitialValueFalse != value))
                {
                    this.OnReadOnlyTrue_EditableTrue_AllowInitialValueFalseChanging(value);
                    this.ValidateProperty("ReadOnlyTrue_EditableTrue_AllowInitialValueFalse", value);
                    this._readOnlyTrue_EditableTrue_AllowInitialValueFalse = value;
                    this.RaisePropertyChanged("ReadOnlyTrue_EditableTrue_AllowInitialValueFalse");
                    this.OnReadOnlyTrue_EditableTrue_AllowInitialValueFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Timestamp' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public int Timestamp
        {
            get
            {
                return this._timestamp;
            }
            set
            {
                if ((this._timestamp != value))
                {
                    this.OnTimestampChanging(value);
                    this.ValidateProperty("Timestamp", value);
                    this._timestamp = value;
                    this.RaisePropertyChanged("Timestamp");
                    this.OnTimestampChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Timestamp_EditableFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public int Timestamp_EditableFalse
        {
            get
            {
                return this._timestamp_EditableFalse;
            }
            set
            {
                if ((this._timestamp_EditableFalse != value))
                {
                    this.OnTimestamp_EditableFalseChanging(value);
                    this.ValidateProperty("Timestamp_EditableFalse", value);
                    this._timestamp_EditableFalse = value;
                    this.RaisePropertyChanged("Timestamp_EditableFalse");
                    this.OnTimestamp_EditableFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Timestamp_EditableFalse_AllowInitialValueTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [RoundtripOriginal()]
        [Timestamp()]
        public int Timestamp_EditableFalse_AllowInitialValueTrue
        {
            get
            {
                return this._timestamp_EditableFalse_AllowInitialValueTrue;
            }
            set
            {
                if ((this._timestamp_EditableFalse_AllowInitialValueTrue != value))
                {
                    this.OnTimestamp_EditableFalse_AllowInitialValueTrueChanging(value);
                    this.ValidateProperty("Timestamp_EditableFalse_AllowInitialValueTrue", value);
                    this._timestamp_EditableFalse_AllowInitialValueTrue = value;
                    this.RaisePropertyChanged("Timestamp_EditableFalse_AllowInitialValueTrue");
                    this.OnTimestamp_EditableFalse_AllowInitialValueTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Timestamp_EditableTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(true)]
        [RoundtripOriginal()]
        [Timestamp()]
        public int Timestamp_EditableTrue
        {
            get
            {
                return this._timestamp_EditableTrue;
            }
            set
            {
                if ((this._timestamp_EditableTrue != value))
                {
                    this.OnTimestamp_EditableTrueChanging(value);
                    this.RaiseDataMemberChanging("Timestamp_EditableTrue");
                    this.ValidateProperty("Timestamp_EditableTrue", value);
                    this._timestamp_EditableTrue = value;
                    this.RaiseDataMemberChanged("Timestamp_EditableTrue");
                    this.OnTimestamp_EditableTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Timestamp_EditableTrue_AllowInitialValueFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(true, AllowInitialValue=false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public int Timestamp_EditableTrue_AllowInitialValueFalse
        {
            get
            {
                return this._timestamp_EditableTrue_AllowInitialValueFalse;
            }
            set
            {
                if ((this._timestamp_EditableTrue_AllowInitialValueFalse != value))
                {
                    this.OnTimestamp_EditableTrue_AllowInitialValueFalseChanging(value);
                    this.RaiseDataMemberChanging("Timestamp_EditableTrue_AllowInitialValueFalse");
                    this.ValidateProperty("Timestamp_EditableTrue_AllowInitialValueFalse", value);
                    this._timestamp_EditableTrue_AllowInitialValueFalse = value;
                    this.RaiseDataMemberChanged("Timestamp_EditableTrue_AllowInitialValueFalse");
                    this.OnTimestamp_EditableTrue_AllowInitialValueFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Timestamp_ReadOnlyFalse' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public int Timestamp_ReadOnlyFalse
        {
            get
            {
                return this._timestamp_ReadOnlyFalse;
            }
            set
            {
                if ((this._timestamp_ReadOnlyFalse != value))
                {
                    this.OnTimestamp_ReadOnlyFalseChanging(value);
                    this.ValidateProperty("Timestamp_ReadOnlyFalse", value);
                    this._timestamp_ReadOnlyFalse = value;
                    this.RaisePropertyChanged("Timestamp_ReadOnlyFalse");
                    this.OnTimestamp_ReadOnlyFalseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Timestamp_ReadOnlyTrue' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        [Timestamp()]
        public int Timestamp_ReadOnlyTrue
        {
            get
            {
                return this._timestamp_ReadOnlyTrue;
            }
            set
            {
                if ((this._timestamp_ReadOnlyTrue != value))
                {
                    this.OnTimestamp_ReadOnlyTrueChanging(value);
                    this.ValidateProperty("Timestamp_ReadOnlyTrue", value);
                    this._timestamp_ReadOnlyTrue = value;
                    this.RaisePropertyChanged("Timestamp_ReadOnlyTrue");
                    this.OnTimestamp_ReadOnlyTrueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._key_EditableFalse, this._key_EditableFalse_AllowInitialValueTrue, this._key_EditableTrue, this._key_EditableTrue_AllowInitialValueFalse, this._key_ReadOnlyFalse, this._key_ReadOnlyTrue, this._key_Timestamp, this._key_Timestamp_ReadOnlyFalse, this._key_Timestamp_ReadOnlyTrue, this._keyField);
        }
    }
    
    /// <summary>
    /// The 'EntityWithDataContract' entity class.
    /// </summary>
    [DataContract(Namespace="CustomNamespace", Name="CustomName")]
    public sealed partial class EntityWithDataContract : Entity
    {
        
        private string _data;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityWithDataContract"/> class.
        /// </summary>
        public EntityWithDataContract()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public string Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'EntityWithDataContract2' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class EntityWithDataContract2 : Entity
    {
        
        private string _data;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityWithDataContract2"/> class.
        /// </summary>
        public EntityWithDataContract2()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public string Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'EntityWithDefaultDefaultValue' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class EntityWithDefaultDefaultValue : Entity
    {
        
        private bool _boolProp;
        
        private byte _byteProp;
        
        private char _charProp;
        
        private float _floatProp;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBoolPropChanging(bool value);
        partial void OnBoolPropChanged();
        partial void OnBytePropChanging(byte value);
        partial void OnBytePropChanged();
        partial void OnCharPropChanging(char value);
        partial void OnCharPropChanged();
        partial void OnFloatPropChanging(float value);
        partial void OnFloatPropChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityWithDefaultDefaultValue"/> class.
        /// </summary>
        public EntityWithDefaultDefaultValue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BoolProp' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(false)]
        public bool BoolProp
        {
            get
            {
                return this._boolProp;
            }
            set
            {
                if ((this._boolProp != value))
                {
                    this.OnBoolPropChanging(value);
                    this.RaiseDataMemberChanging("BoolProp");
                    this.ValidateProperty("BoolProp", value);
                    this._boolProp = value;
                    this.RaiseDataMemberChanged("BoolProp");
                    this.OnBoolPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ByteProp' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(0)]
        public byte ByteProp
        {
            get
            {
                return this._byteProp;
            }
            set
            {
                if ((this._byteProp != value))
                {
                    this.OnBytePropChanging(value);
                    this.RaiseDataMemberChanging("ByteProp");
                    this.ValidateProperty("ByteProp", value);
                    this._byteProp = value;
                    this.RaiseDataMemberChanged("ByteProp");
                    this.OnBytePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CharProp' value.
        /// </summary>
        [DataMember()]
        [DefaultValue('\0')]
        public char CharProp
        {
            get
            {
                return this._charProp;
            }
            set
            {
                if ((this._charProp != value))
                {
                    this.OnCharPropChanging(value);
                    this.RaiseDataMemberChanging("CharProp");
                    this.ValidateProperty("CharProp", value);
                    this._charProp = value;
                    this.RaiseDataMemberChanged("CharProp");
                    this.OnCharPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FloatProp' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(0)]
        public float FloatProp
        {
            get
            {
                return this._floatProp;
            }
            set
            {
                if ((this._floatProp != value))
                {
                    this.OnFloatPropChanging(value);
                    this.RaiseDataMemberChanging("FloatProp");
                    this.ValidateProperty("FloatProp", value);
                    this._floatProp = value;
                    this.RaiseDataMemberChanged("FloatProp");
                    this.OnFloatPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(0)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'EntityWithXElement' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class EntityWithXElement : Entity
    {
        
        private int _id;
        
        private XElement _xElem;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnXElemChanging(XElement value);
        partial void OnXElemChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityWithXElement"/> class.
        /// </summary>
        public EntityWithXElement()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'XElem' value.
        /// </summary>
        [DataMember()]
        public XElement XElem
        {
            get
            {
                return this._xElem;
            }
            set
            {
                if ((this._xElem != value))
                {
                    this.OnXElemChanging(value);
                    this.RaiseDataMemberChanging("XElem");
                    this.ValidateProperty("XElem", value);
                    this._xElem = value;
                    this.RaiseDataMemberChanged("XElem");
                    this.OnXElemChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'MixedType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class MixedType : Entity
    {
        
        private byte[] _binaryProp;
        
        private bool _booleanProp;
        
        private byte[] _byteArrayProp;
        
        private byte _byteProp;
        
        private char _charProp;
        
        private DateTimeOffset _dateTimeOffsetProp;
        
        private IEnumerable<DateTimeOffset> _dateTimeOffsetsCollectionProp;
        
        private DateTime _dateTimeProp;
        
        private IEnumerable<DateTime> _dateTimesCollectionProp;
        
        private decimal _decimalProp;
        
        private Dictionary<DateTimeOffset, DateTimeOffset> _dictionaryDateTimeOffsetProp;
        
        private Dictionary<DateTime, DateTime> _dictionaryDateTimeProp;
        
        private Dictionary<Guid, Guid> _dictionaryGuidProp;
        
        private Dictionary<string, string> _dictionaryStringProp;
        
        private Dictionary<TestEnum, TestEnum> _dictionaryTestEnumProp;
        
        private Dictionary<XElement, XElement> _dictionaryXElementProp;
        
        private double _doubleProp;
        
        private TestEnum _enumProp;
        
        private TestEnum[] _enumsProp;
        
        private Guid _guidProp;
        
        private Guid[] _guidsProp;
        
        private string _id;
        
        private short _int16Prop;
        
        private int _int32Prop;
        
        private long _int64Prop;
        
        private int[] _intsProp;
        
        private Nullable<bool> _nullableBooleanProp;
        
        private Nullable<byte> _nullableByteProp;
        
        private Nullable<char> _nullableCharProp;
        
        private IEnumerable<Nullable<DateTimeOffset>> _nullableDateTimeOffsetCollectionProp;
        
        private Nullable<DateTimeOffset> _nullableDateTimeOffsetProp;
        
        private Nullable<DateTime> _nullableDateTimeProp;
        
        private IEnumerable<Nullable<DateTime>> _nullableDateTimesCollectionProp;
        
        private Nullable<decimal> _nullableDecimalProp;
        
        private Dictionary<DateTimeOffset, Nullable<DateTimeOffset>> _nullableDictionaryDateTimeOffsetProp;
        
        private Dictionary<DateTime, Nullable<DateTime>> _nullableDictionaryDateTimeProp;
        
        private Nullable<double> _nullableDoubleProp;
        
        private Nullable<TestEnum> _nullableEnumProp;
        
        private Nullable<DateTime>[] _nullableEnumsArrayProp;
        
        private Nullable<Guid> _nullableGuidProp;
        
        private Nullable<short> _nullableInt16Prop;
        
        private Nullable<int> _nullableInt32Prop;
        
        private Nullable<long> _nullableInt64Prop;
        
        private Nullable<sbyte> _nullableSByteProp;
        
        private Nullable<float> _nullableSingleProp;
        
        private IEnumerable<Nullable<TimeSpan>> _nullableTimeSpanListProp;
        
        private Nullable<TimeSpan> _nullableTimeSpanProp;
        
        private Nullable<ushort> _nullableUInt16Prop;
        
        private Nullable<uint> _nullableUInt32Prop;
        
        private Nullable<ulong> _nullableUInt64Prop;
        
        private sbyte _sByteProp;
        
        private float _singleProp;
        
        private string _stringProp;
        
        private IEnumerable<string> _stringsProp;
        
        private IEnumerable<TimeSpan> _timeSpanListProp;
        
        private TimeSpan _timeSpanProp;
        
        private ushort _uInt16Prop;
        
        private uint _uInt32Prop;
        
        private ulong _uInt64Prop;
        
        private ulong[] _uInt64sProp;
        
        private Uri _uriProp;
        
        private XElement _xElementProp;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBinaryPropChanging(byte[] value);
        partial void OnBinaryPropChanged();
        partial void OnBooleanPropChanging(bool value);
        partial void OnBooleanPropChanged();
        partial void OnByteArrayPropChanging(byte[] value);
        partial void OnByteArrayPropChanged();
        partial void OnBytePropChanging(byte value);
        partial void OnBytePropChanged();
        partial void OnCharPropChanging(char value);
        partial void OnCharPropChanged();
        partial void OnDateTimeOffsetPropChanging(DateTimeOffset value);
        partial void OnDateTimeOffsetPropChanged();
        partial void OnDateTimeOffsetsCollectionPropChanging(IEnumerable<DateTimeOffset> value);
        partial void OnDateTimeOffsetsCollectionPropChanged();
        partial void OnDateTimePropChanging(DateTime value);
        partial void OnDateTimePropChanged();
        partial void OnDateTimesCollectionPropChanging(IEnumerable<DateTime> value);
        partial void OnDateTimesCollectionPropChanged();
        partial void OnDecimalPropChanging(decimal value);
        partial void OnDecimalPropChanged();
        partial void OnDictionaryDateTimeOffsetPropChanging(Dictionary<DateTimeOffset, DateTimeOffset> value);
        partial void OnDictionaryDateTimeOffsetPropChanged();
        partial void OnDictionaryDateTimePropChanging(Dictionary<DateTime, DateTime> value);
        partial void OnDictionaryDateTimePropChanged();
        partial void OnDictionaryGuidPropChanging(Dictionary<Guid, Guid> value);
        partial void OnDictionaryGuidPropChanged();
        partial void OnDictionaryStringPropChanging(Dictionary<string, string> value);
        partial void OnDictionaryStringPropChanged();
        partial void OnDictionaryTestEnumPropChanging(Dictionary<TestEnum, TestEnum> value);
        partial void OnDictionaryTestEnumPropChanged();
        partial void OnDictionaryXElementPropChanging(Dictionary<XElement, XElement> value);
        partial void OnDictionaryXElementPropChanged();
        partial void OnDoublePropChanging(double value);
        partial void OnDoublePropChanged();
        partial void OnEnumPropChanging(TestEnum value);
        partial void OnEnumPropChanged();
        partial void OnEnumsPropChanging(TestEnum[] value);
        partial void OnEnumsPropChanged();
        partial void OnGuidPropChanging(Guid value);
        partial void OnGuidPropChanged();
        partial void OnGuidsPropChanging(Guid[] value);
        partial void OnGuidsPropChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnInt16PropChanging(short value);
        partial void OnInt16PropChanged();
        partial void OnInt32PropChanging(int value);
        partial void OnInt32PropChanged();
        partial void OnInt64PropChanging(long value);
        partial void OnInt64PropChanged();
        partial void OnIntsPropChanging(int[] value);
        partial void OnIntsPropChanged();
        partial void OnNullableBooleanPropChanging(Nullable<bool> value);
        partial void OnNullableBooleanPropChanged();
        partial void OnNullableBytePropChanging(Nullable<byte> value);
        partial void OnNullableBytePropChanged();
        partial void OnNullableCharPropChanging(Nullable<char> value);
        partial void OnNullableCharPropChanged();
        partial void OnNullableDateTimeOffsetCollectionPropChanging(IEnumerable<Nullable<DateTimeOffset>> value);
        partial void OnNullableDateTimeOffsetCollectionPropChanged();
        partial void OnNullableDateTimeOffsetPropChanging(Nullable<DateTimeOffset> value);
        partial void OnNullableDateTimeOffsetPropChanged();
        partial void OnNullableDateTimePropChanging(Nullable<DateTime> value);
        partial void OnNullableDateTimePropChanged();
        partial void OnNullableDateTimesCollectionPropChanging(IEnumerable<Nullable<DateTime>> value);
        partial void OnNullableDateTimesCollectionPropChanged();
        partial void OnNullableDecimalPropChanging(Nullable<decimal> value);
        partial void OnNullableDecimalPropChanged();
        partial void OnNullableDictionaryDateTimeOffsetPropChanging(Dictionary<DateTimeOffset, Nullable<DateTimeOffset>> value);
        partial void OnNullableDictionaryDateTimeOffsetPropChanged();
        partial void OnNullableDictionaryDateTimePropChanging(Dictionary<DateTime, Nullable<DateTime>> value);
        partial void OnNullableDictionaryDateTimePropChanged();
        partial void OnNullableDoublePropChanging(Nullable<double> value);
        partial void OnNullableDoublePropChanged();
        partial void OnNullableEnumPropChanging(Nullable<TestEnum> value);
        partial void OnNullableEnumPropChanged();
        partial void OnNullableEnumsArrayPropChanging(Nullable<DateTime>[] value);
        partial void OnNullableEnumsArrayPropChanged();
        partial void OnNullableGuidPropChanging(Nullable<Guid> value);
        partial void OnNullableGuidPropChanged();
        partial void OnNullableInt16PropChanging(Nullable<short> value);
        partial void OnNullableInt16PropChanged();
        partial void OnNullableInt32PropChanging(Nullable<int> value);
        partial void OnNullableInt32PropChanged();
        partial void OnNullableInt64PropChanging(Nullable<long> value);
        partial void OnNullableInt64PropChanged();
        partial void OnNullableSBytePropChanging(Nullable<sbyte> value);
        partial void OnNullableSBytePropChanged();
        partial void OnNullableSinglePropChanging(Nullable<float> value);
        partial void OnNullableSinglePropChanged();
        partial void OnNullableTimeSpanListPropChanging(IEnumerable<Nullable<TimeSpan>> value);
        partial void OnNullableTimeSpanListPropChanged();
        partial void OnNullableTimeSpanPropChanging(Nullable<TimeSpan> value);
        partial void OnNullableTimeSpanPropChanged();
        partial void OnNullableUInt16PropChanging(Nullable<ushort> value);
        partial void OnNullableUInt16PropChanged();
        partial void OnNullableUInt32PropChanging(Nullable<uint> value);
        partial void OnNullableUInt32PropChanged();
        partial void OnNullableUInt64PropChanging(Nullable<ulong> value);
        partial void OnNullableUInt64PropChanged();
        partial void OnSBytePropChanging(sbyte value);
        partial void OnSBytePropChanged();
        partial void OnSinglePropChanging(float value);
        partial void OnSinglePropChanged();
        partial void OnStringPropChanging(string value);
        partial void OnStringPropChanged();
        partial void OnStringsPropChanging(IEnumerable<string> value);
        partial void OnStringsPropChanged();
        partial void OnTimeSpanListPropChanging(IEnumerable<TimeSpan> value);
        partial void OnTimeSpanListPropChanged();
        partial void OnTimeSpanPropChanging(TimeSpan value);
        partial void OnTimeSpanPropChanged();
        partial void OnUInt16PropChanging(ushort value);
        partial void OnUInt16PropChanged();
        partial void OnUInt32PropChanging(uint value);
        partial void OnUInt32PropChanged();
        partial void OnUInt64PropChanging(ulong value);
        partial void OnUInt64PropChanged();
        partial void OnUInt64sPropChanging(ulong[] value);
        partial void OnUInt64sPropChanged();
        partial void OnUriPropChanging(Uri value);
        partial void OnUriPropChanged();
        partial void OnXElementPropChanging(XElement value);
        partial void OnXElementPropChanged();
        partial void OnTestNullablePredefinedInvoking(Nullable<decimal> d, Nullable<DateTime> dt, Nullable<TimeSpan> ts, Nullable<Guid> g, Nullable<TestEnum> en, Nullable<DateTimeOffset> dto);
        partial void OnTestNullablePredefinedInvoked();
        partial void OnTestNullablePrimitiveInvoking(Nullable<bool> b1, Nullable<byte> b2, Nullable<sbyte> sb, Nullable<short> int16, Nullable<ushort> uint16, Nullable<int> int32, Nullable<uint> uint32, Nullable<long> int64, Nullable<ulong> uint64, Nullable<char> ch, Nullable<double> d, Nullable<float> s);
        partial void OnTestNullablePrimitiveInvoked();
        partial void OnTestPredefinedInvoking(string s, decimal d, DateTime dt, TimeSpan ts, IEnumerable<string> strings, Uri uri, Guid g, byte[] b, byte[] bArray, TestEnum en, Dictionary<string, string> dictionary, DateTimeOffset dto);
        partial void OnTestPredefinedInvoked();
        partial void OnTestPrimitiveInvoking(bool b1, byte b2, sbyte sb, short int16, ushort uint16, int int32, uint uint32, long int64, ulong uint64, char ch, double d, float s);
        partial void OnTestPrimitiveInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MixedType"/> class.
        /// </summary>
        public MixedType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BinaryProp' value.
        /// </summary>
        [DataMember()]
        public byte[] BinaryProp
        {
            get
            {
                return this._binaryProp;
            }
            set
            {
                if ((this._binaryProp != value))
                {
                    this.OnBinaryPropChanging(value);
                    this.RaiseDataMemberChanging("BinaryProp");
                    this.ValidateProperty("BinaryProp", value);
                    this._binaryProp = value;
                    this.RaiseDataMemberChanged("BinaryProp");
                    this.OnBinaryPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BooleanProp' value.
        /// </summary>
        [DataMember()]
        public bool BooleanProp
        {
            get
            {
                return this._booleanProp;
            }
            set
            {
                if ((this._booleanProp != value))
                {
                    this.OnBooleanPropChanging(value);
                    this.RaiseDataMemberChanging("BooleanProp");
                    this.ValidateProperty("BooleanProp", value);
                    this._booleanProp = value;
                    this.RaiseDataMemberChanged("BooleanProp");
                    this.OnBooleanPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ByteArrayProp' value.
        /// </summary>
        [DataMember()]
        public byte[] ByteArrayProp
        {
            get
            {
                return this._byteArrayProp;
            }
            set
            {
                if ((this._byteArrayProp != value))
                {
                    this.OnByteArrayPropChanging(value);
                    this.RaiseDataMemberChanging("ByteArrayProp");
                    this.ValidateProperty("ByteArrayProp", value);
                    this._byteArrayProp = value;
                    this.RaiseDataMemberChanged("ByteArrayProp");
                    this.OnByteArrayPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ByteProp' value.
        /// </summary>
        [DataMember()]
        public byte ByteProp
        {
            get
            {
                return this._byteProp;
            }
            set
            {
                if ((this._byteProp != value))
                {
                    this.OnBytePropChanging(value);
                    this.RaiseDataMemberChanging("ByteProp");
                    this.ValidateProperty("ByteProp", value);
                    this._byteProp = value;
                    this.RaiseDataMemberChanged("ByteProp");
                    this.OnBytePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CharProp' value.
        /// </summary>
        [DataMember()]
        public char CharProp
        {
            get
            {
                return this._charProp;
            }
            set
            {
                if ((this._charProp != value))
                {
                    this.OnCharPropChanging(value);
                    this.RaiseDataMemberChanging("CharProp");
                    this.ValidateProperty("CharProp", value);
                    this._charProp = value;
                    this.RaiseDataMemberChanged("CharProp");
                    this.OnCharPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateTimeOffsetProp' value.
        /// </summary>
        [DataMember()]
        public DateTimeOffset DateTimeOffsetProp
        {
            get
            {
                return this._dateTimeOffsetProp;
            }
            set
            {
                if ((this._dateTimeOffsetProp != value))
                {
                    this.OnDateTimeOffsetPropChanging(value);
                    this.RaiseDataMemberChanging("DateTimeOffsetProp");
                    this.ValidateProperty("DateTimeOffsetProp", value);
                    this._dateTimeOffsetProp = value;
                    this.RaiseDataMemberChanged("DateTimeOffsetProp");
                    this.OnDateTimeOffsetPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateTimeOffsetsCollectionProp' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<DateTimeOffset> DateTimeOffsetsCollectionProp
        {
            get
            {
                return this._dateTimeOffsetsCollectionProp;
            }
            set
            {
                if ((this._dateTimeOffsetsCollectionProp != value))
                {
                    this.OnDateTimeOffsetsCollectionPropChanging(value);
                    this.RaiseDataMemberChanging("DateTimeOffsetsCollectionProp");
                    this.ValidateProperty("DateTimeOffsetsCollectionProp", value);
                    this._dateTimeOffsetsCollectionProp = value;
                    this.RaiseDataMemberChanged("DateTimeOffsetsCollectionProp");
                    this.OnDateTimeOffsetsCollectionPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateTimeProp' value.
        /// </summary>
        [DataMember()]
        public DateTime DateTimeProp
        {
            get
            {
                return this._dateTimeProp;
            }
            set
            {
                if ((this._dateTimeProp != value))
                {
                    this.OnDateTimePropChanging(value);
                    this.RaiseDataMemberChanging("DateTimeProp");
                    this.ValidateProperty("DateTimeProp", value);
                    this._dateTimeProp = value;
                    this.RaiseDataMemberChanged("DateTimeProp");
                    this.OnDateTimePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateTimesCollectionProp' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<DateTime> DateTimesCollectionProp
        {
            get
            {
                return this._dateTimesCollectionProp;
            }
            set
            {
                if ((this._dateTimesCollectionProp != value))
                {
                    this.OnDateTimesCollectionPropChanging(value);
                    this.RaiseDataMemberChanging("DateTimesCollectionProp");
                    this.ValidateProperty("DateTimesCollectionProp", value);
                    this._dateTimesCollectionProp = value;
                    this.RaiseDataMemberChanged("DateTimesCollectionProp");
                    this.OnDateTimesCollectionPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DecimalProp' value.
        /// </summary>
        [DataMember()]
        public decimal DecimalProp
        {
            get
            {
                return this._decimalProp;
            }
            set
            {
                if ((this._decimalProp != value))
                {
                    this.OnDecimalPropChanging(value);
                    this.RaiseDataMemberChanging("DecimalProp");
                    this.ValidateProperty("DecimalProp", value);
                    this._decimalProp = value;
                    this.RaiseDataMemberChanged("DecimalProp");
                    this.OnDecimalPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DictionaryDateTimeOffsetProp' value.
        /// </summary>
        [DataMember()]
        public Dictionary<DateTimeOffset, DateTimeOffset> DictionaryDateTimeOffsetProp
        {
            get
            {
                return this._dictionaryDateTimeOffsetProp;
            }
            set
            {
                if ((this._dictionaryDateTimeOffsetProp != value))
                {
                    this.OnDictionaryDateTimeOffsetPropChanging(value);
                    this.RaiseDataMemberChanging("DictionaryDateTimeOffsetProp");
                    this.ValidateProperty("DictionaryDateTimeOffsetProp", value);
                    this._dictionaryDateTimeOffsetProp = value;
                    this.RaiseDataMemberChanged("DictionaryDateTimeOffsetProp");
                    this.OnDictionaryDateTimeOffsetPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DictionaryDateTimeProp' value.
        /// </summary>
        [DataMember()]
        public Dictionary<DateTime, DateTime> DictionaryDateTimeProp
        {
            get
            {
                return this._dictionaryDateTimeProp;
            }
            set
            {
                if ((this._dictionaryDateTimeProp != value))
                {
                    this.OnDictionaryDateTimePropChanging(value);
                    this.RaiseDataMemberChanging("DictionaryDateTimeProp");
                    this.ValidateProperty("DictionaryDateTimeProp", value);
                    this._dictionaryDateTimeProp = value;
                    this.RaiseDataMemberChanged("DictionaryDateTimeProp");
                    this.OnDictionaryDateTimePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DictionaryGuidProp' value.
        /// </summary>
        [DataMember()]
        public Dictionary<Guid, Guid> DictionaryGuidProp
        {
            get
            {
                return this._dictionaryGuidProp;
            }
            set
            {
                if ((this._dictionaryGuidProp != value))
                {
                    this.OnDictionaryGuidPropChanging(value);
                    this.RaiseDataMemberChanging("DictionaryGuidProp");
                    this.ValidateProperty("DictionaryGuidProp", value);
                    this._dictionaryGuidProp = value;
                    this.RaiseDataMemberChanged("DictionaryGuidProp");
                    this.OnDictionaryGuidPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DictionaryStringProp' value.
        /// </summary>
        [DataMember()]
        public Dictionary<string, string> DictionaryStringProp
        {
            get
            {
                return this._dictionaryStringProp;
            }
            set
            {
                if ((this._dictionaryStringProp != value))
                {
                    this.OnDictionaryStringPropChanging(value);
                    this.RaiseDataMemberChanging("DictionaryStringProp");
                    this.ValidateProperty("DictionaryStringProp", value);
                    this._dictionaryStringProp = value;
                    this.RaiseDataMemberChanged("DictionaryStringProp");
                    this.OnDictionaryStringPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DictionaryTestEnumProp' value.
        /// </summary>
        [DataMember()]
        public Dictionary<TestEnum, TestEnum> DictionaryTestEnumProp
        {
            get
            {
                return this._dictionaryTestEnumProp;
            }
            set
            {
                if ((this._dictionaryTestEnumProp != value))
                {
                    this.OnDictionaryTestEnumPropChanging(value);
                    this.RaiseDataMemberChanging("DictionaryTestEnumProp");
                    this.ValidateProperty("DictionaryTestEnumProp", value);
                    this._dictionaryTestEnumProp = value;
                    this.RaiseDataMemberChanged("DictionaryTestEnumProp");
                    this.OnDictionaryTestEnumPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DictionaryXElementProp' value.
        /// </summary>
        [DataMember()]
        public Dictionary<XElement, XElement> DictionaryXElementProp
        {
            get
            {
                return this._dictionaryXElementProp;
            }
            set
            {
                if ((this._dictionaryXElementProp != value))
                {
                    this.OnDictionaryXElementPropChanging(value);
                    this.RaiseDataMemberChanging("DictionaryXElementProp");
                    this.ValidateProperty("DictionaryXElementProp", value);
                    this._dictionaryXElementProp = value;
                    this.RaiseDataMemberChanged("DictionaryXElementProp");
                    this.OnDictionaryXElementPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DoubleProp' value.
        /// </summary>
        [DataMember()]
        public double DoubleProp
        {
            get
            {
                return this._doubleProp;
            }
            set
            {
                if ((this._doubleProp != value))
                {
                    this.OnDoublePropChanging(value);
                    this.RaiseDataMemberChanging("DoubleProp");
                    this.ValidateProperty("DoubleProp", value);
                    this._doubleProp = value;
                    this.RaiseDataMemberChanged("DoubleProp");
                    this.OnDoublePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EnumProp' value.
        /// </summary>
        [DataMember()]
        public TestEnum EnumProp
        {
            get
            {
                return this._enumProp;
            }
            set
            {
                if ((this._enumProp != value))
                {
                    this.OnEnumPropChanging(value);
                    this.RaiseDataMemberChanging("EnumProp");
                    this.ValidateProperty("EnumProp", value);
                    this._enumProp = value;
                    this.RaiseDataMemberChanged("EnumProp");
                    this.OnEnumPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EnumsProp' value.
        /// </summary>
        [DataMember()]
        public TestEnum[] EnumsProp
        {
            get
            {
                return this._enumsProp;
            }
            set
            {
                if ((this._enumsProp != value))
                {
                    this.OnEnumsPropChanging(value);
                    this.RaiseDataMemberChanging("EnumsProp");
                    this.ValidateProperty("EnumsProp", value);
                    this._enumsProp = value;
                    this.RaiseDataMemberChanged("EnumsProp");
                    this.OnEnumsPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GuidProp' value.
        /// </summary>
        [DataMember()]
        public Guid GuidProp
        {
            get
            {
                return this._guidProp;
            }
            set
            {
                if ((this._guidProp != value))
                {
                    this.OnGuidPropChanging(value);
                    this.RaiseDataMemberChanging("GuidProp");
                    this.ValidateProperty("GuidProp", value);
                    this._guidProp = value;
                    this.RaiseDataMemberChanged("GuidProp");
                    this.OnGuidPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GuidsProp' value.
        /// </summary>
        [DataMember()]
        public Guid[] GuidsProp
        {
            get
            {
                return this._guidsProp;
            }
            set
            {
                if ((this._guidsProp != value))
                {
                    this.OnGuidsPropChanging(value);
                    this.RaiseDataMemberChanging("GuidsProp");
                    this.ValidateProperty("GuidsProp", value);
                    this._guidsProp = value;
                    this.RaiseDataMemberChanged("GuidsProp");
                    this.OnGuidsPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Int16Prop' value.
        /// </summary>
        [DataMember()]
        public short Int16Prop
        {
            get
            {
                return this._int16Prop;
            }
            set
            {
                if ((this._int16Prop != value))
                {
                    this.OnInt16PropChanging(value);
                    this.RaiseDataMemberChanging("Int16Prop");
                    this.ValidateProperty("Int16Prop", value);
                    this._int16Prop = value;
                    this.RaiseDataMemberChanged("Int16Prop");
                    this.OnInt16PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Int32Prop' value.
        /// </summary>
        [DataMember()]
        public int Int32Prop
        {
            get
            {
                return this._int32Prop;
            }
            set
            {
                if ((this._int32Prop != value))
                {
                    this.OnInt32PropChanging(value);
                    this.RaiseDataMemberChanging("Int32Prop");
                    this.ValidateProperty("Int32Prop", value);
                    this._int32Prop = value;
                    this.RaiseDataMemberChanged("Int32Prop");
                    this.OnInt32PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Int64Prop' value.
        /// </summary>
        [DataMember()]
        public long Int64Prop
        {
            get
            {
                return this._int64Prop;
            }
            set
            {
                if ((this._int64Prop != value))
                {
                    this.OnInt64PropChanging(value);
                    this.RaiseDataMemberChanging("Int64Prop");
                    this.ValidateProperty("Int64Prop", value);
                    this._int64Prop = value;
                    this.RaiseDataMemberChanged("Int64Prop");
                    this.OnInt64PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IntsProp' value.
        /// </summary>
        [DataMember()]
        public int[] IntsProp
        {
            get
            {
                return this._intsProp;
            }
            set
            {
                if ((this._intsProp != value))
                {
                    this.OnIntsPropChanging(value);
                    this.RaiseDataMemberChanging("IntsProp");
                    this.ValidateProperty("IntsProp", value);
                    this._intsProp = value;
                    this.RaiseDataMemberChanged("IntsProp");
                    this.OnIntsPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableBooleanProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> NullableBooleanProp
        {
            get
            {
                return this._nullableBooleanProp;
            }
            set
            {
                if ((this._nullableBooleanProp != value))
                {
                    this.OnNullableBooleanPropChanging(value);
                    this.RaiseDataMemberChanging("NullableBooleanProp");
                    this.ValidateProperty("NullableBooleanProp", value);
                    this._nullableBooleanProp = value;
                    this.RaiseDataMemberChanged("NullableBooleanProp");
                    this.OnNullableBooleanPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableByteProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<byte> NullableByteProp
        {
            get
            {
                return this._nullableByteProp;
            }
            set
            {
                if ((this._nullableByteProp != value))
                {
                    this.OnNullableBytePropChanging(value);
                    this.RaiseDataMemberChanging("NullableByteProp");
                    this.ValidateProperty("NullableByteProp", value);
                    this._nullableByteProp = value;
                    this.RaiseDataMemberChanged("NullableByteProp");
                    this.OnNullableBytePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableCharProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<char> NullableCharProp
        {
            get
            {
                return this._nullableCharProp;
            }
            set
            {
                if ((this._nullableCharProp != value))
                {
                    this.OnNullableCharPropChanging(value);
                    this.RaiseDataMemberChanging("NullableCharProp");
                    this.ValidateProperty("NullableCharProp", value);
                    this._nullableCharProp = value;
                    this.RaiseDataMemberChanged("NullableCharProp");
                    this.OnNullableCharPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableDateTimeOffsetCollectionProp' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<Nullable<DateTimeOffset>> NullableDateTimeOffsetCollectionProp
        {
            get
            {
                return this._nullableDateTimeOffsetCollectionProp;
            }
            set
            {
                if ((this._nullableDateTimeOffsetCollectionProp != value))
                {
                    this.OnNullableDateTimeOffsetCollectionPropChanging(value);
                    this.RaiseDataMemberChanging("NullableDateTimeOffsetCollectionProp");
                    this.ValidateProperty("NullableDateTimeOffsetCollectionProp", value);
                    this._nullableDateTimeOffsetCollectionProp = value;
                    this.RaiseDataMemberChanged("NullableDateTimeOffsetCollectionProp");
                    this.OnNullableDateTimeOffsetCollectionPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableDateTimeOffsetProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTimeOffset> NullableDateTimeOffsetProp
        {
            get
            {
                return this._nullableDateTimeOffsetProp;
            }
            set
            {
                if ((this._nullableDateTimeOffsetProp != value))
                {
                    this.OnNullableDateTimeOffsetPropChanging(value);
                    this.RaiseDataMemberChanging("NullableDateTimeOffsetProp");
                    this.ValidateProperty("NullableDateTimeOffsetProp", value);
                    this._nullableDateTimeOffsetProp = value;
                    this.RaiseDataMemberChanged("NullableDateTimeOffsetProp");
                    this.OnNullableDateTimeOffsetPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableDateTimeProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> NullableDateTimeProp
        {
            get
            {
                return this._nullableDateTimeProp;
            }
            set
            {
                if ((this._nullableDateTimeProp != value))
                {
                    this.OnNullableDateTimePropChanging(value);
                    this.RaiseDataMemberChanging("NullableDateTimeProp");
                    this.ValidateProperty("NullableDateTimeProp", value);
                    this._nullableDateTimeProp = value;
                    this.RaiseDataMemberChanged("NullableDateTimeProp");
                    this.OnNullableDateTimePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableDateTimesCollectionProp' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<Nullable<DateTime>> NullableDateTimesCollectionProp
        {
            get
            {
                return this._nullableDateTimesCollectionProp;
            }
            set
            {
                if ((this._nullableDateTimesCollectionProp != value))
                {
                    this.OnNullableDateTimesCollectionPropChanging(value);
                    this.RaiseDataMemberChanging("NullableDateTimesCollectionProp");
                    this.ValidateProperty("NullableDateTimesCollectionProp", value);
                    this._nullableDateTimesCollectionProp = value;
                    this.RaiseDataMemberChanged("NullableDateTimesCollectionProp");
                    this.OnNullableDateTimesCollectionPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableDecimalProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> NullableDecimalProp
        {
            get
            {
                return this._nullableDecimalProp;
            }
            set
            {
                if ((this._nullableDecimalProp != value))
                {
                    this.OnNullableDecimalPropChanging(value);
                    this.RaiseDataMemberChanging("NullableDecimalProp");
                    this.ValidateProperty("NullableDecimalProp", value);
                    this._nullableDecimalProp = value;
                    this.RaiseDataMemberChanged("NullableDecimalProp");
                    this.OnNullableDecimalPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableDictionaryDateTimeOffsetProp' value.
        /// </summary>
        [DataMember()]
        public Dictionary<DateTimeOffset, Nullable<DateTimeOffset>> NullableDictionaryDateTimeOffsetProp
        {
            get
            {
                return this._nullableDictionaryDateTimeOffsetProp;
            }
            set
            {
                if ((this._nullableDictionaryDateTimeOffsetProp != value))
                {
                    this.OnNullableDictionaryDateTimeOffsetPropChanging(value);
                    this.RaiseDataMemberChanging("NullableDictionaryDateTimeOffsetProp");
                    this.ValidateProperty("NullableDictionaryDateTimeOffsetProp", value);
                    this._nullableDictionaryDateTimeOffsetProp = value;
                    this.RaiseDataMemberChanged("NullableDictionaryDateTimeOffsetProp");
                    this.OnNullableDictionaryDateTimeOffsetPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableDictionaryDateTimeProp' value.
        /// </summary>
        [DataMember()]
        public Dictionary<DateTime, Nullable<DateTime>> NullableDictionaryDateTimeProp
        {
            get
            {
                return this._nullableDictionaryDateTimeProp;
            }
            set
            {
                if ((this._nullableDictionaryDateTimeProp != value))
                {
                    this.OnNullableDictionaryDateTimePropChanging(value);
                    this.RaiseDataMemberChanging("NullableDictionaryDateTimeProp");
                    this.ValidateProperty("NullableDictionaryDateTimeProp", value);
                    this._nullableDictionaryDateTimeProp = value;
                    this.RaiseDataMemberChanged("NullableDictionaryDateTimeProp");
                    this.OnNullableDictionaryDateTimePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableDoubleProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> NullableDoubleProp
        {
            get
            {
                return this._nullableDoubleProp;
            }
            set
            {
                if ((this._nullableDoubleProp != value))
                {
                    this.OnNullableDoublePropChanging(value);
                    this.RaiseDataMemberChanging("NullableDoubleProp");
                    this.ValidateProperty("NullableDoubleProp", value);
                    this._nullableDoubleProp = value;
                    this.RaiseDataMemberChanged("NullableDoubleProp");
                    this.OnNullableDoublePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableEnumProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<TestEnum> NullableEnumProp
        {
            get
            {
                return this._nullableEnumProp;
            }
            set
            {
                if ((this._nullableEnumProp != value))
                {
                    this.OnNullableEnumPropChanging(value);
                    this.RaiseDataMemberChanging("NullableEnumProp");
                    this.ValidateProperty("NullableEnumProp", value);
                    this._nullableEnumProp = value;
                    this.RaiseDataMemberChanged("NullableEnumProp");
                    this.OnNullableEnumPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableEnumsArrayProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime>[] NullableEnumsArrayProp
        {
            get
            {
                return this._nullableEnumsArrayProp;
            }
            set
            {
                if ((this._nullableEnumsArrayProp != value))
                {
                    this.OnNullableEnumsArrayPropChanging(value);
                    this.RaiseDataMemberChanging("NullableEnumsArrayProp");
                    this.ValidateProperty("NullableEnumsArrayProp", value);
                    this._nullableEnumsArrayProp = value;
                    this.RaiseDataMemberChanged("NullableEnumsArrayProp");
                    this.OnNullableEnumsArrayPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableGuidProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> NullableGuidProp
        {
            get
            {
                return this._nullableGuidProp;
            }
            set
            {
                if ((this._nullableGuidProp != value))
                {
                    this.OnNullableGuidPropChanging(value);
                    this.RaiseDataMemberChanging("NullableGuidProp");
                    this.ValidateProperty("NullableGuidProp", value);
                    this._nullableGuidProp = value;
                    this.RaiseDataMemberChanged("NullableGuidProp");
                    this.OnNullableGuidPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableInt16Prop' value.
        /// </summary>
        [DataMember()]
        public Nullable<short> NullableInt16Prop
        {
            get
            {
                return this._nullableInt16Prop;
            }
            set
            {
                if ((this._nullableInt16Prop != value))
                {
                    this.OnNullableInt16PropChanging(value);
                    this.RaiseDataMemberChanging("NullableInt16Prop");
                    this.ValidateProperty("NullableInt16Prop", value);
                    this._nullableInt16Prop = value;
                    this.RaiseDataMemberChanged("NullableInt16Prop");
                    this.OnNullableInt16PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableInt32Prop' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> NullableInt32Prop
        {
            get
            {
                return this._nullableInt32Prop;
            }
            set
            {
                if ((this._nullableInt32Prop != value))
                {
                    this.OnNullableInt32PropChanging(value);
                    this.RaiseDataMemberChanging("NullableInt32Prop");
                    this.ValidateProperty("NullableInt32Prop", value);
                    this._nullableInt32Prop = value;
                    this.RaiseDataMemberChanged("NullableInt32Prop");
                    this.OnNullableInt32PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableInt64Prop' value.
        /// </summary>
        [DataMember()]
        public Nullable<long> NullableInt64Prop
        {
            get
            {
                return this._nullableInt64Prop;
            }
            set
            {
                if ((this._nullableInt64Prop != value))
                {
                    this.OnNullableInt64PropChanging(value);
                    this.RaiseDataMemberChanging("NullableInt64Prop");
                    this.ValidateProperty("NullableInt64Prop", value);
                    this._nullableInt64Prop = value;
                    this.RaiseDataMemberChanged("NullableInt64Prop");
                    this.OnNullableInt64PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableSByteProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<sbyte> NullableSByteProp
        {
            get
            {
                return this._nullableSByteProp;
            }
            set
            {
                if ((this._nullableSByteProp != value))
                {
                    this.OnNullableSBytePropChanging(value);
                    this.RaiseDataMemberChanging("NullableSByteProp");
                    this.ValidateProperty("NullableSByteProp", value);
                    this._nullableSByteProp = value;
                    this.RaiseDataMemberChanged("NullableSByteProp");
                    this.OnNullableSBytePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableSingleProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<float> NullableSingleProp
        {
            get
            {
                return this._nullableSingleProp;
            }
            set
            {
                if ((this._nullableSingleProp != value))
                {
                    this.OnNullableSinglePropChanging(value);
                    this.RaiseDataMemberChanging("NullableSingleProp");
                    this.ValidateProperty("NullableSingleProp", value);
                    this._nullableSingleProp = value;
                    this.RaiseDataMemberChanged("NullableSingleProp");
                    this.OnNullableSinglePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableTimeSpanListProp' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<Nullable<TimeSpan>> NullableTimeSpanListProp
        {
            get
            {
                return this._nullableTimeSpanListProp;
            }
            set
            {
                if ((this._nullableTimeSpanListProp != value))
                {
                    this.OnNullableTimeSpanListPropChanging(value);
                    this.RaiseDataMemberChanging("NullableTimeSpanListProp");
                    this.ValidateProperty("NullableTimeSpanListProp", value);
                    this._nullableTimeSpanListProp = value;
                    this.RaiseDataMemberChanged("NullableTimeSpanListProp");
                    this.OnNullableTimeSpanListPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableTimeSpanProp' value.
        /// </summary>
        [DataMember()]
        public Nullable<TimeSpan> NullableTimeSpanProp
        {
            get
            {
                return this._nullableTimeSpanProp;
            }
            set
            {
                if ((this._nullableTimeSpanProp != value))
                {
                    this.OnNullableTimeSpanPropChanging(value);
                    this.RaiseDataMemberChanging("NullableTimeSpanProp");
                    this.ValidateProperty("NullableTimeSpanProp", value);
                    this._nullableTimeSpanProp = value;
                    this.RaiseDataMemberChanged("NullableTimeSpanProp");
                    this.OnNullableTimeSpanPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableUInt16Prop' value.
        /// </summary>
        [DataMember()]
        public Nullable<ushort> NullableUInt16Prop
        {
            get
            {
                return this._nullableUInt16Prop;
            }
            set
            {
                if ((this._nullableUInt16Prop != value))
                {
                    this.OnNullableUInt16PropChanging(value);
                    this.RaiseDataMemberChanging("NullableUInt16Prop");
                    this.ValidateProperty("NullableUInt16Prop", value);
                    this._nullableUInt16Prop = value;
                    this.RaiseDataMemberChanged("NullableUInt16Prop");
                    this.OnNullableUInt16PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableUInt32Prop' value.
        /// </summary>
        [DataMember()]
        public Nullable<uint> NullableUInt32Prop
        {
            get
            {
                return this._nullableUInt32Prop;
            }
            set
            {
                if ((this._nullableUInt32Prop != value))
                {
                    this.OnNullableUInt32PropChanging(value);
                    this.RaiseDataMemberChanging("NullableUInt32Prop");
                    this.ValidateProperty("NullableUInt32Prop", value);
                    this._nullableUInt32Prop = value;
                    this.RaiseDataMemberChanged("NullableUInt32Prop");
                    this.OnNullableUInt32PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NullableUInt64Prop' value.
        /// </summary>
        [DataMember()]
        public Nullable<ulong> NullableUInt64Prop
        {
            get
            {
                return this._nullableUInt64Prop;
            }
            set
            {
                if ((this._nullableUInt64Prop != value))
                {
                    this.OnNullableUInt64PropChanging(value);
                    this.RaiseDataMemberChanging("NullableUInt64Prop");
                    this.ValidateProperty("NullableUInt64Prop", value);
                    this._nullableUInt64Prop = value;
                    this.RaiseDataMemberChanged("NullableUInt64Prop");
                    this.OnNullableUInt64PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SByteProp' value.
        /// </summary>
        [DataMember()]
        public sbyte SByteProp
        {
            get
            {
                return this._sByteProp;
            }
            set
            {
                if ((this._sByteProp != value))
                {
                    this.OnSBytePropChanging(value);
                    this.RaiseDataMemberChanging("SByteProp");
                    this.ValidateProperty("SByteProp", value);
                    this._sByteProp = value;
                    this.RaiseDataMemberChanged("SByteProp");
                    this.OnSBytePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SingleProp' value.
        /// </summary>
        [DataMember()]
        public float SingleProp
        {
            get
            {
                return this._singleProp;
            }
            set
            {
                if ((this._singleProp != value))
                {
                    this.OnSinglePropChanging(value);
                    this.RaiseDataMemberChanging("SingleProp");
                    this.ValidateProperty("SingleProp", value);
                    this._singleProp = value;
                    this.RaiseDataMemberChanged("SingleProp");
                    this.OnSinglePropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StringProp' value.
        /// </summary>
        [DataMember()]
        public string StringProp
        {
            get
            {
                return this._stringProp;
            }
            set
            {
                if ((this._stringProp != value))
                {
                    this.OnStringPropChanging(value);
                    this.RaiseDataMemberChanging("StringProp");
                    this.ValidateProperty("StringProp", value);
                    this._stringProp = value;
                    this.RaiseDataMemberChanged("StringProp");
                    this.OnStringPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StringsProp' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> StringsProp
        {
            get
            {
                return this._stringsProp;
            }
            set
            {
                if ((this._stringsProp != value))
                {
                    this.OnStringsPropChanging(value);
                    this.RaiseDataMemberChanging("StringsProp");
                    this.ValidateProperty("StringsProp", value);
                    this._stringsProp = value;
                    this.RaiseDataMemberChanged("StringsProp");
                    this.OnStringsPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeSpanListProp' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<TimeSpan> TimeSpanListProp
        {
            get
            {
                return this._timeSpanListProp;
            }
            set
            {
                if ((this._timeSpanListProp != value))
                {
                    this.OnTimeSpanListPropChanging(value);
                    this.RaiseDataMemberChanging("TimeSpanListProp");
                    this.ValidateProperty("TimeSpanListProp", value);
                    this._timeSpanListProp = value;
                    this.RaiseDataMemberChanged("TimeSpanListProp");
                    this.OnTimeSpanListPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeSpanProp' value.
        /// </summary>
        [DataMember()]
        public TimeSpan TimeSpanProp
        {
            get
            {
                return this._timeSpanProp;
            }
            set
            {
                if ((this._timeSpanProp != value))
                {
                    this.OnTimeSpanPropChanging(value);
                    this.RaiseDataMemberChanging("TimeSpanProp");
                    this.ValidateProperty("TimeSpanProp", value);
                    this._timeSpanProp = value;
                    this.RaiseDataMemberChanged("TimeSpanProp");
                    this.OnTimeSpanPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UInt16Prop' value.
        /// </summary>
        [DataMember()]
        public ushort UInt16Prop
        {
            get
            {
                return this._uInt16Prop;
            }
            set
            {
                if ((this._uInt16Prop != value))
                {
                    this.OnUInt16PropChanging(value);
                    this.RaiseDataMemberChanging("UInt16Prop");
                    this.ValidateProperty("UInt16Prop", value);
                    this._uInt16Prop = value;
                    this.RaiseDataMemberChanged("UInt16Prop");
                    this.OnUInt16PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UInt32Prop' value.
        /// </summary>
        [DataMember()]
        public uint UInt32Prop
        {
            get
            {
                return this._uInt32Prop;
            }
            set
            {
                if ((this._uInt32Prop != value))
                {
                    this.OnUInt32PropChanging(value);
                    this.RaiseDataMemberChanging("UInt32Prop");
                    this.ValidateProperty("UInt32Prop", value);
                    this._uInt32Prop = value;
                    this.RaiseDataMemberChanged("UInt32Prop");
                    this.OnUInt32PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UInt64Prop' value.
        /// </summary>
        [DataMember()]
        public ulong UInt64Prop
        {
            get
            {
                return this._uInt64Prop;
            }
            set
            {
                if ((this._uInt64Prop != value))
                {
                    this.OnUInt64PropChanging(value);
                    this.RaiseDataMemberChanging("UInt64Prop");
                    this.ValidateProperty("UInt64Prop", value);
                    this._uInt64Prop = value;
                    this.RaiseDataMemberChanged("UInt64Prop");
                    this.OnUInt64PropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UInt64sProp' value.
        /// </summary>
        [DataMember()]
        public ulong[] UInt64sProp
        {
            get
            {
                return this._uInt64sProp;
            }
            set
            {
                if ((this._uInt64sProp != value))
                {
                    this.OnUInt64sPropChanging(value);
                    this.RaiseDataMemberChanging("UInt64sProp");
                    this.ValidateProperty("UInt64sProp", value);
                    this._uInt64sProp = value;
                    this.RaiseDataMemberChanged("UInt64sProp");
                    this.OnUInt64sPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UriProp' value.
        /// </summary>
        [DataMember()]
        public Uri UriProp
        {
            get
            {
                return this._uriProp;
            }
            set
            {
                if ((this._uriProp != value))
                {
                    this.OnUriPropChanging(value);
                    this.RaiseDataMemberChanging("UriProp");
                    this.ValidateProperty("UriProp", value);
                    this._uriProp = value;
                    this.RaiseDataMemberChanged("UriProp");
                    this.OnUriPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'XElementProp' value.
        /// </summary>
        [DataMember()]
        public XElement XElementProp
        {
            get
            {
                return this._xElementProp;
            }
            set
            {
                if ((this._xElementProp != value))
                {
                    this.OnXElementPropChanging(value);
                    this.RaiseDataMemberChanging("XElementProp");
                    this.ValidateProperty("XElementProp", value);
                    this._xElementProp = value;
                    this.RaiseDataMemberChanged("XElementProp");
                    this.OnXElementPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TestNullablePredefined' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsTestNullablePredefinedInvoked
        {
            get
            {
                return base.IsActionInvoked("TestNullablePredefined");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TestNullablePredefined' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanTestNullablePredefined
        {
            get
            {
                return base.CanInvokeAction("TestNullablePredefined");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TestNullablePrimitive' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsTestNullablePrimitiveInvoked
        {
            get
            {
                return base.IsActionInvoked("TestNullablePrimitive");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TestNullablePrimitive' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanTestNullablePrimitive
        {
            get
            {
                return base.CanInvokeAction("TestNullablePrimitive");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TestPredefined' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsTestPredefinedInvoked
        {
            get
            {
                return base.IsActionInvoked("TestPredefined");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TestPredefined' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanTestPredefined
        {
            get
            {
                return base.CanInvokeAction("TestPredefined");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TestPrimitive' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsTestPrimitiveInvoked
        {
            get
            {
                return base.IsActionInvoked("TestPrimitive");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TestPrimitive' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanTestPrimitive
        {
            get
            {
                return base.CanInvokeAction("TestPrimitive");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
        
        /// <summary>
        /// Invokes the 'TestNullablePredefined' action on this entity.
        /// </summary>
        /// <param name="d">The value to pass to the server method's 'd' parameter.</param>
        /// <param name="dt">The value to pass to the server method's 'dt' parameter.</param>
        /// <param name="ts">The value to pass to the server method's 'ts' parameter.</param>
        /// <param name="g">The value to pass to the server method's 'g' parameter.</param>
        /// <param name="en">The value to pass to the server method's 'en' parameter.</param>
        /// <param name="dto">The value to pass to the server method's 'dto' parameter.</param>
        [EntityAction("TestNullablePredefined", AllowMultipleInvocations=false)]
        public void TestNullablePredefined(Nullable<decimal> d, Nullable<DateTime> dt, Nullable<TimeSpan> ts, Nullable<Guid> g, Nullable<TestEnum> en, Nullable<DateTimeOffset> dto)
        {
            this.OnTestNullablePredefinedInvoking(d, dt, ts, g, en, dto);
            base.InvokeAction("TestNullablePredefined", d, dt, ts, g, en, dto);
            this.OnTestNullablePredefinedInvoked();
        }
        
        /// <summary>
        /// Invokes the 'TestNullablePrimitive' action on this entity.
        /// </summary>
        /// <param name="b1">The value to pass to the server method's 'b1' parameter.</param>
        /// <param name="b2">The value to pass to the server method's 'b2' parameter.</param>
        /// <param name="sb">The value to pass to the server method's 'sb' parameter.</param>
        /// <param name="int16">The value to pass to the server method's 'int16' parameter.</param>
        /// <param name="uint16">The value to pass to the server method's 'uint16' parameter.</param>
        /// <param name="int32">The value to pass to the server method's 'int32' parameter.</param>
        /// <param name="uint32">The value to pass to the server method's 'uint32' parameter.</param>
        /// <param name="int64">The value to pass to the server method's 'int64' parameter.</param>
        /// <param name="uint64">The value to pass to the server method's 'uint64' parameter.</param>
        /// <param name="ch">The value to pass to the server method's 'ch' parameter.</param>
        /// <param name="d">The value to pass to the server method's 'd' parameter.</param>
        /// <param name="s">The value to pass to the server method's 's' parameter.</param>
        [EntityAction("TestNullablePrimitive", AllowMultipleInvocations=false)]
        public void TestNullablePrimitive(Nullable<bool> b1, Nullable<byte> b2, Nullable<sbyte> sb, Nullable<short> int16, Nullable<ushort> uint16, Nullable<int> int32, Nullable<uint> uint32, Nullable<long> int64, Nullable<ulong> uint64, Nullable<char> ch, Nullable<double> d, Nullable<float> s)
        {
            this.OnTestNullablePrimitiveInvoking(b1, b2, sb, int16, uint16, int32, uint32, int64, uint64, ch, d, s);
            base.InvokeAction("TestNullablePrimitive", b1, b2, sb, int16, uint16, int32, uint32, int64, uint64, ch, d, s);
            this.OnTestNullablePrimitiveInvoked();
        }
        
        /// <summary>
        /// Invokes the 'TestPredefined' action on this entity.
        /// </summary>
        /// <param name="s">The value to pass to the server method's 's' parameter.</param>
        /// <param name="d">The value to pass to the server method's 'd' parameter.</param>
        /// <param name="dt">The value to pass to the server method's 'dt' parameter.</param>
        /// <param name="ts">The value to pass to the server method's 'ts' parameter.</param>
        /// <param name="strings">The value to pass to the server method's 'strings' parameter.</param>
        /// <param name="uri">The value to pass to the server method's 'uri' parameter.</param>
        /// <param name="g">The value to pass to the server method's 'g' parameter.</param>
        /// <param name="b">The value to pass to the server method's 'b' parameter.</param>
        /// <param name="bArray">The value to pass to the server method's 'bArray' parameter.</param>
        /// <param name="en">The value to pass to the server method's 'en' parameter.</param>
        /// <param name="dictionary">The value to pass to the server method's 'dictionary' parameter.</param>
        /// <param name="dto">The value to pass to the server method's 'dto' parameter.</param>
        [EntityAction("TestPredefined", AllowMultipleInvocations=false)]
        public void TestPredefined(string s, decimal d, DateTime dt, TimeSpan ts, IEnumerable<string> strings, Uri uri, Guid g, byte[] b, byte[] bArray, TestEnum en, Dictionary<string, string> dictionary, DateTimeOffset dto)
        {
            this.OnTestPredefinedInvoking(s, d, dt, ts, strings, uri, g, b, bArray, en, dictionary, dto);
            base.InvokeAction("TestPredefined", s, d, dt, ts, strings, uri, g, b, bArray, en, dictionary, dto);
            this.OnTestPredefinedInvoked();
        }
        
        /// <summary>
        /// Invokes the 'TestPrimitive' action on this entity.
        /// </summary>
        /// <param name="b1">The value to pass to the server method's 'b1' parameter.</param>
        /// <param name="b2">The value to pass to the server method's 'b2' parameter.</param>
        /// <param name="sb">The value to pass to the server method's 'sb' parameter.</param>
        /// <param name="int16">The value to pass to the server method's 'int16' parameter.</param>
        /// <param name="uint16">The value to pass to the server method's 'uint16' parameter.</param>
        /// <param name="int32">The value to pass to the server method's 'int32' parameter.</param>
        /// <param name="uint32">The value to pass to the server method's 'uint32' parameter.</param>
        /// <param name="int64">The value to pass to the server method's 'int64' parameter.</param>
        /// <param name="uint64">The value to pass to the server method's 'uint64' parameter.</param>
        /// <param name="ch">The value to pass to the server method's 'ch' parameter.</param>
        /// <param name="d">The value to pass to the server method's 'd' parameter.</param>
        /// <param name="s">The value to pass to the server method's 's' parameter.</param>
        [EntityAction("TestPrimitive", AllowMultipleInvocations=false)]
        public void TestPrimitive(bool b1, byte b2, sbyte sb, short int16, ushort uint16, int int32, uint uint32, long int64, ulong uint64, char ch, double d, float s)
        {
            this.OnTestPrimitiveInvoking(b1, b2, sb, int16, uint16, int32, uint32, int64, uint64, ch, d, s);
            base.InvokeAction("TestPrimitive", b1, b2, sb, int16, uint16, int32, uint32, int64, uint64, ch, d, s);
            this.OnTestPrimitiveInvoked();
        }
    }
    
    /// <summary>
    /// The 'MultipartKeyTestEntity1' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class MultipartKeyTestEntity1 : Entity
    {
        
        private int _a;
        
        private string _b;
        
        private Nullable<int> _c;
        
        private char _d;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAChanging(int value);
        partial void OnAChanged();
        partial void OnBChanging(string value);
        partial void OnBChanged();
        partial void OnCChanging(Nullable<int> value);
        partial void OnCChanged();
        partial void OnDChanging(char value);
        partial void OnDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MultipartKeyTestEntity1"/> class.
        /// </summary>
        public MultipartKeyTestEntity1()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'A' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int A
        {
            get
            {
                return this._a;
            }
            set
            {
                if ((this._a != value))
                {
                    this.OnAChanging(value);
                    this.ValidateProperty("A", value);
                    this._a = value;
                    this.RaisePropertyChanged("A");
                    this.OnAChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'B' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string B
        {
            get
            {
                return this._b;
            }
            set
            {
                if ((this._b != value))
                {
                    this.OnBChanging(value);
                    this.ValidateProperty("B", value);
                    this._b = value;
                    this.RaisePropertyChanged("B");
                    this.OnBChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'C' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Nullable<int> C
        {
            get
            {
                return this._c;
            }
            set
            {
                if ((this._c != value))
                {
                    this.OnCChanging(value);
                    this.ValidateProperty("C", value);
                    this._c = value;
                    this.RaisePropertyChanged("C");
                    this.OnCChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'D' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public char D
        {
            get
            {
                return this._d;
            }
            set
            {
                if ((this._d != value))
                {
                    this.OnDChanging(value);
                    this.ValidateProperty("D", value);
                    this._d = value;
                    this.RaisePropertyChanged("D");
                    this.OnDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._b == null) 
                        || (this._c == null)))
            {
                return null;
            }
            return EntityKey.Create(this._a, this._b, this._c, this._d);
        }
    }
    
    /// <summary>
    /// The 'MultipartKeyTestEntity2' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class MultipartKeyTestEntity2 : Entity
    {
        
        private int _a;
        
        private string _b;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAChanging(int value);
        partial void OnAChanged();
        partial void OnBChanging(string value);
        partial void OnBChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MultipartKeyTestEntity2"/> class.
        /// </summary>
        public MultipartKeyTestEntity2()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'A' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int A
        {
            get
            {
                return this._a;
            }
            set
            {
                if ((this._a != value))
                {
                    this.OnAChanging(value);
                    this.ValidateProperty("A", value);
                    this._a = value;
                    this.RaisePropertyChanged("A");
                    this.OnAChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'B' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string B
        {
            get
            {
                return this._b;
            }
            set
            {
                if ((this._b != value))
                {
                    this.OnBChanging(value);
                    this.ValidateProperty("B", value);
                    this._b = value;
                    this.RaisePropertyChanged("B");
                    this.OnBChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._b == null))
            {
                return null;
            }
            return EntityKey.Create(this._a, this._b);
        }
    }
    
    /// <summary>
    /// The 'MultipartKeyTestEntity3' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class MultipartKeyTestEntity3 : Entity
    {
        
        private int _a;
        
        private char _b;
        
        private Nullable<int> _c;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAChanging(int value);
        partial void OnAChanged();
        partial void OnBChanging(char value);
        partial void OnBChanged();
        partial void OnCChanging(Nullable<int> value);
        partial void OnCChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MultipartKeyTestEntity3"/> class.
        /// </summary>
        public MultipartKeyTestEntity3()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'A' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int A
        {
            get
            {
                return this._a;
            }
            set
            {
                if ((this._a != value))
                {
                    this.OnAChanging(value);
                    this.ValidateProperty("A", value);
                    this._a = value;
                    this.RaisePropertyChanged("A");
                    this.OnAChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'B' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public char B
        {
            get
            {
                return this._b;
            }
            set
            {
                if ((this._b != value))
                {
                    this.OnBChanging(value);
                    this.ValidateProperty("B", value);
                    this._b = value;
                    this.RaisePropertyChanged("B");
                    this.OnBChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'C' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Nullable<int> C
        {
            get
            {
                return this._c;
            }
            set
            {
                if ((this._c != value))
                {
                    this.OnCChanging(value);
                    this.ValidateProperty("C", value);
                    this._c = value;
                    this.RaisePropertyChanged("C");
                    this.OnCChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._c == null))
            {
                return null;
            }
            return EntityKey.Create(this._a, this._b, this._c);
        }
    }
    
    /// <summary>
    /// The 'NullableFKChild' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class NullableFKChild : Entity
    {
        
        private string _data;
        
        private int _id;
        
        private EntityRef<NullableFKParent> _parent;
        
        private EntityRef<NullableFKParent> _parent2;
        
        private Nullable<int> _parentID;
        
        private Nullable<int> _parentID_Singleton;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnParentIDChanging(Nullable<int> value);
        partial void OnParentIDChanged();
        partial void OnParentID_SingletonChanging(Nullable<int> value);
        partial void OnParentID_SingletonChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NullableFKChild"/> class.
        /// </summary>
        public NullableFKChild()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public string Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="NullableFKParent"/> entity.
        /// </summary>
        [Association("Parent_Child", "ParentID", "ID", IsForeignKey=true)]
        public NullableFKParent Parent
        {
            get
            {
                if ((this._parent == null))
                {
                    this._parent = new EntityRef<NullableFKParent>(this, "Parent", this.FilterParent);
                }
                return this._parent.Entity;
            }
            set
            {
                NullableFKParent previous = this.Parent;
                if ((previous != value))
                {
                    this.ValidateProperty("Parent", value);
                    if ((previous != null))
                    {
                        this._parent.Entity = null;
                        previous.Children.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ParentID = value.ID;
                    }
                    else
                    {
                        this.ParentID = default(Nullable<int>);
                    }
                    this._parent.Entity = value;
                    if ((value != null))
                    {
                        value.Children.Add(this);
                    }
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="NullableFKParent"/> entity.
        /// </summary>
        [Association("Parent_Child_Singleton", "ParentID_Singleton", "ID", IsForeignKey=true)]
        public NullableFKParent Parent2
        {
            get
            {
                if ((this._parent2 == null))
                {
                    this._parent2 = new EntityRef<NullableFKParent>(this, "Parent2", this.FilterParent2);
                }
                return this._parent2.Entity;
            }
            set
            {
                NullableFKParent previous = this.Parent2;
                if ((previous != value))
                {
                    this.ValidateProperty("Parent2", value);
                    if ((previous != null))
                    {
                        this._parent2.Entity = null;
                        previous.Child = null;
                    }
                    if ((value != null))
                    {
                        this.ParentID_Singleton = value.ID;
                    }
                    else
                    {
                        this.ParentID_Singleton = default(Nullable<int>);
                    }
                    this._parent2.Entity = value;
                    if ((value != null))
                    {
                        value.Child = this;
                    }
                    this.RaisePropertyChanged("Parent2");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ParentID
        {
            get
            {
                return this._parentID;
            }
            set
            {
                if ((this._parentID != value))
                {
                    this.OnParentIDChanging(value);
                    this.RaiseDataMemberChanging("ParentID");
                    this.ValidateProperty("ParentID", value);
                    this._parentID = value;
                    this.RaiseDataMemberChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentID_Singleton' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ParentID_Singleton
        {
            get
            {
                return this._parentID_Singleton;
            }
            set
            {
                if ((this._parentID_Singleton != value))
                {
                    this.OnParentID_SingletonChanging(value);
                    this.RaiseDataMemberChanging("ParentID_Singleton");
                    this.ValidateProperty("ParentID_Singleton", value);
                    this._parentID_Singleton = value;
                    this.RaiseDataMemberChanged("ParentID_Singleton");
                    this.OnParentID_SingletonChanged();
                }
            }
        }
        
        private bool FilterParent(NullableFKParent entity)
        {
            return (entity.ID == this.ParentID);
        }
        
        private bool FilterParent2(NullableFKParent entity)
        {
            return (entity.ID == this.ParentID_Singleton);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'NullableFKParent' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class NullableFKParent : Entity
    {
        
        private EntityRef<NullableFKChild> _child;
        
        private EntityCollection<NullableFKChild> _children;
        
        private string _data;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NullableFKParent"/> class.
        /// </summary>
        public NullableFKParent()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="NullableFKChild"/> entity.
        /// </summary>
        [Association("Parent_Child_Singleton", "ID", "ParentID_Singleton")]
        public NullableFKChild Child
        {
            get
            {
                if ((this._child == null))
                {
                    this._child = new EntityRef<NullableFKChild>(this, "Child", this.FilterChild);
                }
                return this._child.Entity;
            }
            set
            {
                NullableFKChild previous = this.Child;
                if ((previous != value))
                {
                    this.ValidateProperty("Child", value);
                    if ((previous != null))
                    {
                        this._child.Entity = null;
                        previous.Parent2 = null;
                    }
                    this._child.Entity = value;
                    if ((value != null))
                    {
                        value.Parent2 = this;
                    }
                    this.RaisePropertyChanged("Child");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NullableFKChild"/> entity instances.
        /// </summary>
        [Association("Parent_Child", "ID", "ParentID")]
        public EntityCollection<NullableFKChild> Children
        {
            get
            {
                if ((this._children == null))
                {
                    this._children = new EntityCollection<NullableFKChild>(this, "Children", this.FilterChildren, this.AttachChildren, this.DetachChildren);
                }
                return this._children;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public string Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        private bool FilterChild(NullableFKChild entity)
        {
            return (entity.ParentID_Singleton == this.ID);
        }
        
        private void AttachChildren(NullableFKChild entity)
        {
            entity.Parent = this;
        }
        
        private void DetachChildren(NullableFKChild entity)
        {
            entity.Parent = null;
        }
        
        private bool FilterChildren(NullableFKChild entity)
        {
            return (entity.ParentID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'POCONoValidation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class POCONoValidation : Entity
    {
        
        private string _a;
        
        private string _b;
        
        private string _c;
        
        private string _d;
        
        private string _e;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAChanging(string value);
        partial void OnAChanged();
        partial void OnBChanging(string value);
        partial void OnBChanged();
        partial void OnCChanging(string value);
        partial void OnCChanged();
        partial void OnDChanging(string value);
        partial void OnDChanged();
        partial void OnEChanging(string value);
        partial void OnEChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="POCONoValidation"/> class.
        /// </summary>
        public POCONoValidation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'A' value.
        /// </summary>
        [DataMember()]
        public string A
        {
            get
            {
                return this._a;
            }
            set
            {
                if ((this._a != value))
                {
                    this.OnAChanging(value);
                    this.RaiseDataMemberChanging("A");
                    this.ValidateProperty("A", value);
                    this._a = value;
                    this.RaiseDataMemberChanged("A");
                    this.OnAChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'B' value.
        /// </summary>
        [DataMember()]
        public string B
        {
            get
            {
                return this._b;
            }
            set
            {
                if ((this._b != value))
                {
                    this.OnBChanging(value);
                    this.RaiseDataMemberChanging("B");
                    this.ValidateProperty("B", value);
                    this._b = value;
                    this.RaiseDataMemberChanged("B");
                    this.OnBChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'C' value.
        /// </summary>
        [DataMember()]
        public string C
        {
            get
            {
                return this._c;
            }
            set
            {
                if ((this._c != value))
                {
                    this.OnCChanging(value);
                    this.RaiseDataMemberChanging("C");
                    this.ValidateProperty("C", value);
                    this._c = value;
                    this.RaiseDataMemberChanged("C");
                    this.OnCChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'D' value.
        /// </summary>
        [DataMember()]
        public string D
        {
            get
            {
                return this._d;
            }
            set
            {
                if ((this._d != value))
                {
                    this.OnDChanging(value);
                    this.RaiseDataMemberChanging("D");
                    this.ValidateProperty("D", value);
                    this._d = value;
                    this.RaiseDataMemberChanged("D");
                    this.OnDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'E' value.
        /// </summary>
        [DataMember()]
        public string E
        {
            get
            {
                return this._e;
            }
            set
            {
                if ((this._e != value))
                {
                    this.OnEChanging(value);
                    this.RaiseDataMemberChanging("E");
                    this.ValidateProperty("E", value);
                    this._e = value;
                    this.RaiseDataMemberChanged("E");
                    this.OnEChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RoundtripOriginal_TestEntity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class RoundtripOriginal_TestEntity : Entity
    {
        
        private int _id;
        
        private int _nonRoundtrippedMember;
        
        private int _roundtrippedMember;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNonRoundtrippedMemberChanging(int value);
        partial void OnNonRoundtrippedMemberChanged();
        partial void OnRoundtrippedMemberChanging(int value);
        partial void OnRoundtrippedMemberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RoundtripOriginal_TestEntity"/> class.
        /// </summary>
        public RoundtripOriginal_TestEntity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NonRoundtrippedMember' value.
        /// </summary>
        [DataMember()]
        public int NonRoundtrippedMember
        {
            get
            {
                return this._nonRoundtrippedMember;
            }
            set
            {
                if ((this._nonRoundtrippedMember != value))
                {
                    this.OnNonRoundtrippedMemberChanging(value);
                    this.RaiseDataMemberChanging("NonRoundtrippedMember");
                    this.ValidateProperty("NonRoundtrippedMember", value);
                    this._nonRoundtrippedMember = value;
                    this.RaiseDataMemberChanged("NonRoundtrippedMember");
                    this.OnNonRoundtrippedMemberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoundtrippedMember' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int RoundtrippedMember
        {
            get
            {
                return this._roundtrippedMember;
            }
            set
            {
                if ((this._roundtrippedMember != value))
                {
                    this.OnRoundtrippedMemberChanging(value);
                    this.RaiseDataMemberChanging("RoundtrippedMember");
                    this.ValidateProperty("RoundtrippedMember", value);
                    this._roundtrippedMember = value;
                    this.RaiseDataMemberChanged("RoundtrippedMember");
                    this.OnRoundtrippedMemberChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RoundtripOriginal_TestEntity2' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    [RoundtripOriginal()]
    public sealed partial class RoundtripOriginal_TestEntity2 : Entity
    {
        
        private EntityRef<RoundtripOriginal_TestEntity> _assocProp;
        
        private int _id;
        
        private int _roundtrippedMember1;
        
        private int _roundtrippedMember2;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnRoundtrippedMember1Changing(int value);
        partial void OnRoundtrippedMember1Changed();
        partial void OnRoundtrippedMember2Changing(int value);
        partial void OnRoundtrippedMember2Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RoundtripOriginal_TestEntity2"/> class.
        /// </summary>
        public RoundtripOriginal_TestEntity2()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="RoundtripOriginal_TestEntity"/> entity.
        /// </summary>
        [Association("RTO_RTO2", "ID", "ID")]
        public RoundtripOriginal_TestEntity AssocProp
        {
            get
            {
                if ((this._assocProp == null))
                {
                    this._assocProp = new EntityRef<RoundtripOriginal_TestEntity>(this, "AssocProp", this.FilterAssocProp);
                }
                return this._assocProp.Entity;
            }
            set
            {
                RoundtripOriginal_TestEntity previous = this.AssocProp;
                if ((previous != value))
                {
                    this.ValidateProperty("AssocProp", value);
                    this._assocProp.Entity = value;
                    this.RaisePropertyChanged("AssocProp");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoundtrippedMember1' value.
        /// </summary>
        [DataMember()]
        public int RoundtrippedMember1
        {
            get
            {
                return this._roundtrippedMember1;
            }
            set
            {
                if ((this._roundtrippedMember1 != value))
                {
                    this.OnRoundtrippedMember1Changing(value);
                    this.RaiseDataMemberChanging("RoundtrippedMember1");
                    this.ValidateProperty("RoundtrippedMember1", value);
                    this._roundtrippedMember1 = value;
                    this.RaiseDataMemberChanged("RoundtrippedMember1");
                    this.OnRoundtrippedMember1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoundtrippedMember2' value.
        /// </summary>
        [DataMember()]
        public int RoundtrippedMember2
        {
            get
            {
                return this._roundtrippedMember2;
            }
            set
            {
                if ((this._roundtrippedMember2 != value))
                {
                    this.OnRoundtrippedMember2Changing(value);
                    this.RaiseDataMemberChanging("RoundtrippedMember2");
                    this.ValidateProperty("RoundtrippedMember2", value);
                    this._roundtrippedMember2 = value;
                    this.RaiseDataMemberChanged("RoundtrippedMember2");
                    this.OnRoundtrippedMember2Changed();
                }
            }
        }
        
        private bool FilterAssocProp(RoundtripOriginal_TestEntity entity)
        {
            return (entity.ID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RoundtripQueryEntity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class RoundtripQueryEntity : Entity
    {
        
        private int _id;
        
        private string _propB;
        
        private string _propC;
        
        private string _query;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPropBChanging(string value);
        partial void OnPropBChanged();
        partial void OnPropCChanging(string value);
        partial void OnPropCChanged();
        partial void OnQueryChanging(string value);
        partial void OnQueryChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RoundtripQueryEntity"/> class.
        /// </summary>
        public RoundtripQueryEntity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PropB' value.
        /// </summary>
        [DataMember()]
        public string PropB
        {
            get
            {
                return this._propB;
            }
            set
            {
                if ((this._propB != value))
                {
                    this.OnPropBChanging(value);
                    this.RaiseDataMemberChanging("PropB");
                    this.ValidateProperty("PropB", value);
                    this._propB = value;
                    this.RaiseDataMemberChanged("PropB");
                    this.OnPropBChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PropC' value.
        /// </summary>
        [DataMember()]
        public string PropC
        {
            get
            {
                return this._propC;
            }
            set
            {
                if ((this._propC != value))
                {
                    this.OnPropCChanging(value);
                    this.RaiseDataMemberChanging("PropC");
                    this.ValidateProperty("PropC", value);
                    this._propC = value;
                    this.RaiseDataMemberChanged("PropC");
                    this.OnPropCChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Query' value.
        /// </summary>
        [DataMember()]
        public string Query
        {
            get
            {
                return this._query;
            }
            set
            {
                if ((this._query != value))
                {
                    this.OnQueryChanging(value);
                    this.RaiseDataMemberChanging("Query");
                    this.ValidateProperty("Query", value);
                    this._query = value;
                    this.RaiseDataMemberChanged("Query");
                    this.OnQueryChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'TestCT' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class TestCT : ComplexObject
    {
        
        private int _ctProp1;
        
        private string _ctProp2;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCTProp1Changing(int value);
        partial void OnCTProp1Changed();
        partial void OnCTProp2Changing(string value);
        partial void OnCTProp2Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestCT"/> class.
        /// </summary>
        public TestCT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CTProp1' value.
        /// </summary>
        [DataMember()]
        public int CTProp1
        {
            get
            {
                return this._ctProp1;
            }
            set
            {
                if ((this._ctProp1 != value))
                {
                    this.OnCTProp1Changing(value);
                    this.RaiseDataMemberChanging("CTProp1");
                    this.ValidateProperty("CTProp1", value);
                    this._ctProp1 = value;
                    this.RaiseDataMemberChanged("CTProp1");
                    this.OnCTProp1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CTProp2' value.
        /// </summary>
        [DataMember()]
        public string CTProp2
        {
            get
            {
                return this._ctProp2;
            }
            set
            {
                if ((this._ctProp2 != value))
                {
                    this.OnCTProp2Changing(value);
                    this.RaiseDataMemberChanging("CTProp2");
                    this.ValidateProperty("CTProp2", value);
                    this._ctProp2 = value;
                    this.RaiseDataMemberChanged("CTProp2");
                    this.OnCTProp2Changed();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'TestCycles' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class TestCycles : Entity
    {
        
        private EntityRef<TestCycles> _includedT;
        
        private EntityCollection<TestCycles> _includedTs;
        
        private string _name;
        
        private string _parentName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentNameChanging(string value);
        partial void OnParentNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestCycles"/> class.
        /// </summary>
        public TestCycles()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TestCycles"/> entity.
        /// </summary>
        [Association("TestCycle_Parent", "ParentName", "Name", IsForeignKey=true)]
        public TestCycles IncludedT
        {
            get
            {
                if ((this._includedT == null))
                {
                    this._includedT = new EntityRef<TestCycles>(this, "IncludedT", this.FilterIncludedT);
                }
                return this._includedT.Entity;
            }
            set
            {
                TestCycles previous = this.IncludedT;
                if ((previous != value))
                {
                    this.ValidateProperty("IncludedT", value);
                    if ((previous != null))
                    {
                        this._includedT.Entity = null;
                        previous.IncludedTs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ParentName = value.Name;
                    }
                    else
                    {
                        this.ParentName = default(string);
                    }
                    this._includedT.Entity = value;
                    if ((value != null))
                    {
                        value.IncludedTs.Add(this);
                    }
                    this.RaisePropertyChanged("IncludedT");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="TestCycles"/> entity instances.
        /// </summary>
        [Association("TestCycle_Parent", "Name", "ParentName")]
        public EntityCollection<TestCycles> IncludedTs
        {
            get
            {
                if ((this._includedTs == null))
                {
                    this._includedTs = new EntityCollection<TestCycles>(this, "IncludedTs", this.FilterIncludedTs, this.AttachIncludedTs, this.DetachIncludedTs);
                }
                return this._includedTs;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentName' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string ParentName
        {
            get
            {
                return this._parentName;
            }
            set
            {
                if ((this._parentName != value))
                {
                    this.OnParentNameChanging(value);
                    this.RaiseDataMemberChanging("ParentName");
                    this.ValidateProperty("ParentName", value);
                    this._parentName = value;
                    this.RaiseDataMemberChanged("ParentName");
                    this.OnParentNameChanged();
                }
            }
        }
        
        private bool FilterIncludedT(TestCycles entity)
        {
            return (entity.Name == this.ParentName);
        }
        
        private void AttachIncludedTs(TestCycles entity)
        {
            entity.IncludedT = this;
        }
        
        private void DetachIncludedTs(TestCycles entity)
        {
            entity.IncludedT = null;
        }
        
        private bool FilterIncludedTs(TestCycles entity)
        {
            return (entity.ParentName == this.Name);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
    }
    
    /// <summary>
    /// The 'TestEntityForInvokeOperations' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class TestEntityForInvokeOperations : Entity
    {
        
        private TestCT _ctProp;
        
        private int _key;
        
        private string _strProp;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCTPropChanging(TestCT value);
        partial void OnCTPropChanged();
        partial void OnKeyChanging(int value);
        partial void OnKeyChanged();
        partial void OnStrPropChanging(string value);
        partial void OnStrPropChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestEntityForInvokeOperations"/> class.
        /// </summary>
        public TestEntityForInvokeOperations()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CTProp' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public TestCT CTProp
        {
            get
            {
                return this._ctProp;
            }
            set
            {
                if ((this._ctProp != value))
                {
                    this.OnCTPropChanging(value);
                    this.RaiseDataMemberChanging("CTProp");
                    this.ValidateProperty("CTProp", value);
                    this._ctProp = value;
                    this.RaiseDataMemberChanged("CTProp");
                    this.OnCTPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaisePropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StrProp' value.
        /// </summary>
        [DataMember()]
        public string StrProp
        {
            get
            {
                return this._strProp;
            }
            set
            {
                if ((this._strProp != value))
                {
                    this.OnStrPropChanging(value);
                    this.RaiseDataMemberChanging("StrProp");
                    this.ValidateProperty("StrProp", value);
                    this._strProp = value;
                    this.RaiseDataMemberChanged("StrProp");
                    this.OnStrPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._key;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'TestProvider_Scenarios' DomainService.
    /// </summary>
    public sealed partial class TestProvider_Scenarios : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestProvider_Scenarios"/> class.
        /// </summary>
        public TestProvider_Scenarios() : 
                this(new Uri("TestDomainServices-TestProvider_Scenarios.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestProvider_Scenarios"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The TestProvider_Scenarios service URI.</param>
        public TestProvider_Scenarios(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(ITestProvider_ScenariosContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestProvider_Scenarios"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public TestProvider_Scenarios(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="TestSideEffects"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<TestSideEffects> TestSideEffects
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TestSideEffects>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="A"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<A> As
        {
            get
            {
                return base.EntityContainer.GetEntitySet<A>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="B"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<B> Bs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<B>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CartItem"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<CartItem> CartItems
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CartItem>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Cart"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<Cart> Carts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Cart>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CityWithCacheData"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<CityWithCacheData> CityWithCacheDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CityWithCacheData>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="C"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<C> Cs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<C>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="D"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<D> Ds
        {
            get
            {
                return base.EntityContainer.GetEntitySet<D>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EntityWithDataContract"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<EntityWithDataContract> EntityWithDataContracts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EntityWithDataContract>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EntityWithDataContract2"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<EntityWithDataContract2> EntityWithDataContract2s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EntityWithDataContract2>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EntityWithSpecialTypeName"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<EntityWithSpecialTypeName> EntityWithSpecialTypeNames
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EntityWithSpecialTypeName>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Entity_TestEditableAttribute"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<Entity_TestEditableAttribute> Entity_TestEditableAttributes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Entity_TestEditableAttribute>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EntityWithDefaultDefaultValue"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<EntityWithDefaultDefaultValue> EntityWithDefaultDefaultValues
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EntityWithDefaultDefaultValue>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MixedType"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<MixedType> MixedTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MixedType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MultipartKeyTestEntity1"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<MultipartKeyTestEntity1> MultipartKeyTestEntity1s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MultipartKeyTestEntity1>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MultipartKeyTestEntity2"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<MultipartKeyTestEntity2> MultipartKeyTestEntity2s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MultipartKeyTestEntity2>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MultipartKeyTestEntity3"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<MultipartKeyTestEntity3> MultipartKeyTestEntity3s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MultipartKeyTestEntity3>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NullableFKParent"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<NullableFKParent> NullableFKParents
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NullableFKParent>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="POCONoValidation"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<POCONoValidation> POCONoValidations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<POCONoValidation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RoundtripOriginal_TestEntity2"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<RoundtripOriginal_TestEntity2> RoundtripOriginal_TestEntity2s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RoundtripOriginal_TestEntity2>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RoundtripOriginal_TestEntity"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<RoundtripOriginal_TestEntity> RoundtripOriginal_TestEntities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RoundtripOriginal_TestEntity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RoundtripQueryEntity"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<RoundtripQueryEntity> RoundtripQueryEntities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RoundtripQueryEntity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TestCycles"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<TestCycles> TestCycles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TestCycles>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TestEntityForInvokeOperations"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<TestEntityForInvokeOperations> TestEntityForInvokeOperations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TestEntityForInvokeOperations>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TimestampEntityA"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<TimestampEntityA> TimestampEntityAs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TimestampEntityA>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TimestampEntityB"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<TimestampEntityB> TimestampEntityBs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TimestampEntityB>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EntityWithXElement"/> entity instances that have been loaded into this <see cref="TestProvider_Scenarios"/> instance.
        /// </summary>
        public EntitySet<EntityWithXElement> EntityWithXElements
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EntityWithXElement>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TestSideEffects"/> entity instances using the 'CreateAndGetSideEffectsObjects' query.
        /// </summary>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TestSideEffects"/> entity instances.</returns>
        public EntityQuery<TestSideEffects> CreateAndGetSideEffectsObjectsQuery(string name)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("name", name);
            this.ValidateMethod("CreateAndGetSideEffectsObjectsQuery", parameters);
            return base.CreateQuery<TestSideEffects>("CreateAndGetSideEffectsObjects", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="A"/> entity instances using the 'GetAReturnNull' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="A"/> entity instances.</returns>
        public EntityQuery<A> GetAReturnNullQuery()
        {
            this.ValidateMethod("GetAReturnNullQuery", null);
            return base.CreateQuery<A>("GetAReturnNull", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="A"/> entity instances using the 'GetAs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="A"/> entity instances.</returns>
        public EntityQuery<A> GetAsQuery()
        {
            this.ValidateMethod("GetAsQuery", null);
            return base.CreateQuery<A>("GetAs", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="A"/> entity instances using the 'GetAsReturnNull' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="A"/> entity instances.</returns>
        public EntityQuery<A> GetAsReturnNullQuery()
        {
            this.ValidateMethod("GetAsReturnNullQuery", null);
            return base.CreateQuery<A>("GetAsReturnNull", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="B"/> entity instances using the 'GetBs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="B"/> entity instances.</returns>
        public EntityQuery<B> GetBsQuery()
        {
            this.ValidateMethod("GetBsQuery", null);
            return base.CreateQuery<B>("GetBs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CartItem"/> entity instances using the 'GetCartItems' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CartItem"/> entity instances.</returns>
        public EntityQuery<CartItem> GetCartItemsQuery()
        {
            this.ValidateMethod("GetCartItemsQuery", null);
            return base.CreateQuery<CartItem>("GetCartItems", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Cart"/> entity instances using the 'GetCarts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Cart"/> entity instances.</returns>
        public EntityQuery<Cart> GetCartsQuery()
        {
            this.ValidateMethod("GetCartsQuery", null);
            return base.CreateQuery<Cart>("GetCarts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesQuery()
        {
            this.ValidateMethod("GetCitiesQuery", null);
            return base.CreateQuery<CityWithCacheData>("GetCities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesInState' query.
        /// </summary>
        /// <param name="state">The value for the 'state' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesInStateQuery(string state)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("state", state);
            this.ValidateMethod("GetCitiesInStateQuery", parameters);
            return base.CreateQuery<CityWithCacheData>("GetCitiesInState", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesInStateWithCaching' query.
        /// </summary>
        /// <param name="state">The value for the 'state' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesInStateWithCachingQuery(string state)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("state", state);
            this.ValidateMethod("GetCitiesInStateWithCachingQuery", parameters);
            return base.CreateQuery<CityWithCacheData>("GetCitiesInStateWithCaching", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesInStateWithCaching2' query.
        /// </summary>
        /// <param name="state">The value for the 'state' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesInStateWithCaching2Query(string state)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("state", state);
            this.ValidateMethod("GetCitiesInStateWithCaching2Query", parameters);
            return base.CreateQuery<CityWithCacheData>("GetCitiesInStateWithCaching2", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesWithCacheLocationAny' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesWithCacheLocationAnyQuery()
        {
            this.ValidateMethod("GetCitiesWithCacheLocationAnyQuery", null);
            return base.CreateQuery<CityWithCacheData>("GetCitiesWithCacheLocationAny", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesWithCacheLocationDownstream' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesWithCacheLocationDownstreamQuery()
        {
            this.ValidateMethod("GetCitiesWithCacheLocationDownstreamQuery", null);
            return base.CreateQuery<CityWithCacheData>("GetCitiesWithCacheLocationDownstream", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesWithCacheLocationServer' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesWithCacheLocationServerQuery()
        {
            this.ValidateMethod("GetCitiesWithCacheLocationServerQuery", null);
            return base.CreateQuery<CityWithCacheData>("GetCitiesWithCacheLocationServer", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesWithCacheLocationServerAndClient' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesWithCacheLocationServerAndClientQuery()
        {
            this.ValidateMethod("GetCitiesWithCacheLocationServerAndClientQuery", null);
            return base.CreateQuery<CityWithCacheData>("GetCitiesWithCacheLocationServerAndClient", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesWithCaching' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesWithCachingQuery()
        {
            this.ValidateMethod("GetCitiesWithCachingQuery", null);
            return base.CreateQuery<CityWithCacheData>("GetCitiesWithCaching", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesWithCaching2' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesWithCaching2Query()
        {
            this.ValidateMethod("GetCitiesWithCaching2Query", null);
            return base.CreateQuery<CityWithCacheData>("GetCitiesWithCaching2", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesWithCachingAndThrow' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesWithCachingAndThrowQuery()
        {
            this.ValidateMethod("GetCitiesWithCachingAndThrowQuery", null);
            return base.CreateQuery<CityWithCacheData>("GetCitiesWithCachingAndThrow", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesWithCachingVaryByHeaders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesWithCachingVaryByHeadersQuery()
        {
            this.ValidateMethod("GetCitiesWithCachingVaryByHeadersQuery", null);
            return base.CreateQuery<CityWithCacheData>("GetCitiesWithCachingVaryByHeaders", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CityWithCacheData"/> entity instances using the 'GetCitiesWithCachingViaCacheProfile' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CityWithCacheData"/> entity instances.</returns>
        public EntityQuery<CityWithCacheData> GetCitiesWithCachingViaCacheProfileQuery()
        {
            this.ValidateMethod("GetCitiesWithCachingViaCacheProfileQuery", null);
            return base.CreateQuery<CityWithCacheData>("GetCitiesWithCachingViaCacheProfile", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="C"/> entity instances using the 'GetCs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="C"/> entity instances.</returns>
        public EntityQuery<C> GetCsQuery()
        {
            this.ValidateMethod("GetCsQuery", null);
            return base.CreateQuery<C>("GetCs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="D"/> entity instances using the 'GetDs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="D"/> entity instances.</returns>
        public EntityQuery<D> GetDsQuery()
        {
            this.ValidateMethod("GetDsQuery", null);
            return base.CreateQuery<D>("GetDs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityWithDataContract"/> entity instances using the 'GetEntitiesWithDataContracts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityWithDataContract"/> entity instances.</returns>
        public EntityQuery<EntityWithDataContract> GetEntitiesWithDataContractsQuery()
        {
            this.ValidateMethod("GetEntitiesWithDataContractsQuery", null);
            return base.CreateQuery<EntityWithDataContract>("GetEntitiesWithDataContracts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityWithDataContract2"/> entity instances using the 'GetEntitiesWithDataContracts2' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityWithDataContract2"/> entity instances.</returns>
        public EntityQuery<EntityWithDataContract2> GetEntitiesWithDataContracts2Query()
        {
            this.ValidateMethod("GetEntitiesWithDataContracts2Query", null);
            return base.CreateQuery<EntityWithDataContract2>("GetEntitiesWithDataContracts2", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityWithSpecialTypeName"/> entity instances using the 'GetEntitiesWithSpecialTypeName' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityWithSpecialTypeName"/> entity instances.</returns>
        public EntityQuery<EntityWithSpecialTypeName> GetEntitiesWithSpecialTypeNameQuery()
        {
            this.ValidateMethod("GetEntitiesWithSpecialTypeNameQuery", null);
            return base.CreateQuery<EntityWithSpecialTypeName>("GetEntitiesWithSpecialTypeName", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Entity_TestEditableAttribute"/> entity instances using the 'GetEntity_TestEditableAttributes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Entity_TestEditableAttribute"/> entity instances.</returns>
        public EntityQuery<Entity_TestEditableAttribute> GetEntity_TestEditableAttributesQuery()
        {
            this.ValidateMethod("GetEntity_TestEditableAttributesQuery", null);
            return base.CreateQuery<Entity_TestEditableAttribute>("GetEntity_TestEditableAttributes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityWithDefaultDefaultValue"/> entity instances using the 'GetEntityWithDefaultValue' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityWithDefaultDefaultValue"/> entity instances.</returns>
        public EntityQuery<EntityWithDefaultDefaultValue> GetEntityWithDefaultValueQuery()
        {
            this.ValidateMethod("GetEntityWithDefaultValueQuery", null);
            return base.CreateQuery<EntityWithDefaultDefaultValue>("GetEntityWithDefaultValue", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MixedType"/> entity instances using the 'GetMixedTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MixedType"/> entity instances.</returns>
        public EntityQuery<MixedType> GetMixedTypesQuery()
        {
            this.ValidateMethod("GetMixedTypesQuery", null);
            return base.CreateQuery<MixedType>("GetMixedTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MixedType"/> entity instances using the 'GetMixedTypes_BadAttributes' query.
        /// </summary>
        /// <param name="broiled">The value for the 'broiled' parameter of the query.</param>
        /// <param name="cheese">The value for the 'cheese' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MixedType"/> entity instances.</returns>
        // Unable to generate the following attributes for parameter 'broiled' due to the following errors:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsStringValid' on type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'.
        // [CustomValidationAttribute(typeof(TestDomainServices.ServerOnlyValidator), "IsStringValid")]
        // 
        // Unable to generate the following attributes for parameter 'cheese' due to the following errors:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsStringValid' on type 'TestDomainServices.ServerOnlyValidator' that is not accessible in the client project 'MockProject'.
        // [CustomValidationAttribute(typeof(TestDomainServices.ServerOnlyValidator), "IsStringValid")]
        // 
        public EntityQuery<MixedType> GetMixedTypes_BadAttributesQuery(char broiled, string cheese)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("broiled", broiled);
            parameters.Add("cheese", cheese);
            this.ValidateMethod("GetMixedTypes_BadAttributesQuery", parameters);
            return base.CreateQuery<MixedType>("GetMixedTypes_BadAttributes", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MixedType"/> entity instances using the 'GetMixedTypes_Nullable' query.
        /// </summary>
        /// <param name="idToChange">The value for the 'idToChange' parameter of the query.</param>
        /// <param name="b1">The value for the 'b1' parameter of the query.</param>
        /// <param name="b2">The value for the 'b2' parameter of the query.</param>
        /// <param name="sb">The value for the 'sb' parameter of the query.</param>
        /// <param name="int16">The value for the 'int16' parameter of the query.</param>
        /// <param name="uint16">The value for the 'uint16' parameter of the query.</param>
        /// <param name="int32">The value for the 'int32' parameter of the query.</param>
        /// <param name="uint32">The value for the 'uint32' parameter of the query.</param>
        /// <param name="int64">The value for the 'int64' parameter of the query.</param>
        /// <param name="uint64">The value for the 'uint64' parameter of the query.</param>
        /// <param name="ch">The value for the 'ch' parameter of the query.</param>
        /// <param name="d">The value for the 'd' parameter of the query.</param>
        /// <param name="s">The value for the 's' parameter of the query.</param>
        /// <param name="dec">The value for the 'dec' parameter of the query.</param>
        /// <param name="dt">The value for the 'dt' parameter of the query.</param>
        /// <param name="ts">The value for the 'ts' parameter of the query.</param>
        /// <param name="g">The value for the 'g' parameter of the query.</param>
        /// <param name="en">The value for the 'en' parameter of the query.</param>
        /// <param name="nullableTimeSpans">The value for the 'nullableTimeSpans' parameter of the query.</param>
        /// <param name="nullableDictionaryDateTime">The value for the 'nullableDictionaryDateTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MixedType"/> entity instances.</returns>
        public EntityQuery<MixedType> GetMixedTypes_NullableQuery(
                    string idToChange, 
                    Nullable<bool> b1, 
                    Nullable<byte> b2, 
                    Nullable<sbyte> sb, 
                    Nullable<short> int16, 
                    Nullable<ushort> uint16, 
                    Nullable<int> int32, 
                    Nullable<uint> uint32, 
                    Nullable<long> int64, 
                    Nullable<ulong> uint64, 
                    Nullable<char> ch, 
                    Nullable<double> d, 
                    Nullable<float> s, 
                    Nullable<decimal> dec, 
                    Nullable<DateTime> dt, 
                    Nullable<TimeSpan> ts, 
                    Nullable<Guid> g, 
                    Nullable<TestEnum> en, 
                    IEnumerable<Nullable<TimeSpan>> nullableTimeSpans, 
                    Dictionary<DateTime, Nullable<DateTime>> nullableDictionaryDateTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("idToChange", idToChange);
            parameters.Add("b1", b1);
            parameters.Add("b2", b2);
            parameters.Add("sb", sb);
            parameters.Add("int16", int16);
            parameters.Add("uint16", uint16);
            parameters.Add("int32", int32);
            parameters.Add("uint32", uint32);
            parameters.Add("int64", int64);
            parameters.Add("uint64", uint64);
            parameters.Add("ch", ch);
            parameters.Add("d", d);
            parameters.Add("s", s);
            parameters.Add("dec", dec);
            parameters.Add("dt", dt);
            parameters.Add("ts", ts);
            parameters.Add("g", g);
            parameters.Add("en", en);
            parameters.Add("nullableTimeSpans", nullableTimeSpans);
            parameters.Add("nullableDictionaryDateTime", nullableDictionaryDateTime);
            this.ValidateMethod("GetMixedTypes_NullableQuery", parameters);
            return base.CreateQuery<MixedType>("GetMixedTypes_Nullable", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MixedType"/> entity instances using the 'GetMixedTypes_Predefined' query.
        /// </summary>
        /// <param name="idToChange">The value for the 'idToChange' parameter of the query.</param>
        /// <param name="s">The value for the 's' parameter of the query.</param>
        /// <param name="d">The value for the 'd' parameter of the query.</param>
        /// <param name="dt">The value for the 'dt' parameter of the query.</param>
        /// <param name="ts">The value for the 'ts' parameter of the query.</param>
        /// <param name="dto">The value for the 'dto' parameter of the query.</param>
        /// <param name="strings">The value for the 'strings' parameter of the query.</param>
        /// <param name="uri">The value for the 'uri' parameter of the query.</param>
        /// <param name="g">The value for the 'g' parameter of the query.</param>
        /// <param name="b">The value for the 'b' parameter of the query.</param>
        /// <param name="x">The value for the 'x' parameter of the query.</param>
        /// <param name="bArray">The value for the 'bArray' parameter of the query.</param>
        /// <param name="en">The value for the 'en' parameter of the query.</param>
        /// <param name="ints">The value for the 'ints' parameter of the query.</param>
        /// <param name="dictionaryDateTime">The value for the 'dictionaryDateTime' parameter of the query.</param>
        /// <param name="dictionaryGuid">The value for the 'dictionaryGuid' parameter of the query.</param>
        /// <param name="dictionaryString">The value for the 'dictionaryString' parameter of the query.</param>
        /// <param name="dictionaryTestEnum">The value for the 'dictionaryTestEnum' parameter of the query.</param>
        /// <param name="dictionaryXElement">The value for the 'dictionaryXElement' parameter of the query.</param>
        /// <param name="dictionaryDateTimeOffset">The value for the 'dictionaryDateTimeOffset' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MixedType"/> entity instances.</returns>
        public EntityQuery<MixedType> GetMixedTypes_PredefinedQuery(
                    string idToChange, 
                    string s, 
                    decimal d, 
                    DateTime dt, 
                    TimeSpan ts, 
                    DateTimeOffset dto, 
                    IEnumerable<string> strings, 
                    Uri uri, 
                    Guid g, 
                    byte[] b, 
                    XElement x, 
                    byte[] bArray, 
                    TestEnum en, 
                    int[] ints, 
                    Dictionary<DateTime, DateTime> dictionaryDateTime, 
                    Dictionary<Guid, Guid> dictionaryGuid, 
                    Dictionary<string, string> dictionaryString, 
                    Dictionary<TestEnum, TestEnum> dictionaryTestEnum, 
                    Dictionary<XElement, XElement> dictionaryXElement, 
                    Dictionary<DateTimeOffset, DateTimeOffset> dictionaryDateTimeOffset)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("idToChange", idToChange);
            parameters.Add("s", s);
            parameters.Add("d", d);
            parameters.Add("dt", dt);
            parameters.Add("ts", ts);
            parameters.Add("dto", dto);
            parameters.Add("strings", strings);
            parameters.Add("uri", uri);
            parameters.Add("g", g);
            parameters.Add("b", b);
            parameters.Add("x", x);
            parameters.Add("bArray", bArray);
            parameters.Add("en", en);
            parameters.Add("ints", ints);
            parameters.Add("dictionaryDateTime", dictionaryDateTime);
            parameters.Add("dictionaryGuid", dictionaryGuid);
            parameters.Add("dictionaryString", dictionaryString);
            parameters.Add("dictionaryTestEnum", dictionaryTestEnum);
            parameters.Add("dictionaryXElement", dictionaryXElement);
            parameters.Add("dictionaryDateTimeOffset", dictionaryDateTimeOffset);
            this.ValidateMethod("GetMixedTypes_PredefinedQuery", parameters);
            return base.CreateQuery<MixedType>("GetMixedTypes_Predefined", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MixedType"/> entity instances using the 'GetMixedTypes_Primitive' query.
        /// </summary>
        /// <param name="idToChange">The value for the 'idToChange' parameter of the query.</param>
        /// <param name="b1">The value for the 'b1' parameter of the query.</param>
        /// <param name="b2">The value for the 'b2' parameter of the query.</param>
        /// <param name="sb">The value for the 'sb' parameter of the query.</param>
        /// <param name="int16">The value for the 'int16' parameter of the query.</param>
        /// <param name="uint16">The value for the 'uint16' parameter of the query.</param>
        /// <param name="int32">The value for the 'int32' parameter of the query.</param>
        /// <param name="uint32">The value for the 'uint32' parameter of the query.</param>
        /// <param name="int64">The value for the 'int64' parameter of the query.</param>
        /// <param name="uint64">The value for the 'uint64' parameter of the query.</param>
        /// <param name="ch">The value for the 'ch' parameter of the query.</param>
        /// <param name="d">The value for the 'd' parameter of the query.</param>
        /// <param name="s">The value for the 's' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MixedType"/> entity instances.</returns>
        public EntityQuery<MixedType> GetMixedTypes_PrimitiveQuery(string idToChange, bool b1, byte b2, sbyte sb, short int16, ushort uint16, int int32, uint uint32, long int64, ulong uint64, char ch, double d, float s)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("idToChange", idToChange);
            parameters.Add("b1", b1);
            parameters.Add("b2", b2);
            parameters.Add("sb", sb);
            parameters.Add("int16", int16);
            parameters.Add("uint16", uint16);
            parameters.Add("int32", int32);
            parameters.Add("uint32", uint32);
            parameters.Add("int64", int64);
            parameters.Add("uint64", uint64);
            parameters.Add("ch", ch);
            parameters.Add("d", d);
            parameters.Add("s", s);
            this.ValidateMethod("GetMixedTypes_PrimitiveQuery", parameters);
            return base.CreateQuery<MixedType>("GetMixedTypes_Primitive", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MixedType"/> entity instances using the 'GetMixedTypesThrow' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MixedType"/> entity instances.</returns>
        public EntityQuery<MixedType> GetMixedTypesThrowQuery()
        {
            this.ValidateMethod("GetMixedTypesThrowQuery", null);
            return base.CreateQuery<MixedType>("GetMixedTypesThrow", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MixedType"/> entity instances using the 'GetMixedTypeSuperset' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MixedType"/> entity instances.</returns>
        public EntityQuery<MixedType> GetMixedTypeSupersetQuery()
        {
            this.ValidateMethod("GetMixedTypeSupersetQuery", null);
            return base.CreateQuery<MixedType>("GetMixedTypeSuperset", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MultipartKeyTestEntity1"/> entity instances using the 'GetMultipartKeyTestEntity1s' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MultipartKeyTestEntity1"/> entity instances.</returns>
        public EntityQuery<MultipartKeyTestEntity1> GetMultipartKeyTestEntity1sQuery()
        {
            this.ValidateMethod("GetMultipartKeyTestEntity1sQuery", null);
            return base.CreateQuery<MultipartKeyTestEntity1>("GetMultipartKeyTestEntity1s", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MultipartKeyTestEntity2"/> entity instances using the 'GetMultipartKeyTestEntity2s' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MultipartKeyTestEntity2"/> entity instances.</returns>
        public EntityQuery<MultipartKeyTestEntity2> GetMultipartKeyTestEntity2sQuery()
        {
            this.ValidateMethod("GetMultipartKeyTestEntity2sQuery", null);
            return base.CreateQuery<MultipartKeyTestEntity2>("GetMultipartKeyTestEntity2s", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MultipartKeyTestEntity3"/> entity instances using the 'GetMultipartKeyTestEntity3s' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MultipartKeyTestEntity3"/> entity instances.</returns>
        public EntityQuery<MultipartKeyTestEntity3> GetMultipartKeyTestEntity3sQuery()
        {
            this.ValidateMethod("GetMultipartKeyTestEntity3sQuery", null);
            return base.CreateQuery<MultipartKeyTestEntity3>("GetMultipartKeyTestEntity3s", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NullableFKParent"/> entity instances using the 'GetNullableFKParents' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NullableFKParent"/> entity instances.</returns>
        public EntityQuery<NullableFKParent> GetNullableFKParentsQuery()
        {
            this.ValidateMethod("GetNullableFKParentsQuery", null);
            return base.CreateQuery<NullableFKParent>("GetNullableFKParents", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="POCONoValidation"/> entity instances using the 'GetPOCONoValidations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="POCONoValidation"/> entity instances.</returns>
        public EntityQuery<POCONoValidation> GetPOCONoValidationsQuery()
        {
            this.ValidateMethod("GetPOCONoValidationsQuery", null);
            return base.CreateQuery<POCONoValidation>("GetPOCONoValidations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RoundtripOriginal_TestEntity2"/> entity instances using the 'GetRoundtripOriginal_ClassAttribute_TestEntities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RoundtripOriginal_TestEntity2"/> entity instances.</returns>
        public EntityQuery<RoundtripOriginal_TestEntity2> GetRoundtripOriginal_ClassAttribute_TestEntitiesQuery()
        {
            this.ValidateMethod("GetRoundtripOriginal_ClassAttribute_TestEntitiesQuery", null);
            return base.CreateQuery<RoundtripOriginal_TestEntity2>("GetRoundtripOriginal_ClassAttribute_TestEntities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RoundtripOriginal_TestEntity"/> entity instances using the 'GetRoundtripOriginal_TestEntities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RoundtripOriginal_TestEntity"/> entity instances.</returns>
        public EntityQuery<RoundtripOriginal_TestEntity> GetRoundtripOriginal_TestEntitiesQuery()
        {
            this.ValidateMethod("GetRoundtripOriginal_TestEntitiesQuery", null);
            return base.CreateQuery<RoundtripOriginal_TestEntity>("GetRoundtripOriginal_TestEntities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RoundtripQueryEntity"/> entity instances using the 'GetRoundtripQueryEntities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RoundtripQueryEntity"/> entity instances.</returns>
        public EntityQuery<RoundtripQueryEntity> GetRoundtripQueryEntitiesQuery()
        {
            this.ValidateMethod("GetRoundtripQueryEntitiesQuery", null);
            return base.CreateQuery<RoundtripQueryEntity>("GetRoundtripQueryEntities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TestCycles"/> entity instances using the 'GetTestCyclesRoot' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TestCycles"/> entity instances.</returns>
        public EntityQuery<TestCycles> GetTestCyclesRootQuery()
        {
            this.ValidateMethod("GetTestCyclesRootQuery", null);
            return base.CreateQuery<TestCycles>("GetTestCyclesRoot", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TestCycles"/> entity instances using the 'GetTestCyclesTier1' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TestCycles"/> entity instances.</returns>
        public EntityQuery<TestCycles> GetTestCyclesTier1Query()
        {
            this.ValidateMethod("GetTestCyclesTier1Query", null);
            return base.CreateQuery<TestCycles>("GetTestCyclesTier1", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TestEntityForInvokeOperations"/> entity instances using the 'GetTestEntityForInvokeOperations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TestEntityForInvokeOperations"/> entity instances.</returns>
        public EntityQuery<TestEntityForInvokeOperations> GetTestEntityForInvokeOperationsQuery()
        {
            this.ValidateMethod("GetTestEntityForInvokeOperationsQuery", null);
            return base.CreateQuery<TestEntityForInvokeOperations>("GetTestEntityForInvokeOperations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TimestampEntityA"/> entity instances using the 'GetTimestampEntityAs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TimestampEntityA"/> entity instances.</returns>
        public EntityQuery<TimestampEntityA> GetTimestampEntityAsQuery()
        {
            this.ValidateMethod("GetTimestampEntityAsQuery", null);
            return base.CreateQuery<TimestampEntityA>("GetTimestampEntityAs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TimestampEntityB"/> entity instances using the 'GetTimestampEntityBs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TimestampEntityB"/> entity instances.</returns>
        public EntityQuery<TimestampEntityB> GetTimestampEntityBsQuery()
        {
            this.ValidateMethod("GetTimestampEntityBsQuery", null);
            return base.CreateQuery<TimestampEntityB>("GetTimestampEntityBs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityWithXElement"/> entity instances using the 'GetXElemEntities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityWithXElement"/> entity instances.</returns>
        public EntityQuery<EntityWithXElement> GetXElemEntitiesQuery()
        {
            this.ValidateMethod("GetXElemEntitiesQuery", null);
            return base.CreateQuery<EntityWithXElement>("GetXElemEntities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="A"/> entity instances using the 'QueryWithParamValidation' query.
        /// </summary>
        /// <param name="a">The value for the 'a' parameter of the query.</param>
        /// <param name="b">The value for the 'b' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="A"/> entity instances.</returns>
        public EntityQuery<A> QueryWithParamValidationQuery([Range(0, 10)] int a, [StringLength(2)] string b)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("a", a);
            parameters.Add("b", b);
            this.ValidateMethod("QueryWithParamValidationQuery", parameters);
            return base.CreateQuery<A>("QueryWithParamValidation", parameters, false, true);
        }
        
        /// <summary>
        /// Invokes the 'TestPrimitive' method of the specified <see cref="MixedType"/> entity.
        /// </summary>
        /// <param name="entity">The <see cref="MixedType"/> entity instance.</param>
        /// <param name="b1">The value for the 'b1' parameter for this action.</param>
        /// <param name="b2">The value for the 'b2' parameter for this action.</param>
        /// <param name="sb">The value for the 'sb' parameter for this action.</param>
        /// <param name="int16">The value for the 'int16' parameter for this action.</param>
        /// <param name="uint16">The value for the 'uint16' parameter for this action.</param>
        /// <param name="int32">The value for the 'int32' parameter for this action.</param>
        /// <param name="uint32">The value for the 'uint32' parameter for this action.</param>
        /// <param name="int64">The value for the 'int64' parameter for this action.</param>
        /// <param name="uint64">The value for the 'uint64' parameter for this action.</param>
        /// <param name="ch">The value for the 'ch' parameter for this action.</param>
        /// <param name="d">The value for the 'd' parameter for this action.</param>
        /// <param name="s">The value for the 's' parameter for this action.</param>
        public void TestPrimitive(MixedType entity, bool b1, byte b2, sbyte sb, short int16, ushort uint16, int int32, uint uint32, long int64, ulong uint64, char ch, double d, float s)
        {
            entity.TestPrimitive(b1, b2, sb, int16, uint16, int32, uint32, int64, uint64, ch, d, s);
        }
        
        /// <summary>
        /// Invokes the 'TestPredefined' method of the specified <see cref="MixedType"/> entity.
        /// </summary>
        /// <param name="entity">The <see cref="MixedType"/> entity instance.</param>
        /// <param name="s">The value for the 's' parameter for this action.</param>
        /// <param name="d">The value for the 'd' parameter for this action.</param>
        /// <param name="dt">The value for the 'dt' parameter for this action.</param>
        /// <param name="ts">The value for the 'ts' parameter for this action.</param>
        /// <param name="strings">The value for the 'strings' parameter for this action.</param>
        /// <param name="uri">The value for the 'uri' parameter for this action.</param>
        /// <param name="g">The value for the 'g' parameter for this action.</param>
        /// <param name="b">The value for the 'b' parameter for this action.</param>
        /// <param name="bArray">The value for the 'bArray' parameter for this action.</param>
        /// <param name="en">The value for the 'en' parameter for this action.</param>
        /// <param name="dictionary">The value for the 'dictionary' parameter for this action.</param>
        /// <param name="dto">The value for the 'dto' parameter for this action.</param>
        public void TestPredefined(MixedType entity, string s, decimal d, DateTime dt, TimeSpan ts, IEnumerable<string> strings, Uri uri, Guid g, byte[] b, byte[] bArray, TestEnum en, Dictionary<string, string> dictionary, DateTimeOffset dto)
        {
            entity.TestPredefined(s, d, dt, ts, strings, uri, g, b, bArray, en, dictionary, dto);
        }
        
        /// <summary>
        /// Invokes the 'TestNullablePrimitive' method of the specified <see cref="MixedType"/> entity.
        /// </summary>
        /// <param name="entity">The <see cref="MixedType"/> entity instance.</param>
        /// <param name="b1">The value for the 'b1' parameter for this action.</param>
        /// <param name="b2">The value for the 'b2' parameter for this action.</param>
        /// <param name="sb">The value for the 'sb' parameter for this action.</param>
        /// <param name="int16">The value for the 'int16' parameter for this action.</param>
        /// <param name="uint16">The value for the 'uint16' parameter for this action.</param>
        /// <param name="int32">The value for the 'int32' parameter for this action.</param>
        /// <param name="uint32">The value for the 'uint32' parameter for this action.</param>
        /// <param name="int64">The value for the 'int64' parameter for this action.</param>
        /// <param name="uint64">The value for the 'uint64' parameter for this action.</param>
        /// <param name="ch">The value for the 'ch' parameter for this action.</param>
        /// <param name="d">The value for the 'd' parameter for this action.</param>
        /// <param name="s">The value for the 's' parameter for this action.</param>
        public void TestNullablePrimitive(MixedType entity, Nullable<bool> b1, Nullable<byte> b2, Nullable<sbyte> sb, Nullable<short> int16, Nullable<ushort> uint16, Nullable<int> int32, Nullable<uint> uint32, Nullable<long> int64, Nullable<ulong> uint64, Nullable<char> ch, Nullable<double> d, Nullable<float> s)
        {
            entity.TestNullablePrimitive(b1, b2, sb, int16, uint16, int32, uint32, int64, uint64, ch, d, s);
        }
        
        /// <summary>
        /// Invokes the 'TestNullablePredefined' method of the specified <see cref="MixedType"/> entity.
        /// </summary>
        /// <param name="entity">The <see cref="MixedType"/> entity instance.</param>
        /// <param name="d">The value for the 'd' parameter for this action.</param>
        /// <param name="dt">The value for the 'dt' parameter for this action.</param>
        /// <param name="ts">The value for the 'ts' parameter for this action.</param>
        /// <param name="g">The value for the 'g' parameter for this action.</param>
        /// <param name="en">The value for the 'en' parameter for this action.</param>
        /// <param name="dto">The value for the 'dto' parameter for this action.</param>
        public void TestNullablePredefined(MixedType entity, Nullable<decimal> d, Nullable<DateTime> dt, Nullable<TimeSpan> ts, Nullable<Guid> g, Nullable<TestEnum> en, Nullable<DateTimeOffset> dto)
        {
            entity.TestNullablePredefined(d, dt, ts, g, en, dto);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IncrementBid1ForA' method of the DomainService.
        /// </summary>
        /// <param name="a">The value for the 'a' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IncrementBid1ForA(A a, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("a", a);
            this.ValidateMethod("IncrementBid1ForA", parameters);
            return this.InvokeOperation<int>("IncrementBid1ForA", typeof(int), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IncrementBid1ForA' method of the DomainService.
        /// </summary>
        /// <param name="a">The value for the 'a' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IncrementBid1ForA(A a)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("a", a);
            this.ValidateMethod("IncrementBid1ForA", parameters);
            return this.InvokeOperation<int>("IncrementBid1ForA", typeof(int), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IncrementBid1ForA' method of the DomainService.
        /// </summary>
        /// <param name="a">The value for the 'a' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<int>> IncrementBid1ForAAsync(A a, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("a", a);
            this.ValidateMethod("IncrementBid1ForA", parameters);
            return this.InvokeOperationAsync<int>("IncrementBid1ForA", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IncrementBid1ForABy' method of the DomainService.
        /// </summary>
        /// <param name="a">The value for the 'a' parameter of this action.</param>
        /// <param name="delta">The value for the 'delta' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IncrementBid1ForABy(A a, [Range(5, 10)] int delta, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("a", a);
            parameters.Add("delta", delta);
            this.ValidateMethod("IncrementBid1ForABy", parameters);
            return this.InvokeOperation<int>("IncrementBid1ForABy", typeof(int), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IncrementBid1ForABy' method of the DomainService.
        /// </summary>
        /// <param name="a">The value for the 'a' parameter of this action.</param>
        /// <param name="delta">The value for the 'delta' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IncrementBid1ForABy(A a, [Range(5, 10)] int delta)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("a", a);
            parameters.Add("delta", delta);
            this.ValidateMethod("IncrementBid1ForABy", parameters);
            return this.InvokeOperation<int>("IncrementBid1ForABy", typeof(int), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IncrementBid1ForABy' method of the DomainService.
        /// </summary>
        /// <param name="a">The value for the 'a' parameter of this action.</param>
        /// <param name="delta">The value for the 'delta' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<int>> IncrementBid1ForAByAsync(A a, [Range(5, 10)] int delta, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("a", a);
            parameters.Add("delta", delta);
            this.ValidateMethod("IncrementBid1ForABy", parameters);
            return this.InvokeOperationAsync<int>("IncrementBid1ForABy", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InvokeOperationWithParamValidation' method of the DomainService.
        /// </summary>
        /// <param name="a">The value for the 'a' parameter of this action.</param>
        /// <param name="b">The value for the 'b' parameter of this action.</param>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> InvokeOperationWithParamValidation([Range(0, 10)] int a, [StringLength(2)] string b, CityWithCacheData entity, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("a", a);
            parameters.Add("b", b);
            parameters.Add("entity", entity);
            this.ValidateMethod("InvokeOperationWithParamValidation", parameters);
            return this.InvokeOperation<bool>("InvokeOperationWithParamValidation", typeof(bool), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InvokeOperationWithParamValidation' method of the DomainService.
        /// </summary>
        /// <param name="a">The value for the 'a' parameter of this action.</param>
        /// <param name="b">The value for the 'b' parameter of this action.</param>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> InvokeOperationWithParamValidation([Range(0, 10)] int a, [StringLength(2)] string b, CityWithCacheData entity)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("a", a);
            parameters.Add("b", b);
            parameters.Add("entity", entity);
            this.ValidateMethod("InvokeOperationWithParamValidation", parameters);
            return this.InvokeOperation<bool>("InvokeOperationWithParamValidation", typeof(bool), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InvokeOperationWithParamValidation' method of the DomainService.
        /// </summary>
        /// <param name="a">The value for the 'a' parameter of this action.</param>
        /// <param name="b">The value for the 'b' parameter of this action.</param>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<bool>> InvokeOperationWithParamValidationAsync([Range(0, 10)] int a, [StringLength(2)] string b, CityWithCacheData entity, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("a", a);
            parameters.Add("b", b);
            parameters.Add("entity", entity);
            this.ValidateMethod("InvokeOperationWithParamValidation", parameters);
            return this.InvokeOperationAsync<bool>("InvokeOperationWithParamValidation", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InvokeOpWithIEnumerableParam' method of the DomainService.
        /// </summary>
        /// <param name="list">The value for the 'list' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<TestEntityForInvokeOperations>> InvokeOpWithIEnumerableParam(IEnumerable<TestEntityForInvokeOperations> list, Action<InvokeOperation<IEnumerable<TestEntityForInvokeOperations>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("list", list);
            this.ValidateMethod("InvokeOpWithIEnumerableParam", parameters);
            return this.InvokeOperation<IEnumerable<TestEntityForInvokeOperations>>("InvokeOpWithIEnumerableParam", typeof(IEnumerable<TestEntityForInvokeOperations>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InvokeOpWithIEnumerableParam' method of the DomainService.
        /// </summary>
        /// <param name="list">The value for the 'list' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<TestEntityForInvokeOperations>> InvokeOpWithIEnumerableParam(IEnumerable<TestEntityForInvokeOperations> list)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("list", list);
            this.ValidateMethod("InvokeOpWithIEnumerableParam", parameters);
            return this.InvokeOperation<IEnumerable<TestEntityForInvokeOperations>>("InvokeOpWithIEnumerableParam", typeof(IEnumerable<TestEntityForInvokeOperations>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InvokeOpWithIEnumerableParam' method of the DomainService.
        /// </summary>
        /// <param name="list">The value for the 'list' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<IEnumerable<TestEntityForInvokeOperations>>> InvokeOpWithIEnumerableParamAsync(IEnumerable<TestEntityForInvokeOperations> list, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("list", list);
            this.ValidateMethod("InvokeOpWithIEnumerableParam", parameters);
            return this.InvokeOperationAsync<IEnumerable<TestEntityForInvokeOperations>>("InvokeOpWithIEnumerableParam", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InvokeOpWithIEnumerableParamAndNoSideEffects' method of the DomainService.
        /// </summary>
        /// <param name="list">The value for the 'list' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<TestEntityForInvokeOperations>> InvokeOpWithIEnumerableParamAndNoSideEffects(IEnumerable<TestEntityForInvokeOperations> list, Action<InvokeOperation<IEnumerable<TestEntityForInvokeOperations>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("list", list);
            this.ValidateMethod("InvokeOpWithIEnumerableParamAndNoSideEffects", parameters);
            return this.InvokeOperation<IEnumerable<TestEntityForInvokeOperations>>("InvokeOpWithIEnumerableParamAndNoSideEffects", typeof(IEnumerable<TestEntityForInvokeOperations>), parameters, false, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InvokeOpWithIEnumerableParamAndNoSideEffects' method of the DomainService.
        /// </summary>
        /// <param name="list">The value for the 'list' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<TestEntityForInvokeOperations>> InvokeOpWithIEnumerableParamAndNoSideEffects(IEnumerable<TestEntityForInvokeOperations> list)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("list", list);
            this.ValidateMethod("InvokeOpWithIEnumerableParamAndNoSideEffects", parameters);
            return this.InvokeOperation<IEnumerable<TestEntityForInvokeOperations>>("InvokeOpWithIEnumerableParamAndNoSideEffects", typeof(IEnumerable<TestEntityForInvokeOperations>), parameters, false, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InvokeOpWithIEnumerableParamAndNoSideEffects' method of the DomainService.
        /// </summary>
        /// <param name="list">The value for the 'list' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<IEnumerable<TestEntityForInvokeOperations>>> InvokeOpWithIEnumerableParamAndNoSideEffectsAsync(IEnumerable<TestEntityForInvokeOperations> list, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("list", list);
            this.ValidateMethod("InvokeOpWithIEnumerableParamAndNoSideEffects", parameters);
            return this.InvokeOperationAsync<IEnumerable<TestEntityForInvokeOperations>>("InvokeOpWithIEnumerableParamAndNoSideEffects", parameters, false, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'MethodRequiresAuthentication' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation MethodRequiresAuthentication(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("MethodRequiresAuthentication", null);
            return this.InvokeOperation("MethodRequiresAuthentication", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'MethodRequiresAuthentication' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation MethodRequiresAuthentication()
        {
            this.ValidateMethod("MethodRequiresAuthentication", null);
            return this.InvokeOperation("MethodRequiresAuthentication", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'MethodRequiresAuthentication' method of the DomainService.
        /// </summary>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult> MethodRequiresAuthenticationAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ValidateMethod("MethodRequiresAuthentication", null);
            return this.InvokeOperationAsync("MethodRequiresAuthentication", null, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnHttpMethodWithoutSideEffects_Online' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ReturnHttpMethodWithoutSideEffects_Online(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("ReturnHttpMethodWithoutSideEffects_Online", null);
            return this.InvokeOperation<string>("ReturnHttpMethodWithoutSideEffects_Online", typeof(string), null, false, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnHttpMethodWithoutSideEffects_Online' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ReturnHttpMethodWithoutSideEffects_Online()
        {
            this.ValidateMethod("ReturnHttpMethodWithoutSideEffects_Online", null);
            return this.InvokeOperation<string>("ReturnHttpMethodWithoutSideEffects_Online", typeof(string), null, false, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnHttpMethodWithoutSideEffects_Online' method of the DomainService.
        /// </summary>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<string>> ReturnHttpMethodWithoutSideEffects_OnlineAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ValidateMethod("ReturnHttpMethodWithoutSideEffects_Online", null);
            return this.InvokeOperationAsync<string>("ReturnHttpMethodWithoutSideEffects_Online", null, false, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnHttpMethodWithSideEffects_Online' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ReturnHttpMethodWithSideEffects_Online(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("ReturnHttpMethodWithSideEffects_Online", null);
            return this.InvokeOperation<string>("ReturnHttpMethodWithSideEffects_Online", typeof(string), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnHttpMethodWithSideEffects_Online' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ReturnHttpMethodWithSideEffects_Online()
        {
            this.ValidateMethod("ReturnHttpMethodWithSideEffects_Online", null);
            return this.InvokeOperation<string>("ReturnHttpMethodWithSideEffects_Online", typeof(string), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnHttpMethodWithSideEffects_Online' method of the DomainService.
        /// </summary>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<string>> ReturnHttpMethodWithSideEffects_OnlineAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ValidateMethod("ReturnHttpMethodWithSideEffects_Online", null);
            return this.InvokeOperationAsync<string>("ReturnHttpMethodWithSideEffects_Online", null, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsBinary_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte[]> ReturnsBinary_Online(byte[] value, Action<InvokeOperation<byte[]>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsBinary_Online", parameters);
            return this.InvokeOperation<byte[]>("ReturnsBinary_Online", typeof(byte[]), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsBinary_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte[]> ReturnsBinary_Online(byte[] value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsBinary_Online", parameters);
            return this.InvokeOperation<byte[]>("ReturnsBinary_Online", typeof(byte[]), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsBinary_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<byte[]>> ReturnsBinary_OnlineAsync(byte[] value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsBinary_Online", parameters);
            return this.InvokeOperationAsync<byte[]>("ReturnsBinary_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsBoolean_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ReturnsBoolean_Online(bool value, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsBoolean_Online", parameters);
            return this.InvokeOperation<bool>("ReturnsBoolean_Online", typeof(bool), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsBoolean_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ReturnsBoolean_Online(bool value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsBoolean_Online", parameters);
            return this.InvokeOperation<bool>("ReturnsBoolean_Online", typeof(bool), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsBoolean_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<bool>> ReturnsBoolean_OnlineAsync(bool value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsBoolean_Online", parameters);
            return this.InvokeOperationAsync<bool>("ReturnsBoolean_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ReturnsByte_Online(byte value, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsByte_Online", parameters);
            return this.InvokeOperation<byte>("ReturnsByte_Online", typeof(byte), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ReturnsByte_Online(byte value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsByte_Online", parameters);
            return this.InvokeOperation<byte>("ReturnsByte_Online", typeof(byte), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<byte>> ReturnsByte_OnlineAsync(byte value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsByte_Online", parameters);
            return this.InvokeOperationAsync<byte>("ReturnsByte_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsByteArray_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte[]> ReturnsByteArray_Online(byte[] value, Action<InvokeOperation<byte[]>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsByteArray_Online", parameters);
            return this.InvokeOperation<byte[]>("ReturnsByteArray_Online", typeof(byte[]), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsByteArray_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte[]> ReturnsByteArray_Online(byte[] value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsByteArray_Online", parameters);
            return this.InvokeOperation<byte[]>("ReturnsByteArray_Online", typeof(byte[]), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsByteArray_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<byte[]>> ReturnsByteArray_OnlineAsync(byte[] value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsByteArray_Online", parameters);
            return this.InvokeOperationAsync<byte[]>("ReturnsByteArray_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsChar_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<char> ReturnsChar_Online(char value, Action<InvokeOperation<char>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsChar_Online", parameters);
            return this.InvokeOperation<char>("ReturnsChar_Online", typeof(char), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsChar_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<char> ReturnsChar_Online(char value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsChar_Online", parameters);
            return this.InvokeOperation<char>("ReturnsChar_Online", typeof(char), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsChar_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<char>> ReturnsChar_OnlineAsync(char value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsChar_Online", parameters);
            return this.InvokeOperationAsync<char>("ReturnsChar_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTime_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DateTime> ReturnsDateTime_Online(DateTime value, Action<InvokeOperation<DateTime>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTime_Online", parameters);
            return this.InvokeOperation<DateTime>("ReturnsDateTime_Online", typeof(DateTime), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTime_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DateTime> ReturnsDateTime_Online(DateTime value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTime_Online", parameters);
            return this.InvokeOperation<DateTime>("ReturnsDateTime_Online", typeof(DateTime), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTime_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<DateTime>> ReturnsDateTime_OnlineAsync(DateTime value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTime_Online", parameters);
            return this.InvokeOperationAsync<DateTime>("ReturnsDateTime_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTimeOffset_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DateTimeOffset> ReturnsDateTimeOffset_Online(DateTimeOffset value, Action<InvokeOperation<DateTimeOffset>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTimeOffset_Online", parameters);
            return this.InvokeOperation<DateTimeOffset>("ReturnsDateTimeOffset_Online", typeof(DateTimeOffset), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTimeOffset_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DateTimeOffset> ReturnsDateTimeOffset_Online(DateTimeOffset value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTimeOffset_Online", parameters);
            return this.InvokeOperation<DateTimeOffset>("ReturnsDateTimeOffset_Online", typeof(DateTimeOffset), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTimeOffset_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<DateTimeOffset>> ReturnsDateTimeOffset_OnlineAsync(DateTimeOffset value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTimeOffset_Online", parameters);
            return this.InvokeOperationAsync<DateTimeOffset>("ReturnsDateTimeOffset_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTimeOffsets_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DateTimeOffset[]> ReturnsDateTimeOffsets_Online(DateTimeOffset[] value, Action<InvokeOperation<DateTimeOffset[]>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTimeOffsets_Online", parameters);
            return this.InvokeOperation<DateTimeOffset[]>("ReturnsDateTimeOffsets_Online", typeof(DateTimeOffset[]), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTimeOffsets_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DateTimeOffset[]> ReturnsDateTimeOffsets_Online(DateTimeOffset[] value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTimeOffsets_Online", parameters);
            return this.InvokeOperation<DateTimeOffset[]>("ReturnsDateTimeOffsets_Online", typeof(DateTimeOffset[]), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTimeOffsets_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<DateTimeOffset[]>> ReturnsDateTimeOffsets_OnlineAsync(DateTimeOffset[] value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTimeOffsets_Online", parameters);
            return this.InvokeOperationAsync<DateTimeOffset[]>("ReturnsDateTimeOffsets_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTimes_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DateTime[]> ReturnsDateTimes_Online(DateTime[] value, Action<InvokeOperation<DateTime[]>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTimes_Online", parameters);
            return this.InvokeOperation<DateTime[]>("ReturnsDateTimes_Online", typeof(DateTime[]), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTimes_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DateTime[]> ReturnsDateTimes_Online(DateTime[] value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTimes_Online", parameters);
            return this.InvokeOperation<DateTime[]>("ReturnsDateTimes_Online", typeof(DateTime[]), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDateTimes_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<DateTime[]>> ReturnsDateTimes_OnlineAsync(DateTime[] value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDateTimes_Online", parameters);
            return this.InvokeOperationAsync<DateTime[]>("ReturnsDateTimes_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDecimal_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<decimal> ReturnsDecimal_Online(decimal value, Action<InvokeOperation<decimal>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDecimal_Online", parameters);
            return this.InvokeOperation<decimal>("ReturnsDecimal_Online", typeof(decimal), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDecimal_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<decimal> ReturnsDecimal_Online(decimal value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDecimal_Online", parameters);
            return this.InvokeOperation<decimal>("ReturnsDecimal_Online", typeof(decimal), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDecimal_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<decimal>> ReturnsDecimal_OnlineAsync(decimal value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDecimal_Online", parameters);
            return this.InvokeOperationAsync<decimal>("ReturnsDecimal_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDictionary' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Dictionary<string, int>> ReturnsDictionary(Dictionary<string, int> value, Action<InvokeOperation<Dictionary<string, int>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDictionary", parameters);
            return this.InvokeOperation<Dictionary<string, int>>("ReturnsDictionary", typeof(Dictionary<string, int>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDictionary' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Dictionary<string, int>> ReturnsDictionary(Dictionary<string, int> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDictionary", parameters);
            return this.InvokeOperation<Dictionary<string, int>>("ReturnsDictionary", typeof(Dictionary<string, int>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDictionary' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Dictionary<string, int>>> ReturnsDictionaryAsync(Dictionary<string, int> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDictionary", parameters);
            return this.InvokeOperationAsync<Dictionary<string, int>>("ReturnsDictionary", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDouble_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<double> ReturnsDouble_Online(double value, Action<InvokeOperation<double>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDouble_Online", parameters);
            return this.InvokeOperation<double>("ReturnsDouble_Online", typeof(double), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDouble_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<double> ReturnsDouble_Online(double value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDouble_Online", parameters);
            return this.InvokeOperation<double>("ReturnsDouble_Online", typeof(double), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsDouble_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<double>> ReturnsDouble_OnlineAsync(double value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsDouble_Online", parameters);
            return this.InvokeOperationAsync<double>("ReturnsDouble_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsEntity_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="id">The value for the 'id' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<MixedType> ReturnsEntity_Online(MixedType value, string id, Action<InvokeOperation<MixedType>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            parameters.Add("id", id);
            this.ValidateMethod("ReturnsEntity_Online", parameters);
            return this.InvokeOperation<MixedType>("ReturnsEntity_Online", typeof(MixedType), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsEntity_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="id">The value for the 'id' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<MixedType> ReturnsEntity_Online(MixedType value, string id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            parameters.Add("id", id);
            this.ValidateMethod("ReturnsEntity_Online", parameters);
            return this.InvokeOperation<MixedType>("ReturnsEntity_Online", typeof(MixedType), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsEntity_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="id">The value for the 'id' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<MixedType>> ReturnsEntity_OnlineAsync(MixedType value, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            parameters.Add("id", id);
            this.ValidateMethod("ReturnsEntity_Online", parameters);
            return this.InvokeOperationAsync<MixedType>("ReturnsEntity_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsEntityCollection_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<MixedType>> ReturnsEntityCollection_Online(int value, Action<InvokeOperation<IEnumerable<MixedType>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsEntityCollection_Online", parameters);
            return this.InvokeOperation<IEnumerable<MixedType>>("ReturnsEntityCollection_Online", typeof(IEnumerable<MixedType>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsEntityCollection_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<MixedType>> ReturnsEntityCollection_Online(int value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsEntityCollection_Online", parameters);
            return this.InvokeOperation<IEnumerable<MixedType>>("ReturnsEntityCollection_Online", typeof(IEnumerable<MixedType>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsEntityCollection_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<IEnumerable<MixedType>>> ReturnsEntityCollection_OnlineAsync(int value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsEntityCollection_Online", parameters);
            return this.InvokeOperationAsync<IEnumerable<MixedType>>("ReturnsEntityCollection_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsEnum_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<TestEnum> ReturnsEnum_Online(TestEnum value, Action<InvokeOperation<TestEnum>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsEnum_Online", parameters);
            return this.InvokeOperation<TestEnum>("ReturnsEnum_Online", typeof(TestEnum), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsEnum_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<TestEnum> ReturnsEnum_Online(TestEnum value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsEnum_Online", parameters);
            return this.InvokeOperation<TestEnum>("ReturnsEnum_Online", typeof(TestEnum), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsEnum_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<TestEnum>> ReturnsEnum_OnlineAsync(TestEnum value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsEnum_Online", parameters);
            return this.InvokeOperationAsync<TestEnum>("ReturnsEnum_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsGuid_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Guid> ReturnsGuid_Online(Guid value, Action<InvokeOperation<Guid>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsGuid_Online", parameters);
            return this.InvokeOperation<Guid>("ReturnsGuid_Online", typeof(Guid), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsGuid_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Guid> ReturnsGuid_Online(Guid value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsGuid_Online", parameters);
            return this.InvokeOperation<Guid>("ReturnsGuid_Online", typeof(Guid), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsGuid_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Guid>> ReturnsGuid_OnlineAsync(Guid value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsGuid_Online", parameters);
            return this.InvokeOperationAsync<Guid>("ReturnsGuid_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<short> ReturnsInt16_Online(short value, Action<InvokeOperation<short>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsInt16_Online", parameters);
            return this.InvokeOperation<short>("ReturnsInt16_Online", typeof(short), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<short> ReturnsInt16_Online(short value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsInt16_Online", parameters);
            return this.InvokeOperation<short>("ReturnsInt16_Online", typeof(short), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<short>> ReturnsInt16_OnlineAsync(short value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsInt16_Online", parameters);
            return this.InvokeOperationAsync<short>("ReturnsInt16_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> ReturnsInt32_Online(int value, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsInt32_Online", parameters);
            return this.InvokeOperation<int>("ReturnsInt32_Online", typeof(int), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> ReturnsInt32_Online(int value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsInt32_Online", parameters);
            return this.InvokeOperation<int>("ReturnsInt32_Online", typeof(int), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<int>> ReturnsInt32_OnlineAsync(int value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsInt32_Online", parameters);
            return this.InvokeOperationAsync<int>("ReturnsInt32_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<long> ReturnsInt64_Online(long value, Action<InvokeOperation<long>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsInt64_Online", parameters);
            return this.InvokeOperation<long>("ReturnsInt64_Online", typeof(long), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<long> ReturnsInt64_Online(long value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsInt64_Online", parameters);
            return this.InvokeOperation<long>("ReturnsInt64_Online", typeof(long), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<long>> ReturnsInt64_OnlineAsync(long value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsInt64_Online", parameters);
            return this.InvokeOperationAsync<long>("ReturnsInt64_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableBoolean_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<bool>> ReturnsNullableBoolean_Online(Nullable<bool> value, Action<InvokeOperation<Nullable<bool>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableBoolean_Online", parameters);
            return this.InvokeOperation<Nullable<bool>>("ReturnsNullableBoolean_Online", typeof(Nullable<bool>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableBoolean_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<bool>> ReturnsNullableBoolean_Online(Nullable<bool> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableBoolean_Online", parameters);
            return this.InvokeOperation<Nullable<bool>>("ReturnsNullableBoolean_Online", typeof(Nullable<bool>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableBoolean_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<bool>>> ReturnsNullableBoolean_OnlineAsync(Nullable<bool> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableBoolean_Online", parameters);
            return this.InvokeOperationAsync<Nullable<bool>>("ReturnsNullableBoolean_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<byte>> ReturnsNullableByte_Online(Nullable<byte> value, Action<InvokeOperation<Nullable<byte>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableByte_Online", parameters);
            return this.InvokeOperation<Nullable<byte>>("ReturnsNullableByte_Online", typeof(Nullable<byte>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<byte>> ReturnsNullableByte_Online(Nullable<byte> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableByte_Online", parameters);
            return this.InvokeOperation<Nullable<byte>>("ReturnsNullableByte_Online", typeof(Nullable<byte>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<byte>>> ReturnsNullableByte_OnlineAsync(Nullable<byte> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableByte_Online", parameters);
            return this.InvokeOperationAsync<Nullable<byte>>("ReturnsNullableByte_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableChar_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<char>> ReturnsNullableChar_Online(Nullable<char> value, Action<InvokeOperation<Nullable<char>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableChar_Online", parameters);
            return this.InvokeOperation<Nullable<char>>("ReturnsNullableChar_Online", typeof(Nullable<char>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableChar_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<char>> ReturnsNullableChar_Online(Nullable<char> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableChar_Online", parameters);
            return this.InvokeOperation<Nullable<char>>("ReturnsNullableChar_Online", typeof(Nullable<char>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableChar_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<char>>> ReturnsNullableChar_OnlineAsync(Nullable<char> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableChar_Online", parameters);
            return this.InvokeOperationAsync<Nullable<char>>("ReturnsNullableChar_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDateTime_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<DateTime>> ReturnsNullableDateTime_Online(Nullable<DateTime> value, Action<InvokeOperation<Nullable<DateTime>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDateTime_Online", parameters);
            return this.InvokeOperation<Nullable<DateTime>>("ReturnsNullableDateTime_Online", typeof(Nullable<DateTime>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDateTime_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<DateTime>> ReturnsNullableDateTime_Online(Nullable<DateTime> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDateTime_Online", parameters);
            return this.InvokeOperation<Nullable<DateTime>>("ReturnsNullableDateTime_Online", typeof(Nullable<DateTime>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDateTime_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<DateTime>>> ReturnsNullableDateTime_OnlineAsync(Nullable<DateTime> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDateTime_Online", parameters);
            return this.InvokeOperationAsync<Nullable<DateTime>>("ReturnsNullableDateTime_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDateTimeOffset_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<DateTimeOffset>> ReturnsNullableDateTimeOffset_Online(Nullable<DateTimeOffset> value, Action<InvokeOperation<Nullable<DateTimeOffset>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDateTimeOffset_Online", parameters);
            return this.InvokeOperation<Nullable<DateTimeOffset>>("ReturnsNullableDateTimeOffset_Online", typeof(Nullable<DateTimeOffset>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDateTimeOffset_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<DateTimeOffset>> ReturnsNullableDateTimeOffset_Online(Nullable<DateTimeOffset> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDateTimeOffset_Online", parameters);
            return this.InvokeOperation<Nullable<DateTimeOffset>>("ReturnsNullableDateTimeOffset_Online", typeof(Nullable<DateTimeOffset>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDateTimeOffset_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<DateTimeOffset>>> ReturnsNullableDateTimeOffset_OnlineAsync(Nullable<DateTimeOffset> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDateTimeOffset_Online", parameters);
            return this.InvokeOperationAsync<Nullable<DateTimeOffset>>("ReturnsNullableDateTimeOffset_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDecimal_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<decimal>> ReturnsNullableDecimal_Online(Nullable<decimal> value, Action<InvokeOperation<Nullable<decimal>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDecimal_Online", parameters);
            return this.InvokeOperation<Nullable<decimal>>("ReturnsNullableDecimal_Online", typeof(Nullable<decimal>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDecimal_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<decimal>> ReturnsNullableDecimal_Online(Nullable<decimal> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDecimal_Online", parameters);
            return this.InvokeOperation<Nullable<decimal>>("ReturnsNullableDecimal_Online", typeof(Nullable<decimal>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDecimal_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<decimal>>> ReturnsNullableDecimal_OnlineAsync(Nullable<decimal> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDecimal_Online", parameters);
            return this.InvokeOperationAsync<Nullable<decimal>>("ReturnsNullableDecimal_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDouble_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<double>> ReturnsNullableDouble_Online(Nullable<double> value, Action<InvokeOperation<Nullable<double>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDouble_Online", parameters);
            return this.InvokeOperation<Nullable<double>>("ReturnsNullableDouble_Online", typeof(Nullable<double>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDouble_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<double>> ReturnsNullableDouble_Online(Nullable<double> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDouble_Online", parameters);
            return this.InvokeOperation<Nullable<double>>("ReturnsNullableDouble_Online", typeof(Nullable<double>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableDouble_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<double>>> ReturnsNullableDouble_OnlineAsync(Nullable<double> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableDouble_Online", parameters);
            return this.InvokeOperationAsync<Nullable<double>>("ReturnsNullableDouble_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableEnum_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<TestEnum>> ReturnsNullableEnum_Online(Nullable<TestEnum> value, Action<InvokeOperation<Nullable<TestEnum>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableEnum_Online", parameters);
            return this.InvokeOperation<Nullable<TestEnum>>("ReturnsNullableEnum_Online", typeof(Nullable<TestEnum>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableEnum_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<TestEnum>> ReturnsNullableEnum_Online(Nullable<TestEnum> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableEnum_Online", parameters);
            return this.InvokeOperation<Nullable<TestEnum>>("ReturnsNullableEnum_Online", typeof(Nullable<TestEnum>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableEnum_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<TestEnum>>> ReturnsNullableEnum_OnlineAsync(Nullable<TestEnum> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableEnum_Online", parameters);
            return this.InvokeOperationAsync<Nullable<TestEnum>>("ReturnsNullableEnum_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableGuid_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<Guid>> ReturnsNullableGuid_Online(Nullable<Guid> value, Action<InvokeOperation<Nullable<Guid>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableGuid_Online", parameters);
            return this.InvokeOperation<Nullable<Guid>>("ReturnsNullableGuid_Online", typeof(Nullable<Guid>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableGuid_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<Guid>> ReturnsNullableGuid_Online(Nullable<Guid> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableGuid_Online", parameters);
            return this.InvokeOperation<Nullable<Guid>>("ReturnsNullableGuid_Online", typeof(Nullable<Guid>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableGuid_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<Guid>>> ReturnsNullableGuid_OnlineAsync(Nullable<Guid> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableGuid_Online", parameters);
            return this.InvokeOperationAsync<Nullable<Guid>>("ReturnsNullableGuid_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<short>> ReturnsNullableInt16_Online(Nullable<short> value, Action<InvokeOperation<Nullable<short>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableInt16_Online", parameters);
            return this.InvokeOperation<Nullable<short>>("ReturnsNullableInt16_Online", typeof(Nullable<short>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<short>> ReturnsNullableInt16_Online(Nullable<short> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableInt16_Online", parameters);
            return this.InvokeOperation<Nullable<short>>("ReturnsNullableInt16_Online", typeof(Nullable<short>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<short>>> ReturnsNullableInt16_OnlineAsync(Nullable<short> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableInt16_Online", parameters);
            return this.InvokeOperationAsync<Nullable<short>>("ReturnsNullableInt16_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<int>> ReturnsNullableInt32_Online(Nullable<int> value, Action<InvokeOperation<Nullable<int>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableInt32_Online", parameters);
            return this.InvokeOperation<Nullable<int>>("ReturnsNullableInt32_Online", typeof(Nullable<int>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<int>> ReturnsNullableInt32_Online(Nullable<int> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableInt32_Online", parameters);
            return this.InvokeOperation<Nullable<int>>("ReturnsNullableInt32_Online", typeof(Nullable<int>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<int>>> ReturnsNullableInt32_OnlineAsync(Nullable<int> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableInt32_Online", parameters);
            return this.InvokeOperationAsync<Nullable<int>>("ReturnsNullableInt32_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<long>> ReturnsNullableInt64_Online(Nullable<long> value, Action<InvokeOperation<Nullable<long>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableInt64_Online", parameters);
            return this.InvokeOperation<Nullable<long>>("ReturnsNullableInt64_Online", typeof(Nullable<long>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<long>> ReturnsNullableInt64_Online(Nullable<long> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableInt64_Online", parameters);
            return this.InvokeOperation<Nullable<long>>("ReturnsNullableInt64_Online", typeof(Nullable<long>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<long>>> ReturnsNullableInt64_OnlineAsync(Nullable<long> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableInt64_Online", parameters);
            return this.InvokeOperationAsync<Nullable<long>>("ReturnsNullableInt64_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableSByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<sbyte>> ReturnsNullableSByte_Online(Nullable<sbyte> value, Action<InvokeOperation<Nullable<sbyte>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableSByte_Online", parameters);
            return this.InvokeOperation<Nullable<sbyte>>("ReturnsNullableSByte_Online", typeof(Nullable<sbyte>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableSByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<sbyte>> ReturnsNullableSByte_Online(Nullable<sbyte> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableSByte_Online", parameters);
            return this.InvokeOperation<Nullable<sbyte>>("ReturnsNullableSByte_Online", typeof(Nullable<sbyte>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableSByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<sbyte>>> ReturnsNullableSByte_OnlineAsync(Nullable<sbyte> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableSByte_Online", parameters);
            return this.InvokeOperationAsync<Nullable<sbyte>>("ReturnsNullableSByte_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableSingle_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<float>> ReturnsNullableSingle_Online(Nullable<float> value, Action<InvokeOperation<Nullable<float>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableSingle_Online", parameters);
            return this.InvokeOperation<Nullable<float>>("ReturnsNullableSingle_Online", typeof(Nullable<float>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableSingle_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<float>> ReturnsNullableSingle_Online(Nullable<float> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableSingle_Online", parameters);
            return this.InvokeOperation<Nullable<float>>("ReturnsNullableSingle_Online", typeof(Nullable<float>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableSingle_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<float>>> ReturnsNullableSingle_OnlineAsync(Nullable<float> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableSingle_Online", parameters);
            return this.InvokeOperationAsync<Nullable<float>>("ReturnsNullableSingle_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableTimeSpan_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<TimeSpan>> ReturnsNullableTimeSpan_Online(Nullable<TimeSpan> value, Action<InvokeOperation<Nullable<TimeSpan>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableTimeSpan_Online", parameters);
            return this.InvokeOperation<Nullable<TimeSpan>>("ReturnsNullableTimeSpan_Online", typeof(Nullable<TimeSpan>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableTimeSpan_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<TimeSpan>> ReturnsNullableTimeSpan_Online(Nullable<TimeSpan> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableTimeSpan_Online", parameters);
            return this.InvokeOperation<Nullable<TimeSpan>>("ReturnsNullableTimeSpan_Online", typeof(Nullable<TimeSpan>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableTimeSpan_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<TimeSpan>>> ReturnsNullableTimeSpan_OnlineAsync(Nullable<TimeSpan> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableTimeSpan_Online", parameters);
            return this.InvokeOperationAsync<Nullable<TimeSpan>>("ReturnsNullableTimeSpan_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableUInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<ushort>> ReturnsNullableUInt16_Online(Nullable<ushort> value, Action<InvokeOperation<Nullable<ushort>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableUInt16_Online", parameters);
            return this.InvokeOperation<Nullable<ushort>>("ReturnsNullableUInt16_Online", typeof(Nullable<ushort>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableUInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<ushort>> ReturnsNullableUInt16_Online(Nullable<ushort> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableUInt16_Online", parameters);
            return this.InvokeOperation<Nullable<ushort>>("ReturnsNullableUInt16_Online", typeof(Nullable<ushort>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableUInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<ushort>>> ReturnsNullableUInt16_OnlineAsync(Nullable<ushort> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableUInt16_Online", parameters);
            return this.InvokeOperationAsync<Nullable<ushort>>("ReturnsNullableUInt16_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableUInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<uint>> ReturnsNullableUInt32_Online(Nullable<uint> value, Action<InvokeOperation<Nullable<uint>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableUInt32_Online", parameters);
            return this.InvokeOperation<Nullable<uint>>("ReturnsNullableUInt32_Online", typeof(Nullable<uint>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableUInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<uint>> ReturnsNullableUInt32_Online(Nullable<uint> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableUInt32_Online", parameters);
            return this.InvokeOperation<Nullable<uint>>("ReturnsNullableUInt32_Online", typeof(Nullable<uint>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableUInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<uint>>> ReturnsNullableUInt32_OnlineAsync(Nullable<uint> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableUInt32_Online", parameters);
            return this.InvokeOperationAsync<Nullable<uint>>("ReturnsNullableUInt32_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableUInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<ulong>> ReturnsNullableUInt64_Online(Nullable<ulong> value, Action<InvokeOperation<Nullable<ulong>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableUInt64_Online", parameters);
            return this.InvokeOperation<Nullable<ulong>>("ReturnsNullableUInt64_Online", typeof(Nullable<ulong>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableUInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<ulong>> ReturnsNullableUInt64_Online(Nullable<ulong> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableUInt64_Online", parameters);
            return this.InvokeOperation<Nullable<ulong>>("ReturnsNullableUInt64_Online", typeof(Nullable<ulong>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsNullableUInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<ulong>>> ReturnsNullableUInt64_OnlineAsync(Nullable<ulong> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsNullableUInt64_Online", parameters);
            return this.InvokeOperationAsync<Nullable<ulong>>("ReturnsNullableUInt64_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsSByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<sbyte> ReturnsSByte_Online(sbyte value, Action<InvokeOperation<sbyte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsSByte_Online", parameters);
            return this.InvokeOperation<sbyte>("ReturnsSByte_Online", typeof(sbyte), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsSByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<sbyte> ReturnsSByte_Online(sbyte value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsSByte_Online", parameters);
            return this.InvokeOperation<sbyte>("ReturnsSByte_Online", typeof(sbyte), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsSByte_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<sbyte>> ReturnsSByte_OnlineAsync(sbyte value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsSByte_Online", parameters);
            return this.InvokeOperationAsync<sbyte>("ReturnsSByte_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsSingle_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<float> ReturnsSingle_Online(float value, Action<InvokeOperation<float>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsSingle_Online", parameters);
            return this.InvokeOperation<float>("ReturnsSingle_Online", typeof(float), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsSingle_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<float> ReturnsSingle_Online(float value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsSingle_Online", parameters);
            return this.InvokeOperation<float>("ReturnsSingle_Online", typeof(float), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsSingle_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<float>> ReturnsSingle_OnlineAsync(float value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsSingle_Online", parameters);
            return this.InvokeOperationAsync<float>("ReturnsSingle_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsString_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ReturnsString_Online(string value, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsString_Online", parameters);
            return this.InvokeOperation<string>("ReturnsString_Online", typeof(string), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsString_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ReturnsString_Online(string value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsString_Online", parameters);
            return this.InvokeOperation<string>("ReturnsString_Online", typeof(string), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsString_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<string>> ReturnsString_OnlineAsync(string value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsString_Online", parameters);
            return this.InvokeOperationAsync<string>("ReturnsString_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsStrings_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> ReturnsStrings_Online(IEnumerable<string> value, Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsStrings_Online", parameters);
            return this.InvokeOperation<IEnumerable<string>>("ReturnsStrings_Online", typeof(IEnumerable<string>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsStrings_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> ReturnsStrings_Online(IEnumerable<string> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsStrings_Online", parameters);
            return this.InvokeOperation<IEnumerable<string>>("ReturnsStrings_Online", typeof(IEnumerable<string>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsStrings_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<IEnumerable<string>>> ReturnsStrings_OnlineAsync(IEnumerable<string> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsStrings_Online", parameters);
            return this.InvokeOperationAsync<IEnumerable<string>>("ReturnsStrings_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsTimeSpan_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<TimeSpan> ReturnsTimeSpan_Online(TimeSpan value, Action<InvokeOperation<TimeSpan>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsTimeSpan_Online", parameters);
            return this.InvokeOperation<TimeSpan>("ReturnsTimeSpan_Online", typeof(TimeSpan), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsTimeSpan_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<TimeSpan> ReturnsTimeSpan_Online(TimeSpan value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsTimeSpan_Online", parameters);
            return this.InvokeOperation<TimeSpan>("ReturnsTimeSpan_Online", typeof(TimeSpan), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsTimeSpan_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<TimeSpan>> ReturnsTimeSpan_OnlineAsync(TimeSpan value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsTimeSpan_Online", parameters);
            return this.InvokeOperationAsync<TimeSpan>("ReturnsTimeSpan_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsTimeSpans_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<TimeSpan>> ReturnsTimeSpans_Online(IEnumerable<TimeSpan> value, Action<InvokeOperation<IEnumerable<TimeSpan>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsTimeSpans_Online", parameters);
            return this.InvokeOperation<IEnumerable<TimeSpan>>("ReturnsTimeSpans_Online", typeof(IEnumerable<TimeSpan>), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsTimeSpans_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<TimeSpan>> ReturnsTimeSpans_Online(IEnumerable<TimeSpan> value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsTimeSpans_Online", parameters);
            return this.InvokeOperation<IEnumerable<TimeSpan>>("ReturnsTimeSpans_Online", typeof(IEnumerable<TimeSpan>), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsTimeSpans_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<IEnumerable<TimeSpan>>> ReturnsTimeSpans_OnlineAsync(IEnumerable<TimeSpan> value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsTimeSpans_Online", parameters);
            return this.InvokeOperationAsync<IEnumerable<TimeSpan>>("ReturnsTimeSpans_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ushort> ReturnsUInt16_Online(ushort value, Action<InvokeOperation<ushort>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUInt16_Online", parameters);
            return this.InvokeOperation<ushort>("ReturnsUInt16_Online", typeof(ushort), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ushort> ReturnsUInt16_Online(ushort value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUInt16_Online", parameters);
            return this.InvokeOperation<ushort>("ReturnsUInt16_Online", typeof(ushort), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUInt16_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<ushort>> ReturnsUInt16_OnlineAsync(ushort value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUInt16_Online", parameters);
            return this.InvokeOperationAsync<ushort>("ReturnsUInt16_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<uint> ReturnsUInt32_Online(uint value, Action<InvokeOperation<uint>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUInt32_Online", parameters);
            return this.InvokeOperation<uint>("ReturnsUInt32_Online", typeof(uint), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<uint> ReturnsUInt32_Online(uint value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUInt32_Online", parameters);
            return this.InvokeOperation<uint>("ReturnsUInt32_Online", typeof(uint), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUInt32_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<uint>> ReturnsUInt32_OnlineAsync(uint value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUInt32_Online", parameters);
            return this.InvokeOperationAsync<uint>("ReturnsUInt32_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ulong> ReturnsUInt64_Online(ulong value, Action<InvokeOperation<ulong>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUInt64_Online", parameters);
            return this.InvokeOperation<ulong>("ReturnsUInt64_Online", typeof(ulong), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ulong> ReturnsUInt64_Online(ulong value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUInt64_Online", parameters);
            return this.InvokeOperation<ulong>("ReturnsUInt64_Online", typeof(ulong), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUInt64_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<ulong>> ReturnsUInt64_OnlineAsync(ulong value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUInt64_Online", parameters);
            return this.InvokeOperationAsync<ulong>("ReturnsUInt64_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUri_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Uri> ReturnsUri_Online(Uri value, Action<InvokeOperation<Uri>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUri_Online", parameters);
            return this.InvokeOperation<Uri>("ReturnsUri_Online", typeof(Uri), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUri_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Uri> ReturnsUri_Online(Uri value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUri_Online", parameters);
            return this.InvokeOperation<Uri>("ReturnsUri_Online", typeof(Uri), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsUri_Online' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Uri>> ReturnsUri_OnlineAsync(Uri value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsUri_Online", parameters);
            return this.InvokeOperationAsync<Uri>("ReturnsUri_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsXElement' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<XElement> ReturnsXElement(XElement value, Action<InvokeOperation<XElement>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsXElement", parameters);
            return this.InvokeOperation<XElement>("ReturnsXElement", typeof(XElement), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsXElement' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<XElement> ReturnsXElement(XElement value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsXElement", parameters);
            return this.InvokeOperation<XElement>("ReturnsXElement", typeof(XElement), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnsXElement' method of the DomainService.
        /// </summary>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<XElement>> ReturnsXElementAsync(XElement value, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("value", value);
            this.ValidateMethod("ReturnsXElement", parameters);
            return this.InvokeOperationAsync<XElement>("ReturnsXElement", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RoundtripDouble' method of the DomainService.
        /// </summary>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<double> RoundtripDouble(double d, Action<InvokeOperation<double>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("d", d);
            this.ValidateMethod("RoundtripDouble", parameters);
            return this.InvokeOperation<double>("RoundtripDouble", typeof(double), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RoundtripDouble' method of the DomainService.
        /// </summary>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<double> RoundtripDouble(double d)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("d", d);
            this.ValidateMethod("RoundtripDouble", parameters);
            return this.InvokeOperation<double>("RoundtripDouble", typeof(double), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RoundtripDouble' method of the DomainService.
        /// </summary>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<double>> RoundtripDoubleAsync(double d, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("d", d);
            this.ValidateMethod("RoundtripDouble", parameters);
            return this.InvokeOperationAsync<double>("RoundtripDouble", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestNullable_Online' method of the DomainService.
        /// </summary>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <param name="b1">The value for the 'b1' parameter of this action.</param>
        /// <param name="b2">The value for the 'b2' parameter of this action.</param>
        /// <param name="sb">The value for the 'sb' parameter of this action.</param>
        /// <param name="int16">The value for the 'int16' parameter of this action.</param>
        /// <param name="uint16">The value for the 'uint16' parameter of this action.</param>
        /// <param name="int32">The value for the 'int32' parameter of this action.</param>
        /// <param name="uint32">The value for the 'uint32' parameter of this action.</param>
        /// <param name="int64">The value for the 'int64' parameter of this action.</param>
        /// <param name="uint64">The value for the 'uint64' parameter of this action.</param>
        /// <param name="ch">The value for the 'ch' parameter of this action.</param>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="s">The value for the 's' parameter of this action.</param>
        /// <param name="dec">The value for the 'dec' parameter of this action.</param>
        /// <param name="dt">The value for the 'dt' parameter of this action.</param>
        /// <param name="ts">The value for the 'ts' parameter of this action.</param>
        /// <param name="g">The value for the 'g' parameter of this action.</param>
        /// <param name="en">The value for the 'en' parameter of this action.</param>
        /// <param name="nullableTimeSpans">The value for the 'nullableTimeSpans' parameter of this action.</param>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> TestNullable_Online(
                    MixedType entity, 
                    Nullable<bool> b1, 
                    Nullable<byte> b2, 
                    Nullable<sbyte> sb, 
                    Nullable<short> int16, 
                    Nullable<ushort> uint16, 
                    Nullable<int> int32, 
                    Nullable<uint> uint32, 
                    Nullable<long> int64, 
                    Nullable<ulong> uint64, 
                    Nullable<char> ch, 
                    Nullable<double> d, 
                    Nullable<float> s, 
                    Nullable<decimal> dec, 
                    Nullable<DateTime> dt, 
                    Nullable<TimeSpan> ts, 
                    Nullable<Guid> g, 
                    Nullable<TestEnum> en, 
                    IEnumerable<Nullable<TimeSpan>> nullableTimeSpans, 
                    Nullable<DateTimeOffset> dto, 
                    Action<InvokeOperation<bool>> callback, 
                    object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("entity", entity);
            parameters.Add("b1", b1);
            parameters.Add("b2", b2);
            parameters.Add("sb", sb);
            parameters.Add("int16", int16);
            parameters.Add("uint16", uint16);
            parameters.Add("int32", int32);
            parameters.Add("uint32", uint32);
            parameters.Add("int64", int64);
            parameters.Add("uint64", uint64);
            parameters.Add("ch", ch);
            parameters.Add("d", d);
            parameters.Add("s", s);
            parameters.Add("dec", dec);
            parameters.Add("dt", dt);
            parameters.Add("ts", ts);
            parameters.Add("g", g);
            parameters.Add("en", en);
            parameters.Add("nullableTimeSpans", nullableTimeSpans);
            parameters.Add("dto", dto);
            this.ValidateMethod("TestNullable_Online", parameters);
            return this.InvokeOperation<bool>("TestNullable_Online", typeof(bool), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestNullable_Online' method of the DomainService.
        /// </summary>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <param name="b1">The value for the 'b1' parameter of this action.</param>
        /// <param name="b2">The value for the 'b2' parameter of this action.</param>
        /// <param name="sb">The value for the 'sb' parameter of this action.</param>
        /// <param name="int16">The value for the 'int16' parameter of this action.</param>
        /// <param name="uint16">The value for the 'uint16' parameter of this action.</param>
        /// <param name="int32">The value for the 'int32' parameter of this action.</param>
        /// <param name="uint32">The value for the 'uint32' parameter of this action.</param>
        /// <param name="int64">The value for the 'int64' parameter of this action.</param>
        /// <param name="uint64">The value for the 'uint64' parameter of this action.</param>
        /// <param name="ch">The value for the 'ch' parameter of this action.</param>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="s">The value for the 's' parameter of this action.</param>
        /// <param name="dec">The value for the 'dec' parameter of this action.</param>
        /// <param name="dt">The value for the 'dt' parameter of this action.</param>
        /// <param name="ts">The value for the 'ts' parameter of this action.</param>
        /// <param name="g">The value for the 'g' parameter of this action.</param>
        /// <param name="en">The value for the 'en' parameter of this action.</param>
        /// <param name="nullableTimeSpans">The value for the 'nullableTimeSpans' parameter of this action.</param>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> TestNullable_Online(
                    MixedType entity, 
                    Nullable<bool> b1, 
                    Nullable<byte> b2, 
                    Nullable<sbyte> sb, 
                    Nullable<short> int16, 
                    Nullable<ushort> uint16, 
                    Nullable<int> int32, 
                    Nullable<uint> uint32, 
                    Nullable<long> int64, 
                    Nullable<ulong> uint64, 
                    Nullable<char> ch, 
                    Nullable<double> d, 
                    Nullable<float> s, 
                    Nullable<decimal> dec, 
                    Nullable<DateTime> dt, 
                    Nullable<TimeSpan> ts, 
                    Nullable<Guid> g, 
                    Nullable<TestEnum> en, 
                    IEnumerable<Nullable<TimeSpan>> nullableTimeSpans, 
                    Nullable<DateTimeOffset> dto)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("entity", entity);
            parameters.Add("b1", b1);
            parameters.Add("b2", b2);
            parameters.Add("sb", sb);
            parameters.Add("int16", int16);
            parameters.Add("uint16", uint16);
            parameters.Add("int32", int32);
            parameters.Add("uint32", uint32);
            parameters.Add("int64", int64);
            parameters.Add("uint64", uint64);
            parameters.Add("ch", ch);
            parameters.Add("d", d);
            parameters.Add("s", s);
            parameters.Add("dec", dec);
            parameters.Add("dt", dt);
            parameters.Add("ts", ts);
            parameters.Add("g", g);
            parameters.Add("en", en);
            parameters.Add("nullableTimeSpans", nullableTimeSpans);
            parameters.Add("dto", dto);
            this.ValidateMethod("TestNullable_Online", parameters);
            return this.InvokeOperation<bool>("TestNullable_Online", typeof(bool), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestNullable_Online' method of the DomainService.
        /// </summary>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <param name="b1">The value for the 'b1' parameter of this action.</param>
        /// <param name="b2">The value for the 'b2' parameter of this action.</param>
        /// <param name="sb">The value for the 'sb' parameter of this action.</param>
        /// <param name="int16">The value for the 'int16' parameter of this action.</param>
        /// <param name="uint16">The value for the 'uint16' parameter of this action.</param>
        /// <param name="int32">The value for the 'int32' parameter of this action.</param>
        /// <param name="uint32">The value for the 'uint32' parameter of this action.</param>
        /// <param name="int64">The value for the 'int64' parameter of this action.</param>
        /// <param name="uint64">The value for the 'uint64' parameter of this action.</param>
        /// <param name="ch">The value for the 'ch' parameter of this action.</param>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="s">The value for the 's' parameter of this action.</param>
        /// <param name="dec">The value for the 'dec' parameter of this action.</param>
        /// <param name="dt">The value for the 'dt' parameter of this action.</param>
        /// <param name="ts">The value for the 'ts' parameter of this action.</param>
        /// <param name="g">The value for the 'g' parameter of this action.</param>
        /// <param name="en">The value for the 'en' parameter of this action.</param>
        /// <param name="nullableTimeSpans">The value for the 'nullableTimeSpans' parameter of this action.</param>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<bool>> TestNullable_OnlineAsync(
                    MixedType entity, 
                    Nullable<bool> b1, 
                    Nullable<byte> b2, 
                    Nullable<sbyte> sb, 
                    Nullable<short> int16, 
                    Nullable<ushort> uint16, 
                    Nullable<int> int32, 
                    Nullable<uint> uint32, 
                    Nullable<long> int64, 
                    Nullable<ulong> uint64, 
                    Nullable<char> ch, 
                    Nullable<double> d, 
                    Nullable<float> s, 
                    Nullable<decimal> dec, 
                    Nullable<DateTime> dt, 
                    Nullable<TimeSpan> ts, 
                    Nullable<Guid> g, 
                    Nullable<TestEnum> en, 
                    IEnumerable<Nullable<TimeSpan>> nullableTimeSpans, 
                    Nullable<DateTimeOffset> dto, 
                    CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("entity", entity);
            parameters.Add("b1", b1);
            parameters.Add("b2", b2);
            parameters.Add("sb", sb);
            parameters.Add("int16", int16);
            parameters.Add("uint16", uint16);
            parameters.Add("int32", int32);
            parameters.Add("uint32", uint32);
            parameters.Add("int64", int64);
            parameters.Add("uint64", uint64);
            parameters.Add("ch", ch);
            parameters.Add("d", d);
            parameters.Add("s", s);
            parameters.Add("dec", dec);
            parameters.Add("dt", dt);
            parameters.Add("ts", ts);
            parameters.Add("g", g);
            parameters.Add("en", en);
            parameters.Add("nullableTimeSpans", nullableTimeSpans);
            parameters.Add("dto", dto);
            this.ValidateMethod("TestNullable_Online", parameters);
            return this.InvokeOperationAsync<bool>("TestNullable_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestPredefined_Online' method of the DomainService.
        /// </summary>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <param name="s">The value for the 's' parameter of this action.</param>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="dt">The value for the 'dt' parameter of this action.</param>
        /// <param name="ts">The value for the 'ts' parameter of this action.</param>
        /// <param name="strings">The value for the 'strings' parameter of this action.</param>
        /// <param name="uri">The value for the 'uri' parameter of this action.</param>
        /// <param name="g">The value for the 'g' parameter of this action.</param>
        /// <param name="b">The value for the 'b' parameter of this action.</param>
        /// <param name="x">The value for the 'x' parameter of this action.</param>
        /// <param name="bArray">The value for the 'bArray' parameter of this action.</param>
        /// <param name="en">The value for the 'en' parameter of this action.</param>
        /// <param name="guids">The value for the 'guids' parameter of this action.</param>
        /// <param name="ulongs">The value for the 'ulongs' parameter of this action.</param>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> TestPredefined_Online(
                    MixedType entity, 
                    string s, 
                    decimal d, 
                    DateTime dt, 
                    TimeSpan ts, 
                    IEnumerable<string> strings, 
                    Uri uri, 
                    Guid g, 
                    byte[] b, 
                    XElement x, 
                    byte[] bArray, 
                    TestEnum en, 
                    Guid[] guids, 
                    ulong[] ulongs, 
                    DateTimeOffset dto, 
                    Action<InvokeOperation<bool>> callback, 
                    object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("entity", entity);
            parameters.Add("s", s);
            parameters.Add("d", d);
            parameters.Add("dt", dt);
            parameters.Add("ts", ts);
            parameters.Add("strings", strings);
            parameters.Add("uri", uri);
            parameters.Add("g", g);
            parameters.Add("b", b);
            parameters.Add("x", x);
            parameters.Add("bArray", bArray);
            parameters.Add("en", en);
            parameters.Add("guids", guids);
            parameters.Add("ulongs", ulongs);
            parameters.Add("dto", dto);
            this.ValidateMethod("TestPredefined_Online", parameters);
            return this.InvokeOperation<bool>("TestPredefined_Online", typeof(bool), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestPredefined_Online' method of the DomainService.
        /// </summary>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <param name="s">The value for the 's' parameter of this action.</param>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="dt">The value for the 'dt' parameter of this action.</param>
        /// <param name="ts">The value for the 'ts' parameter of this action.</param>
        /// <param name="strings">The value for the 'strings' parameter of this action.</param>
        /// <param name="uri">The value for the 'uri' parameter of this action.</param>
        /// <param name="g">The value for the 'g' parameter of this action.</param>
        /// <param name="b">The value for the 'b' parameter of this action.</param>
        /// <param name="x">The value for the 'x' parameter of this action.</param>
        /// <param name="bArray">The value for the 'bArray' parameter of this action.</param>
        /// <param name="en">The value for the 'en' parameter of this action.</param>
        /// <param name="guids">The value for the 'guids' parameter of this action.</param>
        /// <param name="ulongs">The value for the 'ulongs' parameter of this action.</param>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> TestPredefined_Online(MixedType entity, string s, decimal d, DateTime dt, TimeSpan ts, IEnumerable<string> strings, Uri uri, Guid g, byte[] b, XElement x, byte[] bArray, TestEnum en, Guid[] guids, ulong[] ulongs, DateTimeOffset dto)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("entity", entity);
            parameters.Add("s", s);
            parameters.Add("d", d);
            parameters.Add("dt", dt);
            parameters.Add("ts", ts);
            parameters.Add("strings", strings);
            parameters.Add("uri", uri);
            parameters.Add("g", g);
            parameters.Add("b", b);
            parameters.Add("x", x);
            parameters.Add("bArray", bArray);
            parameters.Add("en", en);
            parameters.Add("guids", guids);
            parameters.Add("ulongs", ulongs);
            parameters.Add("dto", dto);
            this.ValidateMethod("TestPredefined_Online", parameters);
            return this.InvokeOperation<bool>("TestPredefined_Online", typeof(bool), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestPredefined_Online' method of the DomainService.
        /// </summary>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <param name="s">The value for the 's' parameter of this action.</param>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="dt">The value for the 'dt' parameter of this action.</param>
        /// <param name="ts">The value for the 'ts' parameter of this action.</param>
        /// <param name="strings">The value for the 'strings' parameter of this action.</param>
        /// <param name="uri">The value for the 'uri' parameter of this action.</param>
        /// <param name="g">The value for the 'g' parameter of this action.</param>
        /// <param name="b">The value for the 'b' parameter of this action.</param>
        /// <param name="x">The value for the 'x' parameter of this action.</param>
        /// <param name="bArray">The value for the 'bArray' parameter of this action.</param>
        /// <param name="en">The value for the 'en' parameter of this action.</param>
        /// <param name="guids">The value for the 'guids' parameter of this action.</param>
        /// <param name="ulongs">The value for the 'ulongs' parameter of this action.</param>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<bool>> TestPredefined_OnlineAsync(
                    MixedType entity, 
                    string s, 
                    decimal d, 
                    DateTime dt, 
                    TimeSpan ts, 
                    IEnumerable<string> strings, 
                    Uri uri, 
                    Guid g, 
                    byte[] b, 
                    XElement x, 
                    byte[] bArray, 
                    TestEnum en, 
                    Guid[] guids, 
                    ulong[] ulongs, 
                    DateTimeOffset dto, 
                    CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("entity", entity);
            parameters.Add("s", s);
            parameters.Add("d", d);
            parameters.Add("dt", dt);
            parameters.Add("ts", ts);
            parameters.Add("strings", strings);
            parameters.Add("uri", uri);
            parameters.Add("g", g);
            parameters.Add("b", b);
            parameters.Add("x", x);
            parameters.Add("bArray", bArray);
            parameters.Add("en", en);
            parameters.Add("guids", guids);
            parameters.Add("ulongs", ulongs);
            parameters.Add("dto", dto);
            this.ValidateMethod("TestPredefined_Online", parameters);
            return this.InvokeOperationAsync<bool>("TestPredefined_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestPrimitive_Online' method of the DomainService.
        /// </summary>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <param name="b1">The value for the 'b1' parameter of this action.</param>
        /// <param name="b2">The value for the 'b2' parameter of this action.</param>
        /// <param name="sb">The value for the 'sb' parameter of this action.</param>
        /// <param name="int16">The value for the 'int16' parameter of this action.</param>
        /// <param name="uint16">The value for the 'uint16' parameter of this action.</param>
        /// <param name="int32">The value for the 'int32' parameter of this action.</param>
        /// <param name="uint32">The value for the 'uint32' parameter of this action.</param>
        /// <param name="int64">The value for the 'int64' parameter of this action.</param>
        /// <param name="uint64">The value for the 'uint64' parameter of this action.</param>
        /// <param name="ch">The value for the 'ch' parameter of this action.</param>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="s">The value for the 's' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> TestPrimitive_Online(MixedType entity, bool b1, byte b2, sbyte sb, short int16, ushort uint16, int int32, uint uint32, long int64, ulong uint64, char ch, double d, float s, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("entity", entity);
            parameters.Add("b1", b1);
            parameters.Add("b2", b2);
            parameters.Add("sb", sb);
            parameters.Add("int16", int16);
            parameters.Add("uint16", uint16);
            parameters.Add("int32", int32);
            parameters.Add("uint32", uint32);
            parameters.Add("int64", int64);
            parameters.Add("uint64", uint64);
            parameters.Add("ch", ch);
            parameters.Add("d", d);
            parameters.Add("s", s);
            this.ValidateMethod("TestPrimitive_Online", parameters);
            return this.InvokeOperation<bool>("TestPrimitive_Online", typeof(bool), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestPrimitive_Online' method of the DomainService.
        /// </summary>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <param name="b1">The value for the 'b1' parameter of this action.</param>
        /// <param name="b2">The value for the 'b2' parameter of this action.</param>
        /// <param name="sb">The value for the 'sb' parameter of this action.</param>
        /// <param name="int16">The value for the 'int16' parameter of this action.</param>
        /// <param name="uint16">The value for the 'uint16' parameter of this action.</param>
        /// <param name="int32">The value for the 'int32' parameter of this action.</param>
        /// <param name="uint32">The value for the 'uint32' parameter of this action.</param>
        /// <param name="int64">The value for the 'int64' parameter of this action.</param>
        /// <param name="uint64">The value for the 'uint64' parameter of this action.</param>
        /// <param name="ch">The value for the 'ch' parameter of this action.</param>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="s">The value for the 's' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> TestPrimitive_Online(MixedType entity, bool b1, byte b2, sbyte sb, short int16, ushort uint16, int int32, uint uint32, long int64, ulong uint64, char ch, double d, float s)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("entity", entity);
            parameters.Add("b1", b1);
            parameters.Add("b2", b2);
            parameters.Add("sb", sb);
            parameters.Add("int16", int16);
            parameters.Add("uint16", uint16);
            parameters.Add("int32", int32);
            parameters.Add("uint32", uint32);
            parameters.Add("int64", int64);
            parameters.Add("uint64", uint64);
            parameters.Add("ch", ch);
            parameters.Add("d", d);
            parameters.Add("s", s);
            this.ValidateMethod("TestPrimitive_Online", parameters);
            return this.InvokeOperation<bool>("TestPrimitive_Online", typeof(bool), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestPrimitive_Online' method of the DomainService.
        /// </summary>
        /// <param name="entity">The value for the 'entity' parameter of this action.</param>
        /// <param name="b1">The value for the 'b1' parameter of this action.</param>
        /// <param name="b2">The value for the 'b2' parameter of this action.</param>
        /// <param name="sb">The value for the 'sb' parameter of this action.</param>
        /// <param name="int16">The value for the 'int16' parameter of this action.</param>
        /// <param name="uint16">The value for the 'uint16' parameter of this action.</param>
        /// <param name="int32">The value for the 'int32' parameter of this action.</param>
        /// <param name="uint32">The value for the 'uint32' parameter of this action.</param>
        /// <param name="int64">The value for the 'int64' parameter of this action.</param>
        /// <param name="uint64">The value for the 'uint64' parameter of this action.</param>
        /// <param name="ch">The value for the 'ch' parameter of this action.</param>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="s">The value for the 's' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<bool>> TestPrimitive_OnlineAsync(MixedType entity, bool b1, byte b2, sbyte sb, short int16, ushort uint16, int int32, uint uint32, long int64, ulong uint64, char ch, double d, float s, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("entity", entity);
            parameters.Add("b1", b1);
            parameters.Add("b2", b2);
            parameters.Add("sb", sb);
            parameters.Add("int16", int16);
            parameters.Add("uint16", uint16);
            parameters.Add("int32", int32);
            parameters.Add("uint32", uint32);
            parameters.Add("int64", int64);
            parameters.Add("uint64", uint64);
            parameters.Add("ch", ch);
            parameters.Add("d", d);
            parameters.Add("s", s);
            this.ValidateMethod("TestPrimitive_Online", parameters);
            return this.InvokeOperationAsync<bool>("TestPrimitive_Online", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ThrowOnlineException' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ThrowOnlineException(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("ThrowOnlineException", null);
            return this.InvokeOperation("ThrowOnlineException", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ThrowOnlineException' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ThrowOnlineException()
        {
            this.ValidateMethod("ThrowOnlineException", null);
            return this.InvokeOperation("ThrowOnlineException", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ThrowOnlineException' method of the DomainService.
        /// </summary>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult> ThrowOnlineExceptionAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ValidateMethod("ThrowOnlineException", null);
            return this.InvokeOperationAsync("ThrowOnlineException", null, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ThrowValidationException' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ThrowValidationException(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("ThrowValidationException", null);
            return this.InvokeOperation("ThrowValidationException", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ThrowValidationException' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ThrowValidationException()
        {
            this.ValidateMethod("ThrowValidationException", null);
            return this.InvokeOperation("ThrowValidationException", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ThrowValidationException' method of the DomainService.
        /// </summary>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult> ThrowValidationExceptionAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ValidateMethod("ThrowValidationException", null);
            return this.InvokeOperationAsync("ThrowValidationException", null, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'VariousParameterTypes' method of the DomainService.
        /// </summary>
        /// <param name="str">The value for the 'str' parameter of this action.</param>
        /// <param name="integer">The value for the 'integer' parameter of this action.</param>
        /// <param name="boolean">The value for the 'boolean' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> VariousParameterTypes([Required()] string str, int integer, bool boolean, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("str", str);
            parameters.Add("integer", integer);
            parameters.Add("boolean", boolean);
            this.ValidateMethod("VariousParameterTypes", parameters);
            return this.InvokeOperation<int>("VariousParameterTypes", typeof(int), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'VariousParameterTypes' method of the DomainService.
        /// </summary>
        /// <param name="str">The value for the 'str' parameter of this action.</param>
        /// <param name="integer">The value for the 'integer' parameter of this action.</param>
        /// <param name="boolean">The value for the 'boolean' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> VariousParameterTypes([Required()] string str, int integer, bool boolean)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("str", str);
            parameters.Add("integer", integer);
            parameters.Add("boolean", boolean);
            this.ValidateMethod("VariousParameterTypes", parameters);
            return this.InvokeOperation<int>("VariousParameterTypes", typeof(int), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'VariousParameterTypes' method of the DomainService.
        /// </summary>
        /// <param name="str">The value for the 'str' parameter of this action.</param>
        /// <param name="integer">The value for the 'integer' parameter of this action.</param>
        /// <param name="boolean">The value for the 'boolean' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<int>> VariousParameterTypesAsync([Required()] string str, int integer, bool boolean, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("str", str);
            parameters.Add("integer", integer);
            parameters.Add("boolean", boolean);
            this.ValidateMethod("VariousParameterTypes", parameters);
            return this.InvokeOperationAsync<int>("VariousParameterTypes", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'VoidMethod' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation VoidMethod(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("VoidMethod", null);
            return this.InvokeOperation("VoidMethod", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'VoidMethod' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation VoidMethod()
        {
            this.ValidateMethod("VoidMethod", null);
            return this.InvokeOperation("VoidMethod", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'VoidMethod' method of the DomainService.
        /// </summary>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult> VoidMethodAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ValidateMethod("VoidMethod", null);
            return this.InvokeOperationAsync("VoidMethod", null, true, cancellationToken);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new TestProvider_ScenariosEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'TestProvider_Scenarios' DomainService.
        /// </summary>
        [ServiceContract()]
        [ServiceKnownType(typeof(decimal))]
        [ServiceKnownType(typeof(DateTime))]
        [ServiceKnownType(typeof(TimeSpan))]
        [ServiceKnownType(typeof(Guid))]
        [ServiceKnownType(typeof(TestEnum))]
        [ServiceKnownType(typeof(DateTimeOffset))]
        [ServiceKnownType(typeof(string[]))]
        [ServiceKnownType(typeof(Uri))]
        [ServiceKnownType(typeof(byte[]))]
        [ServiceKnownType(typeof(Dictionary<string, string>))]
        public interface ITestProvider_ScenariosContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateAndGetSideEffectsObjects' operation.
            /// </summary>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/CreateAndGetSideEffectsObjects", ReplyAction="http://tempuri.org/TestProvider_Scenarios/CreateAndGetSideEffectsObjectsResponse")]
            IAsyncResult BeginCreateAndGetSideEffectsObjects(string name, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateAndGetSideEffectsObjects'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateAndGetSideEffectsObjects'.</param>
            /// <returns>The 'QueryResult' returned from the 'CreateAndGetSideEffectsObjects' operation.</returns>
            QueryResult<TestSideEffects> EndCreateAndGetSideEffectsObjects(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAReturnNull' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetAReturnNull", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetAReturnNullResponse")]
            IAsyncResult BeginGetAReturnNull(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAReturnNull'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAReturnNull'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAReturnNull' operation.</returns>
            QueryResult<A> EndGetAReturnNull(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetAs", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetAsResponse")]
            IAsyncResult BeginGetAs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAs' operation.</returns>
            QueryResult<A> EndGetAs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAsReturnNull' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetAsReturnNull", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetAsReturnNullResponse")]
            IAsyncResult BeginGetAsReturnNull(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAsReturnNull'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAsReturnNull'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAsReturnNull' operation.</returns>
            QueryResult<A> EndGetAsReturnNull(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetBs", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetBsResponse")]
            IAsyncResult BeginGetBs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBs' operation.</returns>
            QueryResult<B> EndGetBs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCartItems' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCartItems", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCartItemsResponse")]
            IAsyncResult BeginGetCartItems(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCartItems'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCartItems'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCartItems' operation.</returns>
            QueryResult<CartItem> EndGetCartItems(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCarts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCarts", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCartsResponse")]
            IAsyncResult BeginGetCarts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCarts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCarts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCarts' operation.</returns>
            QueryResult<Cart> EndGetCarts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCities", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesResponse")]
            IAsyncResult BeginGetCities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCities' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesInState' operation.
            /// </summary>
            /// <param name="state">The value for the 'state' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesInState", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesInStateResponse")]
            IAsyncResult BeginGetCitiesInState(string state, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesInState'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesInState'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesInState' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesInState(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesInStateWithCaching' operation.
            /// </summary>
            /// <param name="state">The value for the 'state' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesInStateWithCaching", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesInStateWithCachingResponse")]
            IAsyncResult BeginGetCitiesInStateWithCaching(string state, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesInStateWithCaching'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesInStateWithCaching'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesInStateWithCaching' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesInStateWithCaching(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesInStateWithCaching2' operation.
            /// </summary>
            /// <param name="state">The value for the 'state' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesInStateWithCaching2", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesInStateWithCaching2Response")]
            IAsyncResult BeginGetCitiesInStateWithCaching2(string state, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesInStateWithCaching2'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesInStateWithCaching2'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesInStateWithCaching2' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesInStateWithCaching2(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesWithCacheLocationAny' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCacheLocationAny", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCacheLocationAnyResponse")]
            IAsyncResult BeginGetCitiesWithCacheLocationAny(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesWithCacheLocationAny'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithCacheLocationAny'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesWithCacheLocationAny' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesWithCacheLocationAny(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesWithCacheLocationDownstream' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCacheLocationDownstream", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCacheLocationDownstreamRes" +
                "ponse")]
            IAsyncResult BeginGetCitiesWithCacheLocationDownstream(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesWithCacheLocationDownstream'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithCacheLocationDownstream'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesWithCacheLocationDownstream' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesWithCacheLocationDownstream(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesWithCacheLocationServer' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCacheLocationServer", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCacheLocationServerRespons" +
                "e")]
            IAsyncResult BeginGetCitiesWithCacheLocationServer(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesWithCacheLocationServer'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithCacheLocationServer'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesWithCacheLocationServer' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesWithCacheLocationServer(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesWithCacheLocationServerAndClient' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCacheLocationServerAndClie" +
                "nt", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCacheLocationServerAndClie" +
                "ntResponse")]
            IAsyncResult BeginGetCitiesWithCacheLocationServerAndClient(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesWithCacheLocationServerAndClient'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithCacheLocationServerAndClient'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesWithCacheLocationServerAndClient' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesWithCacheLocationServerAndClient(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesWithCaching' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCaching", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCachingResponse")]
            IAsyncResult BeginGetCitiesWithCaching(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesWithCaching'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithCaching'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesWithCaching' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesWithCaching(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesWithCaching2' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCaching2", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCaching2Response")]
            IAsyncResult BeginGetCitiesWithCaching2(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesWithCaching2'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithCaching2'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesWithCaching2' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesWithCaching2(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesWithCachingAndThrow' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCachingAndThrow", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCachingAndThrowResponse")]
            IAsyncResult BeginGetCitiesWithCachingAndThrow(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesWithCachingAndThrow'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithCachingAndThrow'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesWithCachingAndThrow' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesWithCachingAndThrow(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesWithCachingVaryByHeaders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCachingVaryByHeaders", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCachingVaryByHeadersRespon" +
                "se")]
            IAsyncResult BeginGetCitiesWithCachingVaryByHeaders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesWithCachingVaryByHeaders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithCachingVaryByHeaders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesWithCachingVaryByHeaders' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesWithCachingVaryByHeaders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCitiesWithCachingViaCacheProfile' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCachingViaCacheProfile", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCitiesWithCachingViaCacheProfileResp" +
                "onse")]
            IAsyncResult BeginGetCitiesWithCachingViaCacheProfile(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCitiesWithCachingViaCacheProfile'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCitiesWithCachingViaCacheProfile'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCitiesWithCachingViaCacheProfile' operation.</returns>
            QueryResult<CityWithCacheData> EndGetCitiesWithCachingViaCacheProfile(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetCs", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetCsResponse")]
            IAsyncResult BeginGetCs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCs' operation.</returns>
            QueryResult<C> EndGetCs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetDs", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetDsResponse")]
            IAsyncResult BeginGetDs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDs' operation.</returns>
            QueryResult<D> EndGetDs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntitiesWithDataContracts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetEntitiesWithDataContracts", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetEntitiesWithDataContractsResponse")]
            IAsyncResult BeginGetEntitiesWithDataContracts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntitiesWithDataContracts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntitiesWithDataContracts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntitiesWithDataContracts' operation.</returns>
            QueryResult<EntityWithDataContract> EndGetEntitiesWithDataContracts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntitiesWithDataContracts2' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetEntitiesWithDataContracts2", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetEntitiesWithDataContracts2Response")]
            IAsyncResult BeginGetEntitiesWithDataContracts2(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntitiesWithDataContracts2'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntitiesWithDataContracts2'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntitiesWithDataContracts2' operation.</returns>
            QueryResult<EntityWithDataContract2> EndGetEntitiesWithDataContracts2(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntitiesWithSpecialTypeName' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetEntitiesWithSpecialTypeName", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetEntitiesWithSpecialTypeNameResponse")]
            IAsyncResult BeginGetEntitiesWithSpecialTypeName(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntitiesWithSpecialTypeName'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntitiesWithSpecialTypeName'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntitiesWithSpecialTypeName' operation.</returns>
            QueryResult<EntityWithSpecialTypeName> EndGetEntitiesWithSpecialTypeName(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntity_TestEditableAttributes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetEntity_TestEditableAttributes", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetEntity_TestEditableAttributesRespons" +
                "e")]
            IAsyncResult BeginGetEntity_TestEditableAttributes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntity_TestEditableAttributes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntity_TestEditableAttributes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntity_TestEditableAttributes' operation.</returns>
            QueryResult<Entity_TestEditableAttribute> EndGetEntity_TestEditableAttributes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntityWithDefaultValue' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetEntityWithDefaultValue", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetEntityWithDefaultValueResponse")]
            IAsyncResult BeginGetEntityWithDefaultValue(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntityWithDefaultValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntityWithDefaultValue'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntityWithDefaultValue' operation.</returns>
            QueryResult<EntityWithDefaultDefaultValue> EndGetEntityWithDefaultValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMixedTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetMixedTypes", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetMixedTypesResponse")]
            IAsyncResult BeginGetMixedTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMixedTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMixedTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMixedTypes' operation.</returns>
            QueryResult<MixedType> EndGetMixedTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMixedTypes_BadAttributes' operation.
            /// </summary>
            /// <param name="broiled">The value for the 'broiled' parameter of this action.</param>
            /// <param name="cheese">The value for the 'cheese' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetMixedTypes_BadAttributes", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetMixedTypes_BadAttributesResponse")]
            IAsyncResult BeginGetMixedTypes_BadAttributes(char broiled, string cheese, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMixedTypes_BadAttributes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMixedTypes_BadAttributes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMixedTypes_BadAttributes' operation.</returns>
            QueryResult<MixedType> EndGetMixedTypes_BadAttributes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMixedTypes_Nullable' operation.
            /// </summary>
            /// <param name="idToChange">The value for the 'idToChange' parameter of this action.</param>
            /// <param name="b1">The value for the 'b1' parameter of this action.</param>
            /// <param name="b2">The value for the 'b2' parameter of this action.</param>
            /// <param name="sb">The value for the 'sb' parameter of this action.</param>
            /// <param name="int16">The value for the 'int16' parameter of this action.</param>
            /// <param name="uint16">The value for the 'uint16' parameter of this action.</param>
            /// <param name="int32">The value for the 'int32' parameter of this action.</param>
            /// <param name="uint32">The value for the 'uint32' parameter of this action.</param>
            /// <param name="int64">The value for the 'int64' parameter of this action.</param>
            /// <param name="uint64">The value for the 'uint64' parameter of this action.</param>
            /// <param name="ch">The value for the 'ch' parameter of this action.</param>
            /// <param name="d">The value for the 'd' parameter of this action.</param>
            /// <param name="s">The value for the 's' parameter of this action.</param>
            /// <param name="dec">The value for the 'dec' parameter of this action.</param>
            /// <param name="dt">The value for the 'dt' parameter of this action.</param>
            /// <param name="ts">The value for the 'ts' parameter of this action.</param>
            /// <param name="g">The value for the 'g' parameter of this action.</param>
            /// <param name="en">The value for the 'en' parameter of this action.</param>
            /// <param name="nullableTimeSpans">The value for the 'nullableTimeSpans' parameter of this action.</param>
            /// <param name="nullableDictionaryDateTime">The value for the 'nullableDictionaryDateTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetMixedTypes_Nullable", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetMixedTypes_NullableResponse")]
            IAsyncResult BeginGetMixedTypes_Nullable(
                        string idToChange, 
                        Nullable<bool> b1, 
                        Nullable<byte> b2, 
                        Nullable<sbyte> sb, 
                        Nullable<short> int16, 
                        Nullable<ushort> uint16, 
                        Nullable<int> int32, 
                        Nullable<uint> uint32, 
                        Nullable<long> int64, 
                        Nullable<ulong> uint64, 
                        Nullable<char> ch, 
                        Nullable<double> d, 
                        Nullable<float> s, 
                        Nullable<decimal> dec, 
                        Nullable<DateTime> dt, 
                        Nullable<TimeSpan> ts, 
                        Nullable<Guid> g, 
                        Nullable<TestEnum> en, 
                        IEnumerable<Nullable<TimeSpan>> nullableTimeSpans, 
                        Dictionary<DateTime, Nullable<DateTime>> nullableDictionaryDateTime, 
                        AsyncCallback callback, 
                        object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMixedTypes_Nullable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMixedTypes_Nullable'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMixedTypes_Nullable' operation.</returns>
            QueryResult<MixedType> EndGetMixedTypes_Nullable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMixedTypes_Predefined' operation.
            /// </summary>
            /// <param name="idToChange">The value for the 'idToChange' parameter of this action.</param>
            /// <param name="s">The value for the 's' parameter of this action.</param>
            /// <param name="d">The value for the 'd' parameter of this action.</param>
            /// <param name="dt">The value for the 'dt' parameter of this action.</param>
            /// <param name="ts">The value for the 'ts' parameter of this action.</param>
            /// <param name="dto">The value for the 'dto' parameter of this action.</param>
            /// <param name="strings">The value for the 'strings' parameter of this action.</param>
            /// <param name="uri">The value for the 'uri' parameter of this action.</param>
            /// <param name="g">The value for the 'g' parameter of this action.</param>
            /// <param name="b">The value for the 'b' parameter of this action.</param>
            /// <param name="x">The value for the 'x' parameter of this action.</param>
            /// <param name="bArray">The value for the 'bArray' parameter of this action.</param>
            /// <param name="en">The value for the 'en' parameter of this action.</param>
            /// <param name="ints">The value for the 'ints' parameter of this action.</param>
            /// <param name="dictionaryDateTime">The value for the 'dictionaryDateTime' parameter of this action.</param>
            /// <param name="dictionaryGuid">The value for the 'dictionaryGuid' parameter of this action.</param>
            /// <param name="dictionaryString">The value for the 'dictionaryString' parameter of this action.</param>
            /// <param name="dictionaryTestEnum">The value for the 'dictionaryTestEnum' parameter of this action.</param>
            /// <param name="dictionaryXElement">The value for the 'dictionaryXElement' parameter of this action.</param>
            /// <param name="dictionaryDateTimeOffset">The value for the 'dictionaryDateTimeOffset' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetMixedTypes_Predefined", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetMixedTypes_PredefinedResponse")]
            IAsyncResult BeginGetMixedTypes_Predefined(
                        string idToChange, 
                        string s, 
                        decimal d, 
                        DateTime dt, 
                        TimeSpan ts, 
                        DateTimeOffset dto, 
                        IEnumerable<string> strings, 
                        Uri uri, 
                        Guid g, 
                        byte[] b, 
                        XElement x, 
                        byte[] bArray, 
                        TestEnum en, 
                        int[] ints, 
                        Dictionary<DateTime, DateTime> dictionaryDateTime, 
                        Dictionary<Guid, Guid> dictionaryGuid, 
                        Dictionary<string, string> dictionaryString, 
                        Dictionary<TestEnum, TestEnum> dictionaryTestEnum, 
                        Dictionary<XElement, XElement> dictionaryXElement, 
                        Dictionary<DateTimeOffset, DateTimeOffset> dictionaryDateTimeOffset, 
                        AsyncCallback callback, 
                        object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMixedTypes_Predefined'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMixedTypes_Predefined'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMixedTypes_Predefined' operation.</returns>
            QueryResult<MixedType> EndGetMixedTypes_Predefined(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMixedTypes_Primitive' operation.
            /// </summary>
            /// <param name="idToChange">The value for the 'idToChange' parameter of this action.</param>
            /// <param name="b1">The value for the 'b1' parameter of this action.</param>
            /// <param name="b2">The value for the 'b2' parameter of this action.</param>
            /// <param name="sb">The value for the 'sb' parameter of this action.</param>
            /// <param name="int16">The value for the 'int16' parameter of this action.</param>
            /// <param name="uint16">The value for the 'uint16' parameter of this action.</param>
            /// <param name="int32">The value for the 'int32' parameter of this action.</param>
            /// <param name="uint32">The value for the 'uint32' parameter of this action.</param>
            /// <param name="int64">The value for the 'int64' parameter of this action.</param>
            /// <param name="uint64">The value for the 'uint64' parameter of this action.</param>
            /// <param name="ch">The value for the 'ch' parameter of this action.</param>
            /// <param name="d">The value for the 'd' parameter of this action.</param>
            /// <param name="s">The value for the 's' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetMixedTypes_Primitive", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetMixedTypes_PrimitiveResponse")]
            IAsyncResult BeginGetMixedTypes_Primitive(string idToChange, bool b1, byte b2, sbyte sb, short int16, ushort uint16, int int32, uint uint32, long int64, ulong uint64, char ch, double d, float s, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMixedTypes_Primitive'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMixedTypes_Primitive'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMixedTypes_Primitive' operation.</returns>
            QueryResult<MixedType> EndGetMixedTypes_Primitive(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMixedTypesThrow' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetMixedTypesThrow", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetMixedTypesThrowResponse")]
            IAsyncResult BeginGetMixedTypesThrow(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMixedTypesThrow'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMixedTypesThrow'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMixedTypesThrow' operation.</returns>
            QueryResult<MixedType> EndGetMixedTypesThrow(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMixedTypeSuperset' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetMixedTypeSuperset", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetMixedTypeSupersetResponse")]
            IAsyncResult BeginGetMixedTypeSuperset(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMixedTypeSuperset'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMixedTypeSuperset'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMixedTypeSuperset' operation.</returns>
            QueryResult<MixedType> EndGetMixedTypeSuperset(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMultipartKeyTestEntity1s' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetMultipartKeyTestEntity1s", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetMultipartKeyTestEntity1sResponse")]
            IAsyncResult BeginGetMultipartKeyTestEntity1s(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMultipartKeyTestEntity1s'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMultipartKeyTestEntity1s'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMultipartKeyTestEntity1s' operation.</returns>
            QueryResult<MultipartKeyTestEntity1> EndGetMultipartKeyTestEntity1s(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMultipartKeyTestEntity2s' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetMultipartKeyTestEntity2s", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetMultipartKeyTestEntity2sResponse")]
            IAsyncResult BeginGetMultipartKeyTestEntity2s(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMultipartKeyTestEntity2s'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMultipartKeyTestEntity2s'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMultipartKeyTestEntity2s' operation.</returns>
            QueryResult<MultipartKeyTestEntity2> EndGetMultipartKeyTestEntity2s(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMultipartKeyTestEntity3s' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetMultipartKeyTestEntity3s", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetMultipartKeyTestEntity3sResponse")]
            IAsyncResult BeginGetMultipartKeyTestEntity3s(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMultipartKeyTestEntity3s'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMultipartKeyTestEntity3s'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMultipartKeyTestEntity3s' operation.</returns>
            QueryResult<MultipartKeyTestEntity3> EndGetMultipartKeyTestEntity3s(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNullableFKParents' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetNullableFKParents", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetNullableFKParentsResponse")]
            IAsyncResult BeginGetNullableFKParents(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNullableFKParents'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNullableFKParents'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNullableFKParents' operation.</returns>
            QueryResult<NullableFKParent> EndGetNullableFKParents(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPOCONoValidations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetPOCONoValidations", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetPOCONoValidationsResponse")]
            IAsyncResult BeginGetPOCONoValidations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPOCONoValidations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPOCONoValidations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPOCONoValidations' operation.</returns>
            QueryResult<POCONoValidation> EndGetPOCONoValidations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRoundtripOriginal_ClassAttribute_TestEntities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetRoundtripOriginal_ClassAttribute_Tes" +
                "tEntities", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetRoundtripOriginal_ClassAttribute_Tes" +
                "tEntitiesResponse")]
            IAsyncResult BeginGetRoundtripOriginal_ClassAttribute_TestEntities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRoundtripOriginal_ClassAttribute_TestEntities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRoundtripOriginal_ClassAttribute_TestEntities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRoundtripOriginal_ClassAttribute_TestEntities' operation.</returns>
            QueryResult<RoundtripOriginal_TestEntity2> EndGetRoundtripOriginal_ClassAttribute_TestEntities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRoundtripOriginal_TestEntities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetRoundtripOriginal_TestEntities", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetRoundtripOriginal_TestEntitiesRespon" +
                "se")]
            IAsyncResult BeginGetRoundtripOriginal_TestEntities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRoundtripOriginal_TestEntities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRoundtripOriginal_TestEntities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRoundtripOriginal_TestEntities' operation.</returns>
            QueryResult<RoundtripOriginal_TestEntity> EndGetRoundtripOriginal_TestEntities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRoundtripQueryEntities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetRoundtripQueryEntities", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetRoundtripQueryEntitiesResponse")]
            IAsyncResult BeginGetRoundtripQueryEntities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRoundtripQueryEntities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRoundtripQueryEntities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRoundtripQueryEntities' operation.</returns>
            QueryResult<RoundtripQueryEntity> EndGetRoundtripQueryEntities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTestCyclesRoot' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetTestCyclesRoot", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetTestCyclesRootResponse")]
            IAsyncResult BeginGetTestCyclesRoot(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTestCyclesRoot'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTestCyclesRoot'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTestCyclesRoot' operation.</returns>
            QueryResult<TestCycles> EndGetTestCyclesRoot(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTestCyclesTier1' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetTestCyclesTier1", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetTestCyclesTier1Response")]
            IAsyncResult BeginGetTestCyclesTier1(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTestCyclesTier1'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTestCyclesTier1'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTestCyclesTier1' operation.</returns>
            QueryResult<TestCycles> EndGetTestCyclesTier1(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTestEntityForInvokeOperations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetTestEntityForInvokeOperations", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetTestEntityForInvokeOperationsRespons" +
                "e")]
            IAsyncResult BeginGetTestEntityForInvokeOperations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTestEntityForInvokeOperations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTestEntityForInvokeOperations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTestEntityForInvokeOperations' operation.</returns>
            QueryResult<TestEntityForInvokeOperations> EndGetTestEntityForInvokeOperations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTimestampEntityAs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetTimestampEntityAs", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetTimestampEntityAsResponse")]
            IAsyncResult BeginGetTimestampEntityAs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTimestampEntityAs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTimestampEntityAs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTimestampEntityAs' operation.</returns>
            QueryResult<TimestampEntityA> EndGetTimestampEntityAs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTimestampEntityBs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetTimestampEntityBs", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetTimestampEntityBsResponse")]
            IAsyncResult BeginGetTimestampEntityBs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTimestampEntityBs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTimestampEntityBs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTimestampEntityBs' operation.</returns>
            QueryResult<TimestampEntityB> EndGetTimestampEntityBs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXElemEntities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/GetXElemEntities", ReplyAction="http://tempuri.org/TestProvider_Scenarios/GetXElemEntitiesResponse")]
            IAsyncResult BeginGetXElemEntities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXElemEntities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXElemEntities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXElemEntities' operation.</returns>
            QueryResult<EntityWithXElement> EndGetXElemEntities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IncrementBid1ForA' operation.
            /// </summary>
            /// <param name="a">The value for the 'a' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/IncrementBid1ForA", ReplyAction="http://tempuri.org/TestProvider_Scenarios/IncrementBid1ForAResponse")]
            IAsyncResult BeginIncrementBid1ForA(A a, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIncrementBid1ForA'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIncrementBid1ForA'.</param>
            /// <returns>The 'Int32' returned from the 'IncrementBid1ForA' operation.</returns>
            int EndIncrementBid1ForA(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IncrementBid1ForABy' operation.
            /// </summary>
            /// <param name="a">The value for the 'a' parameter of this action.</param>
            /// <param name="delta">The value for the 'delta' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/IncrementBid1ForABy", ReplyAction="http://tempuri.org/TestProvider_Scenarios/IncrementBid1ForAByResponse")]
            IAsyncResult BeginIncrementBid1ForABy(A a, int delta, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIncrementBid1ForABy'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIncrementBid1ForABy'.</param>
            /// <returns>The 'Int32' returned from the 'IncrementBid1ForABy' operation.</returns>
            int EndIncrementBid1ForABy(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'InvokeOperationWithParamValidation' operation.
            /// </summary>
            /// <param name="a">The value for the 'a' parameter of this action.</param>
            /// <param name="b">The value for the 'b' parameter of this action.</param>
            /// <param name="entity">The value for the 'entity' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/InvokeOperationWithParamValidation", ReplyAction="http://tempuri.org/TestProvider_Scenarios/InvokeOperationWithParamValidationRespo" +
                "nse")]
            IAsyncResult BeginInvokeOperationWithParamValidation(int a, string b, CityWithCacheData entity, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginInvokeOperationWithParamValidation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginInvokeOperationWithParamValidation'.</param>
            /// <returns>The 'Boolean' returned from the 'InvokeOperationWithParamValidation' operation.</returns>
            bool EndInvokeOperationWithParamValidation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'InvokeOpWithIEnumerableParam' operation.
            /// </summary>
            /// <param name="list">The value for the 'list' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/InvokeOpWithIEnumerableParam", ReplyAction="http://tempuri.org/TestProvider_Scenarios/InvokeOpWithIEnumerableParamResponse")]
            IAsyncResult BeginInvokeOpWithIEnumerableParam(IEnumerable<TestEntityForInvokeOperations> list, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginInvokeOpWithIEnumerableParam'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginInvokeOpWithIEnumerableParam'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'InvokeOpWithIEnumerableParam' operation.</returns>
            IEnumerable<TestEntityForInvokeOperations> EndInvokeOpWithIEnumerableParam(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'InvokeOpWithIEnumerableParamAndNoSideEffects' operation.
            /// </summary>
            /// <param name="list">The value for the 'list' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/InvokeOpWithIEnumerableParamAndNoSideEf" +
                "fects", ReplyAction="http://tempuri.org/TestProvider_Scenarios/InvokeOpWithIEnumerableParamAndNoSideEf" +
                "fectsResponse")]
            IAsyncResult BeginInvokeOpWithIEnumerableParamAndNoSideEffects(IEnumerable<TestEntityForInvokeOperations> list, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginInvokeOpWithIEnumerableParamAndNoSideEffects'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginInvokeOpWithIEnumerableParamAndNoSideEffects'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'InvokeOpWithIEnumerableParamAndNoSideEffects' operation.</returns>
            IEnumerable<TestEntityForInvokeOperations> EndInvokeOpWithIEnumerableParamAndNoSideEffects(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'MethodRequiresAuthentication' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/MethodRequiresAuthentication", ReplyAction="http://tempuri.org/TestProvider_Scenarios/MethodRequiresAuthenticationResponse")]
            IAsyncResult BeginMethodRequiresAuthentication(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginMethodRequiresAuthentication'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginMethodRequiresAuthentication'.</param>
            void EndMethodRequiresAuthentication(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'QueryWithParamValidation' operation.
            /// </summary>
            /// <param name="a">The value for the 'a' parameter of this action.</param>
            /// <param name="b">The value for the 'b' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/QueryWithParamValidation", ReplyAction="http://tempuri.org/TestProvider_Scenarios/QueryWithParamValidationResponse")]
            IAsyncResult BeginQueryWithParamValidation(int a, string b, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginQueryWithParamValidation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginQueryWithParamValidation'.</param>
            /// <returns>The 'QueryResult' returned from the 'QueryWithParamValidation' operation.</returns>
            QueryResult<A> EndQueryWithParamValidation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnHttpMethodWithoutSideEffects_Online' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnHttpMethodWithoutSideEffects_Onli" +
                "ne", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnHttpMethodWithoutSideEffects_Onli" +
                "neResponse")]
            IAsyncResult BeginReturnHttpMethodWithoutSideEffects_Online(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnHttpMethodWithoutSideEffects_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnHttpMethodWithoutSideEffects_Online'.</param>
            /// <returns>The 'String' returned from the 'ReturnHttpMethodWithoutSideEffects_Online' operation.</returns>
            string EndReturnHttpMethodWithoutSideEffects_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnHttpMethodWithSideEffects_Online' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnHttpMethodWithSideEffects_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnHttpMethodWithSideEffects_OnlineR" +
                "esponse")]
            IAsyncResult BeginReturnHttpMethodWithSideEffects_Online(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnHttpMethodWithSideEffects_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnHttpMethodWithSideEffects_Online'.</param>
            /// <returns>The 'String' returned from the 'ReturnHttpMethodWithSideEffects_Online' operation.</returns>
            string EndReturnHttpMethodWithSideEffects_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsBinary_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsBinary_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsBinary_OnlineResponse")]
            IAsyncResult BeginReturnsBinary_Online(byte[] value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsBinary_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsBinary_Online'.</param>
            /// <returns>The 'Byte[]' returned from the 'ReturnsBinary_Online' operation.</returns>
            byte[] EndReturnsBinary_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsBoolean_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsBoolean_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsBoolean_OnlineResponse")]
            IAsyncResult BeginReturnsBoolean_Online(bool value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsBoolean_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsBoolean_Online'.</param>
            /// <returns>The 'Boolean' returned from the 'ReturnsBoolean_Online' operation.</returns>
            bool EndReturnsBoolean_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsByte_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsByte_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsByte_OnlineResponse")]
            IAsyncResult BeginReturnsByte_Online(byte value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsByte_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsByte_Online'.</param>
            /// <returns>The 'Byte' returned from the 'ReturnsByte_Online' operation.</returns>
            byte EndReturnsByte_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsByteArray_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsByteArray_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsByteArray_OnlineResponse")]
            IAsyncResult BeginReturnsByteArray_Online(byte[] value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsByteArray_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsByteArray_Online'.</param>
            /// <returns>The 'Byte[]' returned from the 'ReturnsByteArray_Online' operation.</returns>
            byte[] EndReturnsByteArray_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsChar_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsChar_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsChar_OnlineResponse")]
            IAsyncResult BeginReturnsChar_Online(char value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsChar_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsChar_Online'.</param>
            /// <returns>The 'Char' returned from the 'ReturnsChar_Online' operation.</returns>
            char EndReturnsChar_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsDateTime_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsDateTime_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsDateTime_OnlineResponse")]
            IAsyncResult BeginReturnsDateTime_Online(DateTime value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsDateTime_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsDateTime_Online'.</param>
            /// <returns>The 'DateTime' returned from the 'ReturnsDateTime_Online' operation.</returns>
            DateTime EndReturnsDateTime_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsDateTimeOffset_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsDateTimeOffset_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsDateTimeOffset_OnlineResponse")]
            IAsyncResult BeginReturnsDateTimeOffset_Online(DateTimeOffset value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsDateTimeOffset_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsDateTimeOffset_Online'.</param>
            /// <returns>The 'DateTimeOffset' returned from the 'ReturnsDateTimeOffset_Online' operation.</returns>
            DateTimeOffset EndReturnsDateTimeOffset_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsDateTimeOffsets_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsDateTimeOffsets_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsDateTimeOffsets_OnlineResponse")]
            IAsyncResult BeginReturnsDateTimeOffsets_Online(DateTimeOffset[] value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsDateTimeOffsets_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsDateTimeOffsets_Online'.</param>
            /// <returns>The 'DateTimeOffset[]' returned from the 'ReturnsDateTimeOffsets_Online' operation.</returns>
            DateTimeOffset[] EndReturnsDateTimeOffsets_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsDateTimes_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsDateTimes_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsDateTimes_OnlineResponse")]
            IAsyncResult BeginReturnsDateTimes_Online(DateTime[] value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsDateTimes_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsDateTimes_Online'.</param>
            /// <returns>The 'DateTime[]' returned from the 'ReturnsDateTimes_Online' operation.</returns>
            DateTime[] EndReturnsDateTimes_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsDecimal_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsDecimal_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsDecimal_OnlineResponse")]
            IAsyncResult BeginReturnsDecimal_Online(decimal value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsDecimal_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsDecimal_Online'.</param>
            /// <returns>The 'Decimal' returned from the 'ReturnsDecimal_Online' operation.</returns>
            decimal EndReturnsDecimal_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsDictionary' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsDictionary", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsDictionaryResponse")]
            IAsyncResult BeginReturnsDictionary(Dictionary<string, int> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsDictionary'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsDictionary'.</param>
            /// <returns>The 'Dictionary`2' returned from the 'ReturnsDictionary' operation.</returns>
            Dictionary<string, int> EndReturnsDictionary(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsDouble_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsDouble_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsDouble_OnlineResponse")]
            IAsyncResult BeginReturnsDouble_Online(double value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsDouble_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsDouble_Online'.</param>
            /// <returns>The 'Double' returned from the 'ReturnsDouble_Online' operation.</returns>
            double EndReturnsDouble_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsEntity_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsEntity_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsEntity_OnlineResponse")]
            IAsyncResult BeginReturnsEntity_Online(MixedType value, string id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsEntity_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsEntity_Online'.</param>
            /// <returns>The 'MixedType' returned from the 'ReturnsEntity_Online' operation.</returns>
            MixedType EndReturnsEntity_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsEntityCollection_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsEntityCollection_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsEntityCollection_OnlineResponse")]
            IAsyncResult BeginReturnsEntityCollection_Online(int value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsEntityCollection_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsEntityCollection_Online'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'ReturnsEntityCollection_Online' operation.</returns>
            IEnumerable<MixedType> EndReturnsEntityCollection_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsEnum_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsEnum_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsEnum_OnlineResponse")]
            IAsyncResult BeginReturnsEnum_Online(TestEnum value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsEnum_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsEnum_Online'.</param>
            /// <returns>The 'TestEnum' returned from the 'ReturnsEnum_Online' operation.</returns>
            TestEnum EndReturnsEnum_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsGuid_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsGuid_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsGuid_OnlineResponse")]
            IAsyncResult BeginReturnsGuid_Online(Guid value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsGuid_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsGuid_Online'.</param>
            /// <returns>The 'Guid' returned from the 'ReturnsGuid_Online' operation.</returns>
            Guid EndReturnsGuid_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsInt16_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsInt16_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsInt16_OnlineResponse")]
            IAsyncResult BeginReturnsInt16_Online(short value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsInt16_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsInt16_Online'.</param>
            /// <returns>The 'Int16' returned from the 'ReturnsInt16_Online' operation.</returns>
            short EndReturnsInt16_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsInt32_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsInt32_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsInt32_OnlineResponse")]
            IAsyncResult BeginReturnsInt32_Online(int value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsInt32_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsInt32_Online'.</param>
            /// <returns>The 'Int32' returned from the 'ReturnsInt32_Online' operation.</returns>
            int EndReturnsInt32_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsInt64_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsInt64_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsInt64_OnlineResponse")]
            IAsyncResult BeginReturnsInt64_Online(long value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsInt64_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsInt64_Online'.</param>
            /// <returns>The 'Int64' returned from the 'ReturnsInt64_Online' operation.</returns>
            long EndReturnsInt64_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableBoolean_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableBoolean_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableBoolean_OnlineResponse")]
            IAsyncResult BeginReturnsNullableBoolean_Online(Nullable<bool> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableBoolean_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableBoolean_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableBoolean_Online' operation.</returns>
            Nullable<bool> EndReturnsNullableBoolean_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableByte_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableByte_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableByte_OnlineResponse")]
            IAsyncResult BeginReturnsNullableByte_Online(Nullable<byte> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableByte_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableByte_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableByte_Online' operation.</returns>
            Nullable<byte> EndReturnsNullableByte_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableChar_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableChar_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableChar_OnlineResponse")]
            IAsyncResult BeginReturnsNullableChar_Online(Nullable<char> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableChar_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableChar_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableChar_Online' operation.</returns>
            Nullable<char> EndReturnsNullableChar_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableDateTime_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableDateTime_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableDateTime_OnlineResponse")]
            IAsyncResult BeginReturnsNullableDateTime_Online(Nullable<DateTime> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableDateTime_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableDateTime_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableDateTime_Online' operation.</returns>
            Nullable<DateTime> EndReturnsNullableDateTime_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableDateTimeOffset_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableDateTimeOffset_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableDateTimeOffset_OnlineRes" +
                "ponse")]
            IAsyncResult BeginReturnsNullableDateTimeOffset_Online(Nullable<DateTimeOffset> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableDateTimeOffset_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableDateTimeOffset_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableDateTimeOffset_Online' operation.</returns>
            Nullable<DateTimeOffset> EndReturnsNullableDateTimeOffset_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableDecimal_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableDecimal_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableDecimal_OnlineResponse")]
            IAsyncResult BeginReturnsNullableDecimal_Online(Nullable<decimal> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableDecimal_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableDecimal_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableDecimal_Online' operation.</returns>
            Nullable<decimal> EndReturnsNullableDecimal_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableDouble_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableDouble_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableDouble_OnlineResponse")]
            IAsyncResult BeginReturnsNullableDouble_Online(Nullable<double> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableDouble_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableDouble_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableDouble_Online' operation.</returns>
            Nullable<double> EndReturnsNullableDouble_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableEnum_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableEnum_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableEnum_OnlineResponse")]
            IAsyncResult BeginReturnsNullableEnum_Online(Nullable<TestEnum> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableEnum_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableEnum_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableEnum_Online' operation.</returns>
            Nullable<TestEnum> EndReturnsNullableEnum_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableGuid_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableGuid_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableGuid_OnlineResponse")]
            IAsyncResult BeginReturnsNullableGuid_Online(Nullable<Guid> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableGuid_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableGuid_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableGuid_Online' operation.</returns>
            Nullable<Guid> EndReturnsNullableGuid_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableInt16_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableInt16_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableInt16_OnlineResponse")]
            IAsyncResult BeginReturnsNullableInt16_Online(Nullable<short> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableInt16_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableInt16_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableInt16_Online' operation.</returns>
            Nullable<short> EndReturnsNullableInt16_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableInt32_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableInt32_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableInt32_OnlineResponse")]
            IAsyncResult BeginReturnsNullableInt32_Online(Nullable<int> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableInt32_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableInt32_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableInt32_Online' operation.</returns>
            Nullable<int> EndReturnsNullableInt32_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableInt64_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableInt64_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableInt64_OnlineResponse")]
            IAsyncResult BeginReturnsNullableInt64_Online(Nullable<long> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableInt64_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableInt64_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableInt64_Online' operation.</returns>
            Nullable<long> EndReturnsNullableInt64_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableSByte_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableSByte_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableSByte_OnlineResponse")]
            IAsyncResult BeginReturnsNullableSByte_Online(Nullable<sbyte> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableSByte_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableSByte_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableSByte_Online' operation.</returns>
            Nullable<sbyte> EndReturnsNullableSByte_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableSingle_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableSingle_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableSingle_OnlineResponse")]
            IAsyncResult BeginReturnsNullableSingle_Online(Nullable<float> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableSingle_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableSingle_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableSingle_Online' operation.</returns>
            Nullable<float> EndReturnsNullableSingle_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableTimeSpan_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableTimeSpan_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableTimeSpan_OnlineResponse")]
            IAsyncResult BeginReturnsNullableTimeSpan_Online(Nullable<TimeSpan> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableTimeSpan_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableTimeSpan_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableTimeSpan_Online' operation.</returns>
            Nullable<TimeSpan> EndReturnsNullableTimeSpan_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableUInt16_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableUInt16_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableUInt16_OnlineResponse")]
            IAsyncResult BeginReturnsNullableUInt16_Online(Nullable<ushort> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableUInt16_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableUInt16_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableUInt16_Online' operation.</returns>
            Nullable<ushort> EndReturnsNullableUInt16_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableUInt32_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableUInt32_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableUInt32_OnlineResponse")]
            IAsyncResult BeginReturnsNullableUInt32_Online(Nullable<uint> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableUInt32_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableUInt32_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableUInt32_Online' operation.</returns>
            Nullable<uint> EndReturnsNullableUInt32_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsNullableUInt64_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableUInt64_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsNullableUInt64_OnlineResponse")]
            IAsyncResult BeginReturnsNullableUInt64_Online(Nullable<ulong> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsNullableUInt64_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsNullableUInt64_Online'.</param>
            /// <returns>The 'Nullable`1' returned from the 'ReturnsNullableUInt64_Online' operation.</returns>
            Nullable<ulong> EndReturnsNullableUInt64_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsSByte_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsSByte_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsSByte_OnlineResponse")]
            IAsyncResult BeginReturnsSByte_Online(sbyte value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsSByte_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsSByte_Online'.</param>
            /// <returns>The 'SByte' returned from the 'ReturnsSByte_Online' operation.</returns>
            sbyte EndReturnsSByte_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsSingle_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsSingle_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsSingle_OnlineResponse")]
            IAsyncResult BeginReturnsSingle_Online(float value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsSingle_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsSingle_Online'.</param>
            /// <returns>The 'Single' returned from the 'ReturnsSingle_Online' operation.</returns>
            float EndReturnsSingle_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsString_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsString_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsString_OnlineResponse")]
            IAsyncResult BeginReturnsString_Online(string value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsString_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsString_Online'.</param>
            /// <returns>The 'String' returned from the 'ReturnsString_Online' operation.</returns>
            string EndReturnsString_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsStrings_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsStrings_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsStrings_OnlineResponse")]
            IAsyncResult BeginReturnsStrings_Online(IEnumerable<string> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsStrings_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsStrings_Online'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'ReturnsStrings_Online' operation.</returns>
            IEnumerable<string> EndReturnsStrings_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsTimeSpan_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsTimeSpan_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsTimeSpan_OnlineResponse")]
            IAsyncResult BeginReturnsTimeSpan_Online(TimeSpan value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsTimeSpan_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsTimeSpan_Online'.</param>
            /// <returns>The 'TimeSpan' returned from the 'ReturnsTimeSpan_Online' operation.</returns>
            TimeSpan EndReturnsTimeSpan_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsTimeSpans_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsTimeSpans_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsTimeSpans_OnlineResponse")]
            IAsyncResult BeginReturnsTimeSpans_Online(IEnumerable<TimeSpan> value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsTimeSpans_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsTimeSpans_Online'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'ReturnsTimeSpans_Online' operation.</returns>
            IEnumerable<TimeSpan> EndReturnsTimeSpans_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsUInt16_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsUInt16_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsUInt16_OnlineResponse")]
            IAsyncResult BeginReturnsUInt16_Online(ushort value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsUInt16_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsUInt16_Online'.</param>
            /// <returns>The 'UInt16' returned from the 'ReturnsUInt16_Online' operation.</returns>
            ushort EndReturnsUInt16_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsUInt32_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsUInt32_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsUInt32_OnlineResponse")]
            IAsyncResult BeginReturnsUInt32_Online(uint value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsUInt32_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsUInt32_Online'.</param>
            /// <returns>The 'UInt32' returned from the 'ReturnsUInt32_Online' operation.</returns>
            uint EndReturnsUInt32_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsUInt64_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsUInt64_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsUInt64_OnlineResponse")]
            IAsyncResult BeginReturnsUInt64_Online(ulong value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsUInt64_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsUInt64_Online'.</param>
            /// <returns>The 'UInt64' returned from the 'ReturnsUInt64_Online' operation.</returns>
            ulong EndReturnsUInt64_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsUri_Online' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsUri_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsUri_OnlineResponse")]
            IAsyncResult BeginReturnsUri_Online(Uri value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsUri_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsUri_Online'.</param>
            /// <returns>The 'Uri' returned from the 'ReturnsUri_Online' operation.</returns>
            Uri EndReturnsUri_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnsXElement' operation.
            /// </summary>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ReturnsXElement", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ReturnsXElementResponse")]
            IAsyncResult BeginReturnsXElement(XElement value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnsXElement'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnsXElement'.</param>
            /// <returns>The 'XElement' returned from the 'ReturnsXElement' operation.</returns>
            XElement EndReturnsXElement(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RoundtripDouble' operation.
            /// </summary>
            /// <param name="d">The value for the 'd' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/RoundtripDouble", ReplyAction="http://tempuri.org/TestProvider_Scenarios/RoundtripDoubleResponse")]
            IAsyncResult BeginRoundtripDouble(double d, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRoundtripDouble'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRoundtripDouble'.</param>
            /// <returns>The 'Double' returned from the 'RoundtripDouble' operation.</returns>
            double EndRoundtripDouble(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'TestNullable_Online' operation.
            /// </summary>
            /// <param name="entity">The value for the 'entity' parameter of this action.</param>
            /// <param name="b1">The value for the 'b1' parameter of this action.</param>
            /// <param name="b2">The value for the 'b2' parameter of this action.</param>
            /// <param name="sb">The value for the 'sb' parameter of this action.</param>
            /// <param name="int16">The value for the 'int16' parameter of this action.</param>
            /// <param name="uint16">The value for the 'uint16' parameter of this action.</param>
            /// <param name="int32">The value for the 'int32' parameter of this action.</param>
            /// <param name="uint32">The value for the 'uint32' parameter of this action.</param>
            /// <param name="int64">The value for the 'int64' parameter of this action.</param>
            /// <param name="uint64">The value for the 'uint64' parameter of this action.</param>
            /// <param name="ch">The value for the 'ch' parameter of this action.</param>
            /// <param name="d">The value for the 'd' parameter of this action.</param>
            /// <param name="s">The value for the 's' parameter of this action.</param>
            /// <param name="dec">The value for the 'dec' parameter of this action.</param>
            /// <param name="dt">The value for the 'dt' parameter of this action.</param>
            /// <param name="ts">The value for the 'ts' parameter of this action.</param>
            /// <param name="g">The value for the 'g' parameter of this action.</param>
            /// <param name="en">The value for the 'en' parameter of this action.</param>
            /// <param name="nullableTimeSpans">The value for the 'nullableTimeSpans' parameter of this action.</param>
            /// <param name="dto">The value for the 'dto' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/TestNullable_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/TestNullable_OnlineResponse")]
            IAsyncResult BeginTestNullable_Online(
                        MixedType entity, 
                        Nullable<bool> b1, 
                        Nullable<byte> b2, 
                        Nullable<sbyte> sb, 
                        Nullable<short> int16, 
                        Nullable<ushort> uint16, 
                        Nullable<int> int32, 
                        Nullable<uint> uint32, 
                        Nullable<long> int64, 
                        Nullable<ulong> uint64, 
                        Nullable<char> ch, 
                        Nullable<double> d, 
                        Nullable<float> s, 
                        Nullable<decimal> dec, 
                        Nullable<DateTime> dt, 
                        Nullable<TimeSpan> ts, 
                        Nullable<Guid> g, 
                        Nullable<TestEnum> en, 
                        IEnumerable<Nullable<TimeSpan>> nullableTimeSpans, 
                        Nullable<DateTimeOffset> dto, 
                        AsyncCallback callback, 
                        object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginTestNullable_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginTestNullable_Online'.</param>
            /// <returns>The 'Boolean' returned from the 'TestNullable_Online' operation.</returns>
            bool EndTestNullable_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'TestPredefined_Online' operation.
            /// </summary>
            /// <param name="entity">The value for the 'entity' parameter of this action.</param>
            /// <param name="s">The value for the 's' parameter of this action.</param>
            /// <param name="d">The value for the 'd' parameter of this action.</param>
            /// <param name="dt">The value for the 'dt' parameter of this action.</param>
            /// <param name="ts">The value for the 'ts' parameter of this action.</param>
            /// <param name="strings">The value for the 'strings' parameter of this action.</param>
            /// <param name="uri">The value for the 'uri' parameter of this action.</param>
            /// <param name="g">The value for the 'g' parameter of this action.</param>
            /// <param name="b">The value for the 'b' parameter of this action.</param>
            /// <param name="x">The value for the 'x' parameter of this action.</param>
            /// <param name="bArray">The value for the 'bArray' parameter of this action.</param>
            /// <param name="en">The value for the 'en' parameter of this action.</param>
            /// <param name="guids">The value for the 'guids' parameter of this action.</param>
            /// <param name="ulongs">The value for the 'ulongs' parameter of this action.</param>
            /// <param name="dto">The value for the 'dto' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/TestPredefined_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/TestPredefined_OnlineResponse")]
            IAsyncResult BeginTestPredefined_Online(
                        MixedType entity, 
                        string s, 
                        decimal d, 
                        DateTime dt, 
                        TimeSpan ts, 
                        IEnumerable<string> strings, 
                        Uri uri, 
                        Guid g, 
                        byte[] b, 
                        XElement x, 
                        byte[] bArray, 
                        TestEnum en, 
                        Guid[] guids, 
                        ulong[] ulongs, 
                        DateTimeOffset dto, 
                        AsyncCallback callback, 
                        object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginTestPredefined_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginTestPredefined_Online'.</param>
            /// <returns>The 'Boolean' returned from the 'TestPredefined_Online' operation.</returns>
            bool EndTestPredefined_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'TestPrimitive_Online' operation.
            /// </summary>
            /// <param name="entity">The value for the 'entity' parameter of this action.</param>
            /// <param name="b1">The value for the 'b1' parameter of this action.</param>
            /// <param name="b2">The value for the 'b2' parameter of this action.</param>
            /// <param name="sb">The value for the 'sb' parameter of this action.</param>
            /// <param name="int16">The value for the 'int16' parameter of this action.</param>
            /// <param name="uint16">The value for the 'uint16' parameter of this action.</param>
            /// <param name="int32">The value for the 'int32' parameter of this action.</param>
            /// <param name="uint32">The value for the 'uint32' parameter of this action.</param>
            /// <param name="int64">The value for the 'int64' parameter of this action.</param>
            /// <param name="uint64">The value for the 'uint64' parameter of this action.</param>
            /// <param name="ch">The value for the 'ch' parameter of this action.</param>
            /// <param name="d">The value for the 'd' parameter of this action.</param>
            /// <param name="s">The value for the 's' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/TestPrimitive_Online", ReplyAction="http://tempuri.org/TestProvider_Scenarios/TestPrimitive_OnlineResponse")]
            IAsyncResult BeginTestPrimitive_Online(MixedType entity, bool b1, byte b2, sbyte sb, short int16, ushort uint16, int int32, uint uint32, long int64, ulong uint64, char ch, double d, float s, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginTestPrimitive_Online'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginTestPrimitive_Online'.</param>
            /// <returns>The 'Boolean' returned from the 'TestPrimitive_Online' operation.</returns>
            bool EndTestPrimitive_Online(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ThrowOnlineException' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ThrowOnlineException", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ThrowOnlineExceptionResponse")]
            IAsyncResult BeginThrowOnlineException(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginThrowOnlineException'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginThrowOnlineException'.</param>
            void EndThrowOnlineException(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ThrowValidationException' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/ThrowValidationException", ReplyAction="http://tempuri.org/TestProvider_Scenarios/ThrowValidationExceptionResponse")]
            IAsyncResult BeginThrowValidationException(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginThrowValidationException'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginThrowValidationException'.</param>
            void EndThrowValidationException(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'VariousParameterTypes' operation.
            /// </summary>
            /// <param name="str">The value for the 'str' parameter of this action.</param>
            /// <param name="integer">The value for the 'integer' parameter of this action.</param>
            /// <param name="boolean">The value for the 'boolean' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/VariousParameterTypes", ReplyAction="http://tempuri.org/TestProvider_Scenarios/VariousParameterTypesResponse")]
            IAsyncResult BeginVariousParameterTypes(string str, int integer, bool boolean, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginVariousParameterTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginVariousParameterTypes'.</param>
            /// <returns>The 'Int32' returned from the 'VariousParameterTypes' operation.</returns>
            int EndVariousParameterTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'VoidMethod' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/VoidMethod", ReplyAction="http://tempuri.org/TestProvider_Scenarios/VoidMethodResponse")]
            IAsyncResult BeginVoidMethod(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginVoidMethod'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginVoidMethod'.</param>
            void EndVoidMethod(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TestProvider_Scenarios/SubmitChanges", ReplyAction="http://tempuri.org/TestProvider_Scenarios/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class TestProvider_ScenariosEntityContainer : EntityContainer
        {
            
            public TestProvider_ScenariosEntityContainer()
            {
                this.CreateEntitySet<A>(EntitySetOperations.Edit);
                this.CreateEntitySet<B>(EntitySetOperations.None);
                this.CreateEntitySet<C>(EntitySetOperations.Add);
                this.CreateEntitySet<Cart>(EntitySetOperations.Add);
                this.CreateEntitySet<CartItem>(EntitySetOperations.Add);
                this.CreateEntitySet<CityWithCacheData>(EntitySetOperations.None);
                this.CreateEntitySet<D>(EntitySetOperations.Add);
                this.CreateEntitySet<Entity_TestEditableAttribute>(EntitySetOperations.Edit);
                this.CreateEntitySet<EntityWithDataContract>(EntitySetOperations.None);
                this.CreateEntitySet<EntityWithDataContract2>(EntitySetOperations.None);
                this.CreateEntitySet<EntityWithDefaultDefaultValue>(EntitySetOperations.None);
                this.CreateEntitySet<EntityWithXElement>(EntitySetOperations.Edit);
                this.CreateEntitySet<MixedType>(EntitySetOperations.Edit);
                this.CreateEntitySet<MultipartKeyTestEntity1>(EntitySetOperations.None);
                this.CreateEntitySet<MultipartKeyTestEntity2>(EntitySetOperations.None);
                this.CreateEntitySet<MultipartKeyTestEntity3>(EntitySetOperations.None);
                this.CreateEntitySet<NullableFKChild>(EntitySetOperations.None);
                this.CreateEntitySet<NullableFKParent>(EntitySetOperations.None);
                this.CreateEntitySet<POCONoValidation>(EntitySetOperations.All);
                this.CreateEntitySet<RoundtripOriginal_TestEntity>(EntitySetOperations.Edit);
                this.CreateEntitySet<RoundtripOriginal_TestEntity2>(EntitySetOperations.Edit);
                this.CreateEntitySet<RoundtripQueryEntity>(EntitySetOperations.None);
                this.CreateEntitySet<EntityWithSpecialTypeName>(EntitySetOperations.None);
                this.CreateEntitySet<TestCycles>(EntitySetOperations.None);
                this.CreateEntitySet<TestEntityForInvokeOperations>(EntitySetOperations.None);
                this.CreateEntitySet<TestSideEffects>(EntitySetOperations.None);
                this.CreateEntitySet<TimestampEntityA>(EntitySetOperations.Edit);
                this.CreateEntitySet<TimestampEntityB>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'TestSideEffects' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class TestSideEffects : Entity
    {
        
        private string _name;
        
        private Uri _url;
        
        private string _verb;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnURLChanging(Uri value);
        partial void OnURLChanged();
        partial void OnVerbChanging(string value);
        partial void OnVerbChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestSideEffects"/> class.
        /// </summary>
        public TestSideEffects()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'URL' value.
        /// </summary>
        [DataMember()]
        public Uri URL
        {
            get
            {
                return this._url;
            }
            set
            {
                if ((this._url != value))
                {
                    this.OnURLChanging(value);
                    this.RaiseDataMemberChanging("URL");
                    this.ValidateProperty("URL", value);
                    this._url = value;
                    this.RaiseDataMemberChanged("URL");
                    this.OnURLChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Verb' value.
        /// </summary>
        [DataMember()]
        public string Verb
        {
            get
            {
                return this._verb;
            }
            set
            {
                if ((this._verb != value))
                {
                    this.OnVerbChanging(value);
                    this.RaiseDataMemberChanging("Verb");
                    this.ValidateProperty("Verb", value);
                    this._verb = value;
                    this.RaiseDataMemberChanged("Verb");
                    this.OnVerbChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
    }
    
    /// <summary>
    /// The 'TimestampEntityA' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class TimestampEntityA : Entity
    {
        
        private int _id;
        
        private string _valueA;
        
        private string _valueB;
        
        private byte[] _version;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnValueAChanging(string value);
        partial void OnValueAChanged();
        partial void OnValueBChanging(string value);
        partial void OnValueBChanged();
        partial void OnVersionChanging(byte[] value);
        partial void OnVersionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TimestampEntityA"/> class.
        /// </summary>
        public TimestampEntityA()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValueA' value.
        /// </summary>
        [DataMember()]
        public string ValueA
        {
            get
            {
                return this._valueA;
            }
            set
            {
                if ((this._valueA != value))
                {
                    this.OnValueAChanging(value);
                    this.RaiseDataMemberChanging("ValueA");
                    this.ValidateProperty("ValueA", value);
                    this._valueA = value;
                    this.RaiseDataMemberChanged("ValueA");
                    this.OnValueAChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValueB' value.
        /// </summary>
        [DataMember()]
        public string ValueB
        {
            get
            {
                return this._valueB;
            }
            set
            {
                if ((this._valueB != value))
                {
                    this.OnValueBChanging(value);
                    this.RaiseDataMemberChanging("ValueB");
                    this.ValidateProperty("ValueB", value);
                    this._valueB = value;
                    this.RaiseDataMemberChanged("ValueB");
                    this.OnValueBChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Version' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this.OnVersionChanging(value);
                    this.ValidateProperty("Version", value);
                    this._version = value;
                    this.RaisePropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'TimestampEntityB' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class TimestampEntityB : Entity
    {
        
        private int _id;
        
        private string _valueA;
        
        private string _valueB;
        
        private byte[] _version;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnValueAChanging(string value);
        partial void OnValueAChanged();
        partial void OnValueBChanging(string value);
        partial void OnValueBChanged();
        partial void OnVersionChanging(byte[] value);
        partial void OnVersionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TimestampEntityB"/> class.
        /// </summary>
        public TimestampEntityB()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValueA' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string ValueA
        {
            get
            {
                return this._valueA;
            }
            set
            {
                if ((this._valueA != value))
                {
                    this.OnValueAChanging(value);
                    this.RaiseDataMemberChanging("ValueA");
                    this.ValidateProperty("ValueA", value);
                    this._valueA = value;
                    this.RaiseDataMemberChanged("ValueA");
                    this.OnValueAChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValueB' value.
        /// </summary>
        [DataMember()]
        public string ValueB
        {
            get
            {
                return this._valueB;
            }
            set
            {
                if ((this._valueB != value))
                {
                    this.OnValueBChanging(value);
                    this.RaiseDataMemberChanging("ValueB");
                    this.ValidateProperty("ValueB", value);
                    this._valueB = value;
                    this.RaiseDataMemberChanged("ValueB");
                    this.OnValueBChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Version' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this.OnVersionChanging(value);
                    this.ValidateProperty("Version", value);
                    this._version = value;
                    this.RaisePropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
namespace TestDomainServices.NamedUpdates
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.Threading.Tasks;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    using TestDomainServices;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'CalculatorDomainService' DomainService.
    /// </summary>
    public sealed partial class CalculatorDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculatorDomainContext"/> class.
        /// </summary>
        public CalculatorDomainContext() : 
                this(new Uri("TestDomainServices-NamedUpdates-CalculatorDomainService.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculatorDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CalculatorDomainService service URI.</param>
        public CalculatorDomainContext(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(ICalculatorDomainServiceContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculatorDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CalculatorDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="CalculatorValue"/> entity instances that have been loaded into this <see cref="CalculatorDomainContext"/> instance.
        /// </summary>
        public EntitySet<CalculatorValue> CalculatorValues
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CalculatorValue>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CalculatorValueOldCodeGen"/> entity instances that have been loaded into this <see cref="CalculatorDomainContext"/> instance.
        /// </summary>
        public EntitySet<CalculatorValueOldCodeGen> CalculatorValueOldCodeGens
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CalculatorValueOldCodeGen>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CalculatorValue"/> entity instances using the 'GetEntities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CalculatorValue"/> entity instances.</returns>
        public EntityQuery<CalculatorValue> GetEntitiesQuery()
        {
            this.ValidateMethod("GetEntitiesQuery", null);
            return base.CreateQuery<CalculatorValue>("GetEntities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CalculatorValueOldCodeGen"/> entity instances using the 'GetEntitiesOldCodeGen' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CalculatorValueOldCodeGen"/> entity instances.</returns>
        public EntityQuery<CalculatorValueOldCodeGen> GetEntitiesOldCodeGenQuery()
        {
            this.ValidateMethod("GetEntitiesOldCodeGenQuery", null);
            return base.CreateQuery<CalculatorValueOldCodeGen>("GetEntitiesOldCodeGen", null, false, true);
        }
        
        /// <summary>
        /// Invokes the 'Add' method of the specified <see cref="CalculatorValue"/> entity.
        /// </summary>
        /// <param name="value">The <see cref="CalculatorValue"/> entity instance.</param>
        /// <param name="rhs">The value for the 'rhs' parameter for this action.</param>
        public void Add(CalculatorValue value, decimal rhs)
        {
            value.Add(rhs);
        }
        
        /// <summary>
        /// Invokes the 'Multiply' method of the specified <see cref="CalculatorValue"/> entity.
        /// </summary>
        /// <param name="value">The <see cref="CalculatorValue"/> entity instance.</param>
        /// <param name="rhs">The value for the 'rhs' parameter for this action.</param>
        public void Multiply(CalculatorValue value, decimal rhs)
        {
            value.Multiply(rhs);
        }
        
        /// <summary>
        /// Invokes the 'AddTwice' method of the specified <see cref="CalculatorValueOldCodeGen"/> entity.
        /// </summary>
        /// <param name="value">The <see cref="CalculatorValueOldCodeGen"/> entity instance.</param>
        /// <param name="rhs">The value for the 'rhs' parameter for this action.</param>
        public void AddTwice(CalculatorValueOldCodeGen value, decimal rhs)
        {
            value.AddTwice(rhs);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CalculatorDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CalculatorDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        [ServiceKnownType(typeof(decimal))]
        public interface ICalculatorDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CalculatorDomainService/GetEntities", ReplyAction="http://tempuri.org/CalculatorDomainService/GetEntitiesResponse")]
            IAsyncResult BeginGetEntities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntities' operation.</returns>
            QueryResult<CalculatorValue> EndGetEntities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntitiesOldCodeGen' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CalculatorDomainService/GetEntitiesOldCodeGen", ReplyAction="http://tempuri.org/CalculatorDomainService/GetEntitiesOldCodeGenResponse")]
            IAsyncResult BeginGetEntitiesOldCodeGen(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntitiesOldCodeGen'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntitiesOldCodeGen'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntitiesOldCodeGen' operation.</returns>
            QueryResult<CalculatorValueOldCodeGen> EndGetEntitiesOldCodeGen(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CalculatorDomainService/SubmitChanges", ReplyAction="http://tempuri.org/CalculatorDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CalculatorDomainContextEntityContainer : EntityContainer
        {
            
            public CalculatorDomainContextEntityContainer()
            {
                this.CreateEntitySet<CalculatorValue>(EntitySetOperations.Edit);
                this.CreateEntitySet<CalculatorValueOldCodeGen>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'CalculatorValue' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class CalculatorValue : Entity
    {
        
        private int _key;
        
        private decimal _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnKeyChanging(int value);
        partial void OnKeyChanged();
        partial void OnValueChanging(decimal value);
        partial void OnValueChanged();
        partial void OnAddInvoking(decimal rhs);
        partial void OnAddInvoked();
        partial void OnMultiplyInvoking(decimal rhs);
        partial void OnMultiplyInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculatorValue"/> class.
        /// </summary>
        public CalculatorValue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Key' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaisePropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public decimal Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'Add' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsAddInvoked
        {
            get
            {
                return base.IsActionInvoked("Add");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'Add' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanAdd
        {
            get
            {
                return base.CanInvokeAction("Add");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'Multiply' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsMultiplyInvoked
        {
            get
            {
                return base.IsActionInvoked("Multiply");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'Multiply' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanMultiply
        {
            get
            {
                return base.CanInvokeAction("Multiply");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._key;
        }
        
        /// <summary>
        /// Invokes the 'Add' action on this entity.
        /// </summary>
        /// <param name="rhs">The value to pass to the server method's 'rhs' parameter.</param>
        [EntityAction("Add", AllowMultipleInvocations=true)]
        public void Add(decimal rhs)
        {
            this.OnAddInvoking(rhs);
            base.InvokeAction("Add", rhs);
            this.OnAddInvoked();
        }
        
        /// <summary>
        /// Invokes the 'Multiply' action on this entity.
        /// </summary>
        /// <param name="rhs">The value to pass to the server method's 'rhs' parameter.</param>
        [EntityAction("Multiply", AllowMultipleInvocations=true)]
        public void Multiply(decimal rhs)
        {
            this.OnMultiplyInvoking(rhs);
            base.InvokeAction("Multiply", rhs);
            this.OnMultiplyInvoked();
        }
    }
    
    /// <summary>
    /// The 'CalculatorValueOldCodeGen' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class CalculatorValueOldCodeGen : Entity
    {
        
        private int _key;
        
        private decimal _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnKeyChanging(int value);
        partial void OnKeyChanged();
        partial void OnValueChanging(decimal value);
        partial void OnValueChanged();
        partial void OnAddTwiceInvoking(decimal rhs);
        partial void OnAddTwiceInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculatorValueOldCodeGen"/> class.
        /// </summary>
        public CalculatorValueOldCodeGen()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Key' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaisePropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public decimal Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'AddTwice' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsAddTwiceInvoked
        {
            get
            {
                return base.IsActionInvoked("AddTwice");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'AddTwice' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanAddTwice
        {
            get
            {
                return base.CanInvokeAction("AddTwice");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._key;
        }
        
        /// <summary>
        /// Invokes the 'AddTwice' action on this entity.
        /// </summary>
        /// <param name="rhs">The value to pass to the server method's 'rhs' parameter.</param>
        [EntityAction("AddTwice", AllowMultipleInvocations=false)]
        public void AddTwice(decimal rhs)
        {
            this.OnAddTwiceInvoking(rhs);
            base.InvokeAction("AddTwice", rhs);
            this.OnAddTwiceInvoked();
        }
    }
    
    /// <summary>
    /// The 'MockComplexObject1' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class MockComplexObject1 : ComplexObject
    {
        
        private MockComplexObject1 _property1;
        
        private string _validatedProperty;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnProperty1Changing(MockComplexObject1 value);
        partial void OnProperty1Changed();
        partial void OnValidatedPropertyChanging(string value);
        partial void OnValidatedPropertyChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockComplexObject1"/> class.
        /// </summary>
        public MockComplexObject1()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Property1' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MockComplexObject1 Property1
        {
            get
            {
                return this._property1;
            }
            set
            {
                if ((this._property1 != value))
                {
                    this.OnProperty1Changing(value);
                    this.RaiseDataMemberChanging("Property1");
                    this.ValidateProperty("Property1", value);
                    this._property1 = value;
                    this.RaiseDataMemberChanged("Property1");
                    this.OnProperty1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValidatedProperty' value.
        /// </summary>
        [CustomValidation(typeof(DynamicTestValidator), "Validate")]
        [DataMember()]
        public string ValidatedProperty
        {
            get
            {
                return this._validatedProperty;
            }
            set
            {
                if ((this._validatedProperty != value))
                {
                    this.OnValidatedPropertyChanging(value);
                    this.RaiseDataMemberChanging("ValidatedProperty");
                    this.ValidateProperty("ValidatedProperty", value);
                    this._validatedProperty = value;
                    this.RaiseDataMemberChanged("ValidatedProperty");
                    this.OnValidatedPropertyChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'MockComplexObject2' class.
    /// </summary>
    [CustomValidation(typeof(DynamicTestValidator), "Validate")]
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class MockComplexObject2 : ComplexObject
    {
        
        private MockComplexObject2 _property1;
        
        private string _validatedProperty;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnProperty1Changing(MockComplexObject2 value);
        partial void OnProperty1Changed();
        partial void OnValidatedPropertyChanging(string value);
        partial void OnValidatedPropertyChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockComplexObject2"/> class.
        /// </summary>
        public MockComplexObject2()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Property1' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MockComplexObject2 Property1
        {
            get
            {
                return this._property1;
            }
            set
            {
                if ((this._property1 != value))
                {
                    this.OnProperty1Changing(value);
                    this.RaiseDataMemberChanging("Property1");
                    this.ValidateProperty("Property1", value);
                    this._property1 = value;
                    this.RaiseDataMemberChanged("Property1");
                    this.OnProperty1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValidatedProperty' value.
        /// </summary>
        [CustomValidation(typeof(DynamicTestValidator), "Validate")]
        [DataMember()]
        public string ValidatedProperty
        {
            get
            {
                return this._validatedProperty;
            }
            set
            {
                if ((this._validatedProperty != value))
                {
                    this.OnValidatedPropertyChanging(value);
                    this.RaiseDataMemberChanging("ValidatedProperty");
                    this.ValidateProperty("ValidatedProperty", value);
                    this._validatedProperty = value;
                    this.RaiseDataMemberChanged("ValidatedProperty");
                    this.OnValidatedPropertyChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'MockComplexObject3' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class MockComplexObject3 : ComplexObject
    {
        
        private MockComplexObject4[] _commonArray;
        
        private MockComplexObject4 _commonProperty;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCommonArrayChanging(MockComplexObject4[] value);
        partial void OnCommonArrayChanged();
        partial void OnCommonPropertyChanging(MockComplexObject4 value);
        partial void OnCommonPropertyChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockComplexObject3"/> class.
        /// </summary>
        public MockComplexObject3()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CommonArray' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MockComplexObject4[] CommonArray
        {
            get
            {
                return this._commonArray;
            }
            set
            {
                if ((this._commonArray != value))
                {
                    this.OnCommonArrayChanging(value);
                    this.RaiseDataMemberChanging("CommonArray");
                    this.ValidateProperty("CommonArray", value);
                    this._commonArray = value;
                    this.RaiseDataMemberChanged("CommonArray");
                    this.OnCommonArrayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CommonProperty' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MockComplexObject4 CommonProperty
        {
            get
            {
                return this._commonProperty;
            }
            set
            {
                if ((this._commonProperty != value))
                {
                    this.OnCommonPropertyChanging(value);
                    this.RaiseDataMemberChanging("CommonProperty");
                    this.ValidateProperty("CommonProperty", value);
                    this._commonProperty = value;
                    this.RaiseDataMemberChanged("CommonProperty");
                    this.OnCommonPropertyChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'MockComplexObject4' class.
    /// </summary>
    [CustomValidation(typeof(DynamicTestValidator), "Validate")]
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class MockComplexObject4 : ComplexObject
    {
        
        private MockComplexObject4 _property1;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnProperty1Changing(MockComplexObject4 value);
        partial void OnProperty1Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockComplexObject4"/> class.
        /// </summary>
        public MockComplexObject4()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Property1' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MockComplexObject4 Property1
        {
            get
            {
                return this._property1;
            }
            set
            {
                if ((this._property1 != value))
                {
                    this.OnProperty1Changing(value);
                    this.RaiseDataMemberChanging("Property1");
                    this.ValidateProperty("Property1", value);
                    this._property1 = value;
                    this.RaiseDataMemberChanged("Property1");
                    this.OnProperty1Changed();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'MockEntity1' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class MockEntity1 : Entity
    {
        
        private int _key;
        
        private string _property1;
        
        private string _property2;
        
        private string _property3;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnKeyChanging(int value);
        partial void OnKeyChanged();
        partial void OnProperty1Changing(string value);
        partial void OnProperty1Changed();
        partial void OnProperty2Changing(string value);
        partial void OnProperty2Changed();
        partial void OnProperty3Changing(string value);
        partial void OnProperty3Changed();
        partial void OnNamedUpdateMethodInvoking(string newProperty1);
        partial void OnNamedUpdateMethodInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockEntity1"/> class.
        /// </summary>
        public MockEntity1()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Key' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaisePropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property1' value.
        /// </summary>
        [DataMember()]
        public string Property1
        {
            get
            {
                return this._property1;
            }
            set
            {
                if ((this._property1 != value))
                {
                    this.OnProperty1Changing(value);
                    this.RaiseDataMemberChanging("Property1");
                    this.ValidateProperty("Property1", value);
                    this._property1 = value;
                    this.RaiseDataMemberChanged("Property1");
                    this.OnProperty1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property2' value.
        /// </summary>
        [DataMember()]
        public string Property2
        {
            get
            {
                return this._property2;
            }
            set
            {
                if ((this._property2 != value))
                {
                    this.OnProperty2Changing(value);
                    this.RaiseDataMemberChanging("Property2");
                    this.ValidateProperty("Property2", value);
                    this._property2 = value;
                    this.RaiseDataMemberChanged("Property2");
                    this.OnProperty2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property3' value.
        /// </summary>
        [DataMember()]
        public string Property3
        {
            get
            {
                return this._property3;
            }
            set
            {
                if ((this._property3 != value))
                {
                    this.OnProperty3Changing(value);
                    this.RaiseDataMemberChanging("Property3");
                    this.ValidateProperty("Property3", value);
                    this._property3 = value;
                    this.RaiseDataMemberChanged("Property3");
                    this.OnProperty3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateMethod' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsNamedUpdateMethodInvoked
        {
            get
            {
                return base.IsActionInvoked("NamedUpdateMethod");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateMethod' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanNamedUpdateMethod
        {
            get
            {
                return base.CanInvokeAction("NamedUpdateMethod");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._key;
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateMethod' action on this entity.
        /// </summary>
        /// <param name="newProperty1">The value to pass to the server method's 'newProperty1' parameter.</param>
        [EntityAction("NamedUpdateMethod", AllowMultipleInvocations=false)]
        public void NamedUpdateMethod(string newProperty1)
        {
            this.OnNamedUpdateMethodInvoking(newProperty1);
            base.InvokeAction("NamedUpdateMethod", newProperty1);
            this.OnNamedUpdateMethodInvoked();
        }
    }
    
    /// <summary>
    /// The 'MockEntity2' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class MockEntity2 : Entity
    {
        
        private int _key;
        
        private string _property1;
        
        private string _property2;
        
        private string _property3;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnKeyChanging(int value);
        partial void OnKeyChanged();
        partial void OnProperty1Changing(string value);
        partial void OnProperty1Changed();
        partial void OnProperty2Changing(string value);
        partial void OnProperty2Changed();
        partial void OnProperty3Changing(string value);
        partial void OnProperty3Changed();
        partial void OnNamedUpdateMethodInvoking(string newProperty1);
        partial void OnNamedUpdateMethodInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockEntity2"/> class.
        /// </summary>
        public MockEntity2()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Key' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaisePropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property1' value.
        /// </summary>
        [DataMember()]
        public string Property1
        {
            get
            {
                return this._property1;
            }
            set
            {
                if ((this._property1 != value))
                {
                    this.OnProperty1Changing(value);
                    this.RaiseDataMemberChanging("Property1");
                    this.ValidateProperty("Property1", value);
                    this._property1 = value;
                    this.RaiseDataMemberChanged("Property1");
                    this.OnProperty1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property2' value.
        /// </summary>
        [DataMember()]
        public string Property2
        {
            get
            {
                return this._property2;
            }
            set
            {
                if ((this._property2 != value))
                {
                    this.OnProperty2Changing(value);
                    this.RaiseDataMemberChanging("Property2");
                    this.ValidateProperty("Property2", value);
                    this._property2 = value;
                    this.RaiseDataMemberChanged("Property2");
                    this.OnProperty2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property3' value.
        /// </summary>
        [DataMember()]
        public string Property3
        {
            get
            {
                return this._property3;
            }
            set
            {
                if ((this._property3 != value))
                {
                    this.OnProperty3Changing(value);
                    this.RaiseDataMemberChanging("Property3");
                    this.ValidateProperty("Property3", value);
                    this._property3 = value;
                    this.RaiseDataMemberChanged("Property3");
                    this.OnProperty3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateMethod' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsNamedUpdateMethodInvoked
        {
            get
            {
                return base.IsActionInvoked("NamedUpdateMethod");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateMethod' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanNamedUpdateMethod
        {
            get
            {
                return base.CanInvokeAction("NamedUpdateMethod");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._key;
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateMethod' action on this entity.
        /// </summary>
        /// <param name="newProperty1">The value to pass to the server method's 'newProperty1' parameter.</param>
        [EntityAction("NamedUpdateMethod", AllowMultipleInvocations=false)]
        public void NamedUpdateMethod(string newProperty1)
        {
            this.OnNamedUpdateMethodInvoking(newProperty1);
            base.InvokeAction("NamedUpdateMethod", newProperty1);
            this.OnNamedUpdateMethodInvoked();
        }
    }
    
    /// <summary>
    /// The 'MockEntity3' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class MockEntity3 : Entity
    {
        
        private int _key;
        
        private string _property1;
        
        private string _property2;
        
        private string _property3;
        
        private string _validatedProperty;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnKeyChanging(int value);
        partial void OnKeyChanged();
        partial void OnProperty1Changing(string value);
        partial void OnProperty1Changed();
        partial void OnProperty2Changing(string value);
        partial void OnProperty2Changed();
        partial void OnProperty3Changing(string value);
        partial void OnProperty3Changed();
        partial void OnValidatedPropertyChanging(string value);
        partial void OnValidatedPropertyChanged();
        partial void OnNamedUpdateWithParamValidationInvoking([CustomValidation(typeof(DynamicTestValidator), "Validate")] MockComplexObject1[] array, [CustomValidation(typeof(DynamicTestValidator), "Validate")] MockComplexObject1 complexObject);
        partial void OnNamedUpdateWithParamValidationInvoked();
        partial void OnNamedUpdateWithPropValidationInvoking(MockComplexObject1[] array, MockComplexObject1 complexObject);
        partial void OnNamedUpdateWithPropValidationInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockEntity3"/> class.
        /// </summary>
        public MockEntity3()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Key' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaisePropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property1' value.
        /// </summary>
        [DataMember()]
        public string Property1
        {
            get
            {
                return this._property1;
            }
            set
            {
                if ((this._property1 != value))
                {
                    this.OnProperty1Changing(value);
                    this.RaiseDataMemberChanging("Property1");
                    this.ValidateProperty("Property1", value);
                    this._property1 = value;
                    this.RaiseDataMemberChanged("Property1");
                    this.OnProperty1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property2' value.
        /// </summary>
        [DataMember()]
        public string Property2
        {
            get
            {
                return this._property2;
            }
            set
            {
                if ((this._property2 != value))
                {
                    this.OnProperty2Changing(value);
                    this.RaiseDataMemberChanging("Property2");
                    this.ValidateProperty("Property2", value);
                    this._property2 = value;
                    this.RaiseDataMemberChanged("Property2");
                    this.OnProperty2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property3' value.
        /// </summary>
        [DataMember()]
        public string Property3
        {
            get
            {
                return this._property3;
            }
            set
            {
                if ((this._property3 != value))
                {
                    this.OnProperty3Changing(value);
                    this.RaiseDataMemberChanging("Property3");
                    this.ValidateProperty("Property3", value);
                    this._property3 = value;
                    this.RaiseDataMemberChanged("Property3");
                    this.OnProperty3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValidatedProperty' value.
        /// </summary>
        [CustomValidation(typeof(DynamicTestValidator), "Validate")]
        [DataMember()]
        public string ValidatedProperty
        {
            get
            {
                return this._validatedProperty;
            }
            set
            {
                if ((this._validatedProperty != value))
                {
                    this.OnValidatedPropertyChanging(value);
                    this.RaiseDataMemberChanging("ValidatedProperty");
                    this.ValidateProperty("ValidatedProperty", value);
                    this._validatedProperty = value;
                    this.RaiseDataMemberChanged("ValidatedProperty");
                    this.OnValidatedPropertyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateWithParamValidation' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsNamedUpdateWithParamValidationInvoked
        {
            get
            {
                return base.IsActionInvoked("NamedUpdateWithParamValidation");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateWithParamValidation' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanNamedUpdateWithParamValidation
        {
            get
            {
                return base.CanInvokeAction("NamedUpdateWithParamValidation");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateWithPropValidation' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsNamedUpdateWithPropValidationInvoked
        {
            get
            {
                return base.IsActionInvoked("NamedUpdateWithPropValidation");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateWithPropValidation' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanNamedUpdateWithPropValidation
        {
            get
            {
                return base.CanInvokeAction("NamedUpdateWithPropValidation");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._key;
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateWithParamValidation' action on this entity.
        /// </summary>
        /// <param name="array">The value to pass to the server method's 'array' parameter.</param>
        /// <param name="complexObject">The value to pass to the server method's 'complexObject' parameter.</param>
        [EntityAction("NamedUpdateWithParamValidation", AllowMultipleInvocations=false)]
        public void NamedUpdateWithParamValidation([CustomValidation(typeof(DynamicTestValidator), "Validate")] MockComplexObject1[] array, [CustomValidation(typeof(DynamicTestValidator), "Validate")] MockComplexObject1 complexObject)
        {
            this.OnNamedUpdateWithParamValidationInvoking(array, complexObject);
            base.InvokeAction("NamedUpdateWithParamValidation", array, complexObject);
            this.OnNamedUpdateWithParamValidationInvoked();
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateWithPropValidation' action on this entity.
        /// </summary>
        /// <param name="array">The value to pass to the server method's 'array' parameter.</param>
        /// <param name="complexObject">The value to pass to the server method's 'complexObject' parameter.</param>
        [EntityAction("NamedUpdateWithPropValidation", AllowMultipleInvocations=false)]
        public void NamedUpdateWithPropValidation(MockComplexObject1[] array, MockComplexObject1 complexObject)
        {
            this.OnNamedUpdateWithPropValidationInvoking(array, complexObject);
            base.InvokeAction("NamedUpdateWithPropValidation", array, complexObject);
            this.OnNamedUpdateWithPropValidationInvoked();
        }
    }
    
    /// <summary>
    /// The 'MockEntity4' entity class.
    /// </summary>
    [CustomValidation(typeof(DynamicTestValidator), "Validate")]
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class MockEntity4 : Entity
    {
        
        private int _key;
        
        private string _property1;
        
        private string _property2;
        
        private string _property3;
        
        private string _validatedProperty;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnKeyChanging(int value);
        partial void OnKeyChanged();
        partial void OnProperty1Changing(string value);
        partial void OnProperty1Changed();
        partial void OnProperty2Changing(string value);
        partial void OnProperty2Changed();
        partial void OnProperty3Changing(string value);
        partial void OnProperty3Changed();
        partial void OnValidatedPropertyChanging(string value);
        partial void OnValidatedPropertyChanged();
        partial void OnNamedUpdateWithTypeValidationInvoking(MockComplexObject2[] array, MockComplexObject2 complexObject);
        partial void OnNamedUpdateWithTypeValidationInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockEntity4"/> class.
        /// </summary>
        public MockEntity4()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Key' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaisePropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property1' value.
        /// </summary>
        [DataMember()]
        public string Property1
        {
            get
            {
                return this._property1;
            }
            set
            {
                if ((this._property1 != value))
                {
                    this.OnProperty1Changing(value);
                    this.RaiseDataMemberChanging("Property1");
                    this.ValidateProperty("Property1", value);
                    this._property1 = value;
                    this.RaiseDataMemberChanged("Property1");
                    this.OnProperty1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property2' value.
        /// </summary>
        [DataMember()]
        public string Property2
        {
            get
            {
                return this._property2;
            }
            set
            {
                if ((this._property2 != value))
                {
                    this.OnProperty2Changing(value);
                    this.RaiseDataMemberChanging("Property2");
                    this.ValidateProperty("Property2", value);
                    this._property2 = value;
                    this.RaiseDataMemberChanged("Property2");
                    this.OnProperty2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property3' value.
        /// </summary>
        [DataMember()]
        public string Property3
        {
            get
            {
                return this._property3;
            }
            set
            {
                if ((this._property3 != value))
                {
                    this.OnProperty3Changing(value);
                    this.RaiseDataMemberChanging("Property3");
                    this.ValidateProperty("Property3", value);
                    this._property3 = value;
                    this.RaiseDataMemberChanged("Property3");
                    this.OnProperty3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValidatedProperty' value.
        /// </summary>
        [CustomValidation(typeof(DynamicTestValidator), "Validate")]
        [DataMember()]
        public string ValidatedProperty
        {
            get
            {
                return this._validatedProperty;
            }
            set
            {
                if ((this._validatedProperty != value))
                {
                    this.OnValidatedPropertyChanging(value);
                    this.RaiseDataMemberChanging("ValidatedProperty");
                    this.ValidateProperty("ValidatedProperty", value);
                    this._validatedProperty = value;
                    this.RaiseDataMemberChanged("ValidatedProperty");
                    this.OnValidatedPropertyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateWithTypeValidation' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsNamedUpdateWithTypeValidationInvoked
        {
            get
            {
                return base.IsActionInvoked("NamedUpdateWithTypeValidation");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateWithTypeValidation' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanNamedUpdateWithTypeValidation
        {
            get
            {
                return base.CanInvokeAction("NamedUpdateWithTypeValidation");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._key;
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateWithTypeValidation' action on this entity.
        /// </summary>
        /// <param name="array">The value to pass to the server method's 'array' parameter.</param>
        /// <param name="complexObject">The value to pass to the server method's 'complexObject' parameter.</param>
        [EntityAction("NamedUpdateWithTypeValidation", AllowMultipleInvocations=false)]
        public void NamedUpdateWithTypeValidation(MockComplexObject2[] array, MockComplexObject2 complexObject)
        {
            this.OnNamedUpdateWithTypeValidationInvoking(array, complexObject);
            base.InvokeAction("NamedUpdateWithTypeValidation", array, complexObject);
            this.OnNamedUpdateWithTypeValidationInvoked();
        }
    }
    
    /// <summary>
    /// The 'MockEntity5' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class MockEntity5 : Entity
    {
        
        private MockComplexObject4[] _commonArray;
        
        private MockComplexObject4 _commonProperty;
        
        private int _key;
        
        private string _property1;
        
        private string _property2;
        
        private string _property3;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCommonArrayChanging(MockComplexObject4[] value);
        partial void OnCommonArrayChanged();
        partial void OnCommonPropertyChanging(MockComplexObject4 value);
        partial void OnCommonPropertyChanged();
        partial void OnKeyChanging(int value);
        partial void OnKeyChanged();
        partial void OnProperty1Changing(string value);
        partial void OnProperty1Changed();
        partial void OnProperty2Changing(string value);
        partial void OnProperty2Changed();
        partial void OnProperty3Changing(string value);
        partial void OnProperty3Changed();
        partial void OnNamedUpdateWithCommonPropertiesInvoking(MockComplexObject3 complexObject);
        partial void OnNamedUpdateWithCommonPropertiesInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockEntity5"/> class.
        /// </summary>
        public MockEntity5()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CommonArray' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MockComplexObject4[] CommonArray
        {
            get
            {
                return this._commonArray;
            }
            set
            {
                if ((this._commonArray != value))
                {
                    this.OnCommonArrayChanging(value);
                    this.RaiseDataMemberChanging("CommonArray");
                    this.ValidateProperty("CommonArray", value);
                    this._commonArray = value;
                    this.RaiseDataMemberChanged("CommonArray");
                    this.OnCommonArrayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CommonProperty' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MockComplexObject4 CommonProperty
        {
            get
            {
                return this._commonProperty;
            }
            set
            {
                if ((this._commonProperty != value))
                {
                    this.OnCommonPropertyChanging(value);
                    this.RaiseDataMemberChanging("CommonProperty");
                    this.ValidateProperty("CommonProperty", value);
                    this._commonProperty = value;
                    this.RaiseDataMemberChanged("CommonProperty");
                    this.OnCommonPropertyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaisePropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property1' value.
        /// </summary>
        [DataMember()]
        public string Property1
        {
            get
            {
                return this._property1;
            }
            set
            {
                if ((this._property1 != value))
                {
                    this.OnProperty1Changing(value);
                    this.RaiseDataMemberChanging("Property1");
                    this.ValidateProperty("Property1", value);
                    this._property1 = value;
                    this.RaiseDataMemberChanged("Property1");
                    this.OnProperty1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property2' value.
        /// </summary>
        [DataMember()]
        public string Property2
        {
            get
            {
                return this._property2;
            }
            set
            {
                if ((this._property2 != value))
                {
                    this.OnProperty2Changing(value);
                    this.RaiseDataMemberChanging("Property2");
                    this.ValidateProperty("Property2", value);
                    this._property2 = value;
                    this.RaiseDataMemberChanged("Property2");
                    this.OnProperty2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property3' value.
        /// </summary>
        [DataMember()]
        public string Property3
        {
            get
            {
                return this._property3;
            }
            set
            {
                if ((this._property3 != value))
                {
                    this.OnProperty3Changing(value);
                    this.RaiseDataMemberChanging("Property3");
                    this.ValidateProperty("Property3", value);
                    this._property3 = value;
                    this.RaiseDataMemberChanged("Property3");
                    this.OnProperty3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateWithCommonProperties' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsNamedUpdateWithCommonPropertiesInvoked
        {
            get
            {
                return base.IsActionInvoked("NamedUpdateWithCommonProperties");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateWithCommonProperties' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanNamedUpdateWithCommonProperties
        {
            get
            {
                return base.CanInvokeAction("NamedUpdateWithCommonProperties");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._key;
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateWithCommonProperties' action on this entity.
        /// </summary>
        /// <param name="complexObject">The value to pass to the server method's 'complexObject' parameter.</param>
        [EntityAction("NamedUpdateWithCommonProperties", AllowMultipleInvocations=false)]
        public void NamedUpdateWithCommonProperties(MockComplexObject3 complexObject)
        {
            this.OnNamedUpdateWithCommonPropertiesInvoking(complexObject);
            base.InvokeAction("NamedUpdateWithCommonProperties", complexObject);
            this.OnNamedUpdateWithCommonPropertiesInvoked();
        }
    }
    
    /// <summary>
    /// The 'MockEntity6' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.NamedUpdates")]
    public sealed partial class MockEntity6 : Entity
    {
        
        private int _key;
        
        private string _property1;
        
        private string _property2;
        
        private string _property3;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnKeyChanging(int value);
        partial void OnKeyChanged();
        partial void OnProperty1Changing(string value);
        partial void OnProperty1Changed();
        partial void OnProperty2Changing(string value);
        partial void OnProperty2Changed();
        partial void OnProperty3Changing(string value);
        partial void OnProperty3Changed();
        partial void OnNamedUpdateWithNoEntityValidationInvoking(MockComplexObject2 complexObject);
        partial void OnNamedUpdateWithNoEntityValidationInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockEntity6"/> class.
        /// </summary>
        public MockEntity6()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Key' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaisePropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property1' value.
        /// </summary>
        [DataMember()]
        public string Property1
        {
            get
            {
                return this._property1;
            }
            set
            {
                if ((this._property1 != value))
                {
                    this.OnProperty1Changing(value);
                    this.RaiseDataMemberChanging("Property1");
                    this.ValidateProperty("Property1", value);
                    this._property1 = value;
                    this.RaiseDataMemberChanged("Property1");
                    this.OnProperty1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property2' value.
        /// </summary>
        [DataMember()]
        public string Property2
        {
            get
            {
                return this._property2;
            }
            set
            {
                if ((this._property2 != value))
                {
                    this.OnProperty2Changing(value);
                    this.RaiseDataMemberChanging("Property2");
                    this.ValidateProperty("Property2", value);
                    this._property2 = value;
                    this.RaiseDataMemberChanged("Property2");
                    this.OnProperty2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property3' value.
        /// </summary>
        [DataMember()]
        public string Property3
        {
            get
            {
                return this._property3;
            }
            set
            {
                if ((this._property3 != value))
                {
                    this.OnProperty3Changing(value);
                    this.RaiseDataMemberChanging("Property3");
                    this.ValidateProperty("Property3", value);
                    this._property3 = value;
                    this.RaiseDataMemberChanged("Property3");
                    this.OnProperty3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateWithNoEntityValidation' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsNamedUpdateWithNoEntityValidationInvoked
        {
            get
            {
                return base.IsActionInvoked("NamedUpdateWithNoEntityValidation");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'NamedUpdateWithNoEntityValidation' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanNamedUpdateWithNoEntityValidation
        {
            get
            {
                return base.CanInvokeAction("NamedUpdateWithNoEntityValidation");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._key;
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateWithNoEntityValidation' action on this entity.
        /// </summary>
        /// <param name="complexObject">The value to pass to the server method's 'complexObject' parameter.</param>
        [EntityAction("NamedUpdateWithNoEntityValidation", AllowMultipleInvocations=false)]
        public void NamedUpdateWithNoEntityValidation(MockComplexObject2 complexObject)
        {
            this.OnNamedUpdateWithNoEntityValidationInvoking(complexObject);
            base.InvokeAction("NamedUpdateWithNoEntityValidation", complexObject);
            this.OnNamedUpdateWithNoEntityValidationInvoked();
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'NamedUpdate_CustomAndUpdate' DomainService.
    /// </summary>
    public sealed partial class NamedUpdate_CustomAndUpdate : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NamedUpdate_CustomAndUpdate"/> class.
        /// </summary>
        public NamedUpdate_CustomAndUpdate() : 
                this(new Uri("TestDomainServices-NamedUpdates-NamedUpdate_CustomAndUpdate.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NamedUpdate_CustomAndUpdate"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The NamedUpdate_CustomAndUpdate service URI.</param>
        public NamedUpdate_CustomAndUpdate(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(INamedUpdate_CustomAndUpdateContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NamedUpdate_CustomAndUpdate"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public NamedUpdate_CustomAndUpdate(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MockEntity2"/> entity instances that have been loaded into this <see cref="NamedUpdate_CustomAndUpdate"/> instance.
        /// </summary>
        public EntitySet<MockEntity2> MockEntity2s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MockEntity2>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MockEntity2"/> entity instances using the 'GetEntities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MockEntity2"/> entity instances.</returns>
        public EntityQuery<MockEntity2> GetEntitiesQuery()
        {
            this.ValidateMethod("GetEntitiesQuery", null);
            return base.CreateQuery<MockEntity2>("GetEntities", null, false, true);
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateMethod' method of the specified <see cref="MockEntity2"/> entity.
        /// </summary>
        /// <param name="entity">The <see cref="MockEntity2"/> entity instance.</param>
        /// <param name="newProperty1">The value for the 'newProperty1' parameter for this action.</param>
        public void NamedUpdateMethod(MockEntity2 entity, string newProperty1)
        {
            entity.NamedUpdateMethod(newProperty1);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new NamedUpdate_CustomAndUpdateEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'NamedUpdate_CustomAndUpdate' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface INamedUpdate_CustomAndUpdateContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NamedUpdate_CustomAndUpdate/GetEntities", ReplyAction="http://tempuri.org/NamedUpdate_CustomAndUpdate/GetEntitiesResponse")]
            IAsyncResult BeginGetEntities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntities' operation.</returns>
            QueryResult<MockEntity2> EndGetEntities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NamedUpdate_CustomAndUpdate/SubmitChanges", ReplyAction="http://tempuri.org/NamedUpdate_CustomAndUpdate/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class NamedUpdate_CustomAndUpdateEntityContainer : EntityContainer
        {
            
            public NamedUpdate_CustomAndUpdateEntityContainer()
            {
                this.CreateEntitySet<MockEntity2>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'NamedUpdate_CustomOnly' DomainService.
    /// </summary>
    public sealed partial class NamedUpdate_CustomOnly : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NamedUpdate_CustomOnly"/> class.
        /// </summary>
        public NamedUpdate_CustomOnly() : 
                this(new Uri("TestDomainServices-NamedUpdates-NamedUpdate_CustomOnly.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NamedUpdate_CustomOnly"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The NamedUpdate_CustomOnly service URI.</param>
        public NamedUpdate_CustomOnly(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(INamedUpdate_CustomOnlyContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NamedUpdate_CustomOnly"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public NamedUpdate_CustomOnly(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MockEntity1"/> entity instances that have been loaded into this <see cref="NamedUpdate_CustomOnly"/> instance.
        /// </summary>
        public EntitySet<MockEntity1> MockEntity1s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MockEntity1>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MockEntity1"/> entity instances using the 'GetEntities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MockEntity1"/> entity instances.</returns>
        public EntityQuery<MockEntity1> GetEntitiesQuery()
        {
            this.ValidateMethod("GetEntitiesQuery", null);
            return base.CreateQuery<MockEntity1>("GetEntities", null, false, true);
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateMethod' method of the specified <see cref="MockEntity1"/> entity.
        /// </summary>
        /// <param name="entity">The <see cref="MockEntity1"/> entity instance.</param>
        /// <param name="newProperty1">The value for the 'newProperty1' parameter for this action.</param>
        public void NamedUpdateMethod(MockEntity1 entity, string newProperty1)
        {
            entity.NamedUpdateMethod(newProperty1);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new NamedUpdate_CustomOnlyEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'NamedUpdate_CustomOnly' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface INamedUpdate_CustomOnlyContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NamedUpdate_CustomOnly/GetEntities", ReplyAction="http://tempuri.org/NamedUpdate_CustomOnly/GetEntitiesResponse")]
            IAsyncResult BeginGetEntities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntities' operation.</returns>
            QueryResult<MockEntity1> EndGetEntities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NamedUpdate_CustomOnly/SubmitChanges", ReplyAction="http://tempuri.org/NamedUpdate_CustomOnly/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class NamedUpdate_CustomOnlyEntityContainer : EntityContainer
        {
            
            public NamedUpdate_CustomOnlyEntityContainer()
            {
                this.CreateEntitySet<MockEntity1>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'NamedUpdate_CustomValidation' DomainService.
    /// </summary>
    public sealed partial class NamedUpdate_CustomValidation : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NamedUpdate_CustomValidation"/> class.
        /// </summary>
        public NamedUpdate_CustomValidation() : 
                this(new Uri("TestDomainServices-NamedUpdates-NamedUpdate_CustomValidation.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NamedUpdate_CustomValidation"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The NamedUpdate_CustomValidation service URI.</param>
        public NamedUpdate_CustomValidation(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(INamedUpdate_CustomValidationContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NamedUpdate_CustomValidation"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public NamedUpdate_CustomValidation(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MockEntity3"/> entity instances that have been loaded into this <see cref="NamedUpdate_CustomValidation"/> instance.
        /// </summary>
        public EntitySet<MockEntity3> MockEntity3s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MockEntity3>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MockEntity4"/> entity instances that have been loaded into this <see cref="NamedUpdate_CustomValidation"/> instance.
        /// </summary>
        public EntitySet<MockEntity4> MockEntity4s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MockEntity4>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MockEntity5"/> entity instances that have been loaded into this <see cref="NamedUpdate_CustomValidation"/> instance.
        /// </summary>
        public EntitySet<MockEntity5> MockEntity5s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MockEntity5>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MockEntity6"/> entity instances that have been loaded into this <see cref="NamedUpdate_CustomValidation"/> instance.
        /// </summary>
        public EntitySet<MockEntity6> MockEntity6s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MockEntity6>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MockEntity3"/> entity instances using the 'GetEntities3' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MockEntity3"/> entity instances.</returns>
        public EntityQuery<MockEntity3> GetEntities3Query()
        {
            this.ValidateMethod("GetEntities3Query", null);
            return base.CreateQuery<MockEntity3>("GetEntities3", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MockEntity4"/> entity instances using the 'GetEntities4' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MockEntity4"/> entity instances.</returns>
        public EntityQuery<MockEntity4> GetEntities4Query()
        {
            this.ValidateMethod("GetEntities4Query", null);
            return base.CreateQuery<MockEntity4>("GetEntities4", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MockEntity5"/> entity instances using the 'GetEntities5' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MockEntity5"/> entity instances.</returns>
        public EntityQuery<MockEntity5> GetEntities5Query()
        {
            this.ValidateMethod("GetEntities5Query", null);
            return base.CreateQuery<MockEntity5>("GetEntities5", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MockEntity6"/> entity instances using the 'GetEntities6' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MockEntity6"/> entity instances.</returns>
        public EntityQuery<MockEntity6> GetEntities6Query()
        {
            this.ValidateMethod("GetEntities6Query", null);
            return base.CreateQuery<MockEntity6>("GetEntities6", null, false, true);
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateWithParamValidation' method of the specified <see cref="MockEntity3"/> entity.
        /// </summary>
        /// <param name="entity">The <see cref="MockEntity3"/> entity instance.</param>
        /// <param name="array">The value for the 'array' parameter for this action.</param>
        /// <param name="complexObject">The value for the 'complexObject' parameter for this action.</param>
        public void NamedUpdateWithParamValidation(MockEntity3 entity, MockComplexObject1[] array, MockComplexObject1 complexObject)
        {
            entity.NamedUpdateWithParamValidation(array, complexObject);
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateWithPropValidation' method of the specified <see cref="MockEntity3"/> entity.
        /// </summary>
        /// <param name="entity">The <see cref="MockEntity3"/> entity instance.</param>
        /// <param name="array">The value for the 'array' parameter for this action.</param>
        /// <param name="complexObject">The value for the 'complexObject' parameter for this action.</param>
        public void NamedUpdateWithPropValidation(MockEntity3 entity, MockComplexObject1[] array, MockComplexObject1 complexObject)
        {
            entity.NamedUpdateWithPropValidation(array, complexObject);
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateWithTypeValidation' method of the specified <see cref="MockEntity4"/> entity.
        /// </summary>
        /// <param name="entity">The <see cref="MockEntity4"/> entity instance.</param>
        /// <param name="array">The value for the 'array' parameter for this action.</param>
        /// <param name="complexObject">The value for the 'complexObject' parameter for this action.</param>
        public void NamedUpdateWithTypeValidation(MockEntity4 entity, MockComplexObject2[] array, MockComplexObject2 complexObject)
        {
            entity.NamedUpdateWithTypeValidation(array, complexObject);
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateWithCommonProperties' method of the specified <see cref="MockEntity5"/> entity.
        /// </summary>
        /// <param name="entity">The <see cref="MockEntity5"/> entity instance.</param>
        /// <param name="complexObject">The value for the 'complexObject' parameter for this action.</param>
        public void NamedUpdateWithCommonProperties(MockEntity5 entity, MockComplexObject3 complexObject)
        {
            entity.NamedUpdateWithCommonProperties(complexObject);
        }
        
        /// <summary>
        /// Invokes the 'NamedUpdateWithNoEntityValidation' method of the specified <see cref="MockEntity6"/> entity.
        /// </summary>
        /// <param name="entity">The <see cref="MockEntity6"/> entity instance.</param>
        /// <param name="complexObject">The value for the 'complexObject' parameter for this action.</param>
        public void NamedUpdateWithNoEntityValidation(MockEntity6 entity, MockComplexObject2 complexObject)
        {
            entity.NamedUpdateWithNoEntityValidation(complexObject);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new NamedUpdate_CustomValidationEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'NamedUpdate_CustomValidation' DomainService.
        /// </summary>
        [ServiceContract()]
        [ServiceKnownType(typeof(global::TestDomainServices.NamedUpdates.MockComplexObject3))]
        [ServiceKnownType(typeof(global::TestDomainServices.NamedUpdates.MockComplexObject2))]
        [ServiceKnownType(typeof(TestDomainServices.NamedUpdates.MockComplexObject1[]))]
        [ServiceKnownType(typeof(global::TestDomainServices.NamedUpdates.MockComplexObject1))]
        [ServiceKnownType(typeof(TestDomainServices.NamedUpdates.MockComplexObject2[]))]
        public interface INamedUpdate_CustomValidationContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntities3' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NamedUpdate_CustomValidation/GetEntities3", ReplyAction="http://tempuri.org/NamedUpdate_CustomValidation/GetEntities3Response")]
            IAsyncResult BeginGetEntities3(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntities3'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntities3'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntities3' operation.</returns>
            QueryResult<MockEntity3> EndGetEntities3(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntities4' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NamedUpdate_CustomValidation/GetEntities4", ReplyAction="http://tempuri.org/NamedUpdate_CustomValidation/GetEntities4Response")]
            IAsyncResult BeginGetEntities4(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntities4'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntities4'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntities4' operation.</returns>
            QueryResult<MockEntity4> EndGetEntities4(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntities5' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NamedUpdate_CustomValidation/GetEntities5", ReplyAction="http://tempuri.org/NamedUpdate_CustomValidation/GetEntities5Response")]
            IAsyncResult BeginGetEntities5(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntities5'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntities5'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntities5' operation.</returns>
            QueryResult<MockEntity5> EndGetEntities5(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntities6' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NamedUpdate_CustomValidation/GetEntities6", ReplyAction="http://tempuri.org/NamedUpdate_CustomValidation/GetEntities6Response")]
            IAsyncResult BeginGetEntities6(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntities6'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntities6'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntities6' operation.</returns>
            QueryResult<MockEntity6> EndGetEntities6(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NamedUpdate_CustomValidation/SubmitChanges", ReplyAction="http://tempuri.org/NamedUpdate_CustomValidation/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class NamedUpdate_CustomValidationEntityContainer : EntityContainer
        {
            
            public NamedUpdate_CustomValidationEntityContainer()
            {
                this.CreateEntitySet<MockEntity3>(EntitySetOperations.Edit);
                this.CreateEntitySet<MockEntity4>(EntitySetOperations.Edit);
                this.CreateEntitySet<MockEntity5>(EntitySetOperations.Edit);
                this.CreateEntitySet<MockEntity6>(EntitySetOperations.Edit);
            }
        }
    }
}
namespace TestDomainServices.Saleãƒ†
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Threading.Tasks;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The 'EntityWithSpecialTypeName' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.Sale%E3%83%86")]
    public sealed partial class EntityWithSpecialTypeName : Entity
    {
        
        private string _data;
        
        private int _id;
        
        private string _ignoredData;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIgnoredDataChanging(string value);
        partial void OnIgnoredDataChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityWithSpecialTypeName"/> class.
        /// </summary>
        public EntityWithSpecialTypeName()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public string Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IgnoredData' value.
        /// </summary>
        [DataMember()]
        public string IgnoredData
        {
            get
            {
                return this._ignoredData;
            }
            set
            {
                if ((this._ignoredData != value))
                {
                    this.OnIgnoredDataChanging(value);
                    this.RaiseDataMemberChanging("IgnoredData");
                    this.ValidateProperty("IgnoredData", value);
                    this._ignoredData = value;
                    this.RaiseDataMemberChanged("IgnoredData");
                    this.OnIgnoredDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
