//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SharedEntities
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.Threading.Tasks;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The 'EntityA' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="ExposeChildEntityDomainContext"/> context.
    /// The <see cref="ExposeParentEntityDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SharedEntities")]
    public sealed partial class EntityA : Entity
    {
        
        private EntityRef<EntityB> _entityB;
        
        private EntityRef<EntityC> _entityC;
        
        private int _id;
        
        private int _idB;
        
        private int _idC;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdBChanging(int value);
        partial void OnIdBChanged();
        partial void OnIdCChanging(int value);
        partial void OnIdCChanged();
        partial void OnUpdateAThroughChildInvoking();
        partial void OnUpdateAThroughChildInvoked();
        partial void OnUpdateAThroughParentInvoking();
        partial void OnUpdateAThroughParentInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityA"/> class.
        /// </summary>
        public EntityA()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="EntityB"/> entity.
        /// </summary>
        [Association("A_B", "IdB", "Id")]
        public EntityB EntityB
        {
            get
            {
                if ((this._entityB == null))
                {
                    this._entityB = new EntityRef<EntityB>(this, "EntityB", this.FilterEntityB);
                }
                return this._entityB.Entity;
            }
            set
            {
                EntityB previous = this.EntityB;
                if ((previous != value))
                {
                    this.ValidateProperty("EntityB", value);
                    this._entityB.Entity = value;
                    this.RaisePropertyChanged("EntityB");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="EntityC"/> entity.
        /// </summary>
        [Association("A_C", "IdC", "Id")]
        public EntityC EntityC
        {
            get
            {
                if ((this._entityC == null))
                {
                    this._entityC = new EntityRef<EntityC>(this, "EntityC", this.FilterEntityC);
                }
                return this._entityC.Entity;
            }
            set
            {
                EntityC previous = this.EntityC;
                if ((previous != value))
                {
                    this.ValidateProperty("EntityC", value);
                    this._entityC.Entity = value;
                    this.RaisePropertyChanged("EntityC");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdB' value.
        /// </summary>
        [DataMember()]
        public int IdB
        {
            get
            {
                return this._idB;
            }
            set
            {
                if ((this._idB != value))
                {
                    this.OnIdBChanging(value);
                    this.RaiseDataMemberChanging("IdB");
                    this.ValidateProperty("IdB", value);
                    this._idB = value;
                    this.RaiseDataMemberChanged("IdB");
                    this.OnIdBChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdC' value.
        /// </summary>
        [DataMember()]
        public int IdC
        {
            get
            {
                return this._idC;
            }
            set
            {
                if ((this._idC != value))
                {
                    this.OnIdCChanging(value);
                    this.RaiseDataMemberChanging("IdC");
                    this.ValidateProperty("IdC", value);
                    this._idC = value;
                    this.RaiseDataMemberChanged("IdC");
                    this.OnIdCChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'UpdateAThroughChild' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsUpdateAThroughChildInvoked
        {
            get
            {
                return base.IsActionInvoked("UpdateAThroughChild");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'UpdateAThroughChild' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanUpdateAThroughChild
        {
            get
            {
                return base.CanInvokeAction("UpdateAThroughChild");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'UpdateAThroughParent' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsUpdateAThroughParentInvoked
        {
            get
            {
                return base.IsActionInvoked("UpdateAThroughParent");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'UpdateAThroughParent' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanUpdateAThroughParent
        {
            get
            {
                return base.CanInvokeAction("UpdateAThroughParent");
            }
        }
        
        private bool FilterEntityB(EntityB entity)
        {
            return (entity.Id == this.IdB);
        }
        
        private bool FilterEntityC(EntityC entity)
        {
            return (entity.Id == this.IdC);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
        
        /// <summary>
        /// Invokes the 'UpdateAThroughChild' action on this entity.
        /// </summary>
        [EntityAction("UpdateAThroughChild", AllowMultipleInvocations=false)]
        public void UpdateAThroughChild()
        {
            this.OnUpdateAThroughChildInvoking();
            base.InvokeAction("UpdateAThroughChild");
            this.OnUpdateAThroughChildInvoked();
        }
        
        /// <summary>
        /// Invokes the 'UpdateAThroughParent' action on this entity.
        /// </summary>
        [EntityAction("UpdateAThroughParent", AllowMultipleInvocations=false)]
        public void UpdateAThroughParent()
        {
            this.OnUpdateAThroughParentInvoking();
            base.InvokeAction("UpdateAThroughParent");
            this.OnUpdateAThroughParentInvoked();
        }
    }
    
    /// <summary>
    /// The 'EntityB' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="ExposeChildEntityDomainContext"/> context.
    /// The <see cref="ExposeParentEntityDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SharedEntities")]
    public sealed partial class EntityB : Entity
    {
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityB"/> class.
        /// </summary>
        public EntityB()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'EntityC' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="ExposeChildEntityDomainContext"/> context.
    /// The <see cref="ExposeParentEntityDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SharedEntities")]
    public sealed partial class EntityC : Entity
    {
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityC"/> class.
        /// </summary>
        public EntityC()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'EntityX' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="ExposeChildEntityDomainContext"/> context.
    /// The <see cref="ExposeParentEntityDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SharedEntities")]
    [KnownType(typeof(EntityY))]
    public partial class EntityX : Entity
    {
        
        private int _id;
        
        private int _zProp;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnZPropChanging(int value);
        partial void OnZPropChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityX"/> class.
        /// </summary>
        public EntityX()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZProp' value.
        /// </summary>
        [DataMember()]
        public int ZProp
        {
            get
            {
                return this._zProp;
            }
            set
            {
                if ((this._zProp != value))
                {
                    this.OnZPropChanging(value);
                    this.RaiseDataMemberChanging("ZProp");
                    this.ValidateProperty("ZProp", value);
                    this._zProp = value;
                    this.RaiseDataMemberChanged("ZProp");
                    this.OnZPropChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'EntityY' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="ExposeChildEntityDomainContext"/> context.
    /// The <see cref="ExposeParentEntityDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SharedEntities")]
    public sealed partial class EntityY : EntityX
    {
        
        private EntityRef<EntityZ> _entityZ;
        
        private int _idZ;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdZChanging(int value);
        partial void OnIdZChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityY"/> class.
        /// </summary>
        public EntityY()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="EntityZ"/> entity.
        /// </summary>
        [Association("Y_Z", "IdZ", "Id")]
        public EntityZ EntityZ
        {
            get
            {
                if ((this._entityZ == null))
                {
                    this._entityZ = new EntityRef<EntityZ>(this, "EntityZ", this.FilterEntityZ);
                }
                return this._entityZ.Entity;
            }
            set
            {
                EntityZ previous = this.EntityZ;
                if ((previous != value))
                {
                    this.ValidateProperty("EntityZ", value);
                    this._entityZ.Entity = value;
                    this.RaisePropertyChanged("EntityZ");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdZ' value.
        /// </summary>
        [DataMember()]
        public int IdZ
        {
            get
            {
                return this._idZ;
            }
            set
            {
                if ((this._idZ != value))
                {
                    this.OnIdZChanging(value);
                    this.RaiseDataMemberChanging("IdZ");
                    this.ValidateProperty("IdZ", value);
                    this._idZ = value;
                    this.RaiseDataMemberChanged("IdZ");
                    this.OnIdZChanged();
                }
            }
        }
        
        private bool FilterEntityZ(EntityZ entity)
        {
            return (entity.Id == this.IdZ);
        }
    }
    
    /// <summary>
    /// The 'EntityZ' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="ExposeChildEntityDomainContext"/> context.
    /// The <see cref="ExposeParentEntityDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SharedEntities")]
    public sealed partial class EntityZ : Entity
    {
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityZ"/> class.
        /// </summary>
        public EntityZ()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ExposeChildEntityDomainService' DomainService.
    /// </summary>
    public sealed partial class ExposeChildEntityDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExposeChildEntityDomainContext"/> class.
        /// </summary>
        public ExposeChildEntityDomainContext() : 
                this(new Uri("SharedEntities-ExposeChildEntityDomainService.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExposeChildEntityDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ExposeChildEntityDomainService service URI.</param>
        public ExposeChildEntityDomainContext(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(IExposeChildEntityDomainServiceContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExposeChildEntityDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ExposeChildEntityDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EntityA"/> entity instances that have been loaded into this <see cref="ExposeChildEntityDomainContext"/> instance.
        /// </summary>
        public EntitySet<EntityA> EntityAs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EntityA>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EntityB"/> entity instances that have been loaded into this <see cref="ExposeChildEntityDomainContext"/> instance.
        /// </summary>
        public EntitySet<EntityB> EntityBs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EntityB>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EntityX"/> entity instances that have been loaded into this <see cref="ExposeChildEntityDomainContext"/> instance.
        /// </summary>
        public EntitySet<EntityX> EntityXes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EntityX>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityA"/> entity instances using the 'GetA' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityA"/> entity instances.</returns>
        public EntityQuery<EntityA> GetAQuery()
        {
            this.ValidateMethod("GetAQuery", null);
            return base.CreateQuery<EntityA>("GetA", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityB"/> entity instances using the 'GetB' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityB"/> entity instances.</returns>
        public EntityQuery<EntityB> GetBQuery()
        {
            this.ValidateMethod("GetBQuery", null);
            return base.CreateQuery<EntityB>("GetB", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityX"/> entity instances using the 'GetX' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityX"/> entity instances.</returns>
        public EntityQuery<EntityX> GetXQuery()
        {
            this.ValidateMethod("GetXQuery", null);
            return base.CreateQuery<EntityX>("GetX", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityY"/> entity instances using the 'GetY' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityY"/> entity instances.</returns>
        public EntityQuery<EntityY> GetYQuery()
        {
            this.ValidateMethod("GetYQuery", null);
            return base.CreateQuery<EntityY>("GetY", null, false, true);
        }
        
        /// <summary>
        /// Invokes the 'UpdateAThroughChild' method of the specified <see cref="EntityA"/> entity.
        /// </summary>
        /// <param name="entityA">The <see cref="EntityA"/> entity instance.</param>
        public void UpdateAThroughChild(EntityA entityA)
        {
            entityA.UpdateAThroughChild();
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ExposeChildEntityDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ExposeChildEntityDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IExposeChildEntityDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetA' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ExposeChildEntityDomainService/GetA", ReplyAction="http://tempuri.org/ExposeChildEntityDomainService/GetAResponse")]
            IAsyncResult BeginGetA(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetA'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetA'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetA' operation.</returns>
            QueryResult<EntityA> EndGetA(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetB' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ExposeChildEntityDomainService/GetB", ReplyAction="http://tempuri.org/ExposeChildEntityDomainService/GetBResponse")]
            IAsyncResult BeginGetB(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetB'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetB'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetB' operation.</returns>
            QueryResult<EntityB> EndGetB(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetX' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ExposeChildEntityDomainService/GetX", ReplyAction="http://tempuri.org/ExposeChildEntityDomainService/GetXResponse")]
            IAsyncResult BeginGetX(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetX'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetX'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetX' operation.</returns>
            QueryResult<EntityX> EndGetX(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetY' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ExposeChildEntityDomainService/GetY", ReplyAction="http://tempuri.org/ExposeChildEntityDomainService/GetYResponse")]
            IAsyncResult BeginGetY(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetY'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetY'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetY' operation.</returns>
            QueryResult<EntityY> EndGetY(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ExposeChildEntityDomainService/SubmitChanges", ReplyAction="http://tempuri.org/ExposeChildEntityDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ExposeChildEntityDomainContextEntityContainer : EntityContainer
        {
            
            public ExposeChildEntityDomainContextEntityContainer()
            {
                this.CreateEntitySet<EntityA>(EntitySetOperations.Edit);
                this.CreateEntitySet<EntityB>(EntitySetOperations.Edit);
                this.CreateEntitySet<EntityC>(EntitySetOperations.None);
                this.CreateEntitySet<EntityX>(EntitySetOperations.None);
                this.CreateEntitySet<EntityZ>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ExposeParentEntityDomainService' DomainService.
    /// </summary>
    public sealed partial class ExposeParentEntityDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExposeParentEntityDomainContext"/> class.
        /// </summary>
        public ExposeParentEntityDomainContext() : 
                this(new Uri("SharedEntities-ExposeParentEntityDomainService.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExposeParentEntityDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ExposeParentEntityDomainService service URI.</param>
        public ExposeParentEntityDomainContext(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(IExposeParentEntityDomainServiceContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExposeParentEntityDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ExposeParentEntityDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EntityA"/> entity instances that have been loaded into this <see cref="ExposeParentEntityDomainContext"/> instance.
        /// </summary>
        public EntitySet<EntityA> EntityAs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EntityA>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EntityC"/> entity instances that have been loaded into this <see cref="ExposeParentEntityDomainContext"/> instance.
        /// </summary>
        public EntitySet<EntityC> EntityCs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EntityC>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EntityX"/> entity instances that have been loaded into this <see cref="ExposeParentEntityDomainContext"/> instance.
        /// </summary>
        public EntitySet<EntityX> EntityXes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EntityX>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityA"/> entity instances using the 'GetA' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityA"/> entity instances.</returns>
        public EntityQuery<EntityA> GetAQuery()
        {
            this.ValidateMethod("GetAQuery", null);
            return base.CreateQuery<EntityA>("GetA", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityC"/> entity instances using the 'GetC' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityC"/> entity instances.</returns>
        public EntityQuery<EntityC> GetCQuery()
        {
            this.ValidateMethod("GetCQuery", null);
            return base.CreateQuery<EntityC>("GetC", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EntityX"/> entity instances using the 'GetX' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EntityX"/> entity instances.</returns>
        public EntityQuery<EntityX> GetXQuery()
        {
            this.ValidateMethod("GetXQuery", null);
            return base.CreateQuery<EntityX>("GetX", null, false, true);
        }
        
        /// <summary>
        /// Invokes the 'UpdateAThroughParent' method of the specified <see cref="EntityA"/> entity.
        /// </summary>
        /// <param name="entityA">The <see cref="EntityA"/> entity instance.</param>
        public void UpdateAThroughParent(EntityA entityA)
        {
            entityA.UpdateAThroughParent();
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ExposeParentEntityDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ExposeParentEntityDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IExposeParentEntityDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetA' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ExposeParentEntityDomainService/GetA", ReplyAction="http://tempuri.org/ExposeParentEntityDomainService/GetAResponse")]
            IAsyncResult BeginGetA(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetA'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetA'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetA' operation.</returns>
            QueryResult<EntityA> EndGetA(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetC' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ExposeParentEntityDomainService/GetC", ReplyAction="http://tempuri.org/ExposeParentEntityDomainService/GetCResponse")]
            IAsyncResult BeginGetC(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetC'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetC'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetC' operation.</returns>
            QueryResult<EntityC> EndGetC(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetX' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ExposeParentEntityDomainService/GetX", ReplyAction="http://tempuri.org/ExposeParentEntityDomainService/GetXResponse")]
            IAsyncResult BeginGetX(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetX'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetX'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetX' operation.</returns>
            QueryResult<EntityX> EndGetX(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ExposeParentEntityDomainService/SubmitChanges", ReplyAction="http://tempuri.org/ExposeParentEntityDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ExposeParentEntityDomainContextEntityContainer : EntityContainer
        {
            
            public ExposeParentEntityDomainContextEntityContainer()
            {
                this.CreateEntitySet<EntityA>(EntitySetOperations.Edit);
                this.CreateEntitySet<EntityB>(EntitySetOperations.None);
                this.CreateEntitySet<EntityC>(EntitySetOperations.Edit);
                this.CreateEntitySet<EntityX>(EntitySetOperations.None);
                this.CreateEntitySet<EntityZ>(EntitySetOperations.None);
            }
        }
    }
}
