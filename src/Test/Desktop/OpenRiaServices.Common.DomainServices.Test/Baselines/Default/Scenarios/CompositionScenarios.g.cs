//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestDomainServices
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.Threading.Tasks;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The 'Child' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class Child : Entity
    {
        
        private EntityCollection<GrandChild> _children;
        
        private int _id;
        
        private string _operationResult;
        
        private EntityRef<Parent> _parent;
        
        private int _parentID;
        
        private string _property;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOperationResultChanging(string value);
        partial void OnOperationResultChanged();
        partial void OnParentIDChanging(int value);
        partial void OnParentIDChanged();
        partial void OnPropertyChanging(string value);
        partial void OnPropertyChanged();
        partial void OnCustomOp_ChildInvoking();
        partial void OnCustomOp_ChildInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Child"/> class.
        /// </summary>
        public Child()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="GrandChild"/> entity instances.
        /// </summary>
        [Association("GrandChild_Child", "ID", "ParentID")]
        [Composition()]
        public EntityCollection<GrandChild> Children
        {
            get
            {
                if ((this._children == null))
                {
                    this._children = new EntityCollection<GrandChild>(this, "Children", this.FilterChildren, this.AttachChildren, this.DetachChildren);
                }
                return this._children;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OperationResult' value.
        /// </summary>
        [DataMember()]
        public string OperationResult
        {
            get
            {
                return this._operationResult;
            }
            set
            {
                if ((this._operationResult != value))
                {
                    this.OnOperationResultChanging(value);
                    this.RaiseDataMemberChanging("OperationResult");
                    this.ValidateProperty("OperationResult", value);
                    this._operationResult = value;
                    this.RaiseDataMemberChanged("OperationResult");
                    this.OnOperationResultChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Parent"/> entity.
        /// </summary>
        [Association("Child_Parent", "ParentID", "ID", IsForeignKey=true)]
        public Parent Parent
        {
            get
            {
                if ((this._parent == null))
                {
                    this._parent = new EntityRef<Parent>(this, "Parent", this.FilterParent);
                }
                return this._parent.Entity;
            }
            set
            {
                Parent previous = this.Parent;
                if ((previous != value))
                {
                    this.ValidateProperty("Parent", value);
                    if ((previous != null))
                    {
                        this._parent.Entity = null;
                        previous.Children.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ParentID = value.ID;
                    }
                    else
                    {
                        this.ParentID = default(int);
                    }
                    this._parent.Entity = value;
                    if ((value != null))
                    {
                        value.Children.Add(this);
                    }
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ParentID
        {
            get
            {
                return this._parentID;
            }
            set
            {
                if ((this._parentID != value))
                {
                    this.OnParentIDChanging(value);
                    this.RaiseDataMemberChanging("ParentID");
                    this.ValidateProperty("ParentID", value);
                    this._parentID = value;
                    this.RaiseDataMemberChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property' value.
        /// </summary>
        [DataMember()]
        public string Property
        {
            get
            {
                return this._property;
            }
            set
            {
                if ((this._property != value))
                {
                    this.OnPropertyChanging(value);
                    this.RaiseDataMemberChanging("Property");
                    this.ValidateProperty("Property", value);
                    this._property = value;
                    this.RaiseDataMemberChanged("Property");
                    this.OnPropertyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'CustomOp_Child' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsCustomOp_ChildInvoked
        {
            get
            {
                return base.IsActionInvoked("CustomOp_Child");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'CustomOp_Child' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanCustomOp_Child
        {
            get
            {
                return base.CanInvokeAction("CustomOp_Child");
            }
        }
        
        private void AttachChildren(GrandChild entity)
        {
            entity.Parent = this;
        }
        
        private void DetachChildren(GrandChild entity)
        {
            entity.Parent = null;
        }
        
        private bool FilterChildren(GrandChild entity)
        {
            return (entity.ParentID == this.ID);
        }
        
        private bool FilterParent(Parent entity)
        {
            return (entity.ID == this.ParentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
        
        /// <summary>
        /// Invokes the 'CustomOp_Child' action on this entity.
        /// </summary>
        [EntityAction("CustomOp_Child", AllowMultipleInvocations=false)]
        public void CustomOp_Child()
        {
            this.OnCustomOp_ChildInvoking();
            base.InvokeAction("CustomOp_Child");
            this.OnCustomOp_ChildInvoked();
        }
    }
    
    /// <summary>
    /// The 'CompositionScenarios_Child' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class CompositionScenarios_Child : Entity
    {
        
        private string _a;
        
        private int _id;
        
        private EntityRef<CompositionScenarios_Parent> _parent;
        
        private int _parentID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAChanging(string value);
        partial void OnAChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnParentIDChanging(int value);
        partial void OnParentIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositionScenarios_Child"/> class.
        /// </summary>
        public CompositionScenarios_Child()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'A' value.
        /// </summary>
        [DataMember()]
        public string A
        {
            get
            {
                return this._a;
            }
            set
            {
                if ((this._a != value))
                {
                    this.OnAChanging(value);
                    this.RaiseDataMemberChanging("A");
                    this.ValidateProperty("A", value);
                    this._a = value;
                    this.RaiseDataMemberChanged("A");
                    this.OnAChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="CompositionScenarios_Parent"/> entity.
        /// </summary>
        [Association("Parent_Child", "ParentID", "ID", IsForeignKey=true)]
        public CompositionScenarios_Parent Parent
        {
            get
            {
                if ((this._parent == null))
                {
                    this._parent = new EntityRef<CompositionScenarios_Parent>(this, "Parent", this.FilterParent);
                }
                return this._parent.Entity;
            }
            set
            {
                CompositionScenarios_Parent previous = this.Parent;
                if ((previous != value))
                {
                    this.ValidateProperty("Parent", value);
                    if ((previous != null))
                    {
                        this._parent.Entity = null;
                        previous.Children.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ParentID = value.ID;
                    }
                    else
                    {
                        this.ParentID = default(int);
                    }
                    this._parent.Entity = value;
                    if ((value != null))
                    {
                        value.Children.Add(this);
                    }
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ParentID
        {
            get
            {
                return this._parentID;
            }
            set
            {
                if ((this._parentID != value))
                {
                    this.OnParentIDChanging(value);
                    this.RaiseDataMemberChanging("ParentID");
                    this.ValidateProperty("ParentID", value);
                    this._parentID = value;
                    this.RaiseDataMemberChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }
        
        private bool FilterParent(CompositionScenarios_Parent entity)
        {
            return (entity.ID == this.ParentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'CompositionScenarios_Explicit' DomainService.
    /// </summary>
    public sealed partial class CompositionScenarios_Explicit : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositionScenarios_Explicit"/> class.
        /// </summary>
        public CompositionScenarios_Explicit() : 
                this(new Uri("TestDomainServices-CompositionScenarios_Explicit.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositionScenarios_Explicit"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CompositionScenarios_Explicit service URI.</param>
        public CompositionScenarios_Explicit(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(ICompositionScenarios_ExplicitContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositionScenarios_Explicit"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CompositionScenarios_Explicit(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Parent"/> entity instances that have been loaded into this <see cref="CompositionScenarios_Explicit"/> instance.
        /// </summary>
        public EntitySet<Parent> Parents
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Parent>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Parent"/> entity instances using the 'GetParents' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Parent"/> entity instances.</returns>
        public EntityQuery<Parent> GetParentsQuery()
        {
            this.ValidateMethod("GetParentsQuery", null);
            return base.CreateQuery<Parent>("GetParents", null, false, true);
        }
        
        /// <summary>
        /// Invokes the 'CustomOp_Child' method of the specified <see cref="Child"/> entity.
        /// </summary>
        /// <param name="child">The <see cref="Child"/> entity instance.</param>
        public void CustomOp_Child(Child child)
        {
            child.CustomOp_Child();
        }
        
        /// <summary>
        /// Invokes the 'CustomOp_GrandChild' method of the specified <see cref="GrandChild"/> entity.
        /// </summary>
        /// <param name="grandChild">The <see cref="GrandChild"/> entity instance.</param>
        public void CustomOp_GrandChild(GrandChild grandChild)
        {
            grandChild.CustomOp_GrandChild();
        }
        
        /// <summary>
        /// Invokes the 'CustomOp_GreatGrandChild' method of the specified <see cref="GreatGrandChild"/> entity.
        /// </summary>
        /// <param name="greatGrandChild">The <see cref="GreatGrandChild"/> entity instance.</param>
        public void CustomOp_GreatGrandChild(GreatGrandChild greatGrandChild)
        {
            greatGrandChild.CustomOp_GreatGrandChild();
        }
        
        /// <summary>
        /// Invokes the 'CustomOp_Parent' method of the specified <see cref="Parent"/> entity.
        /// </summary>
        /// <param name="parent">The <see cref="Parent"/> entity instance.</param>
        public void CustomOp_Parent(Parent parent)
        {
            parent.CustomOp_Parent();
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CompositionScenarios_ExplicitEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CompositionScenarios_Explicit' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICompositionScenarios_ExplicitContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetParents' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompositionScenarios_Explicit/GetParents", ReplyAction="http://tempuri.org/CompositionScenarios_Explicit/GetParentsResponse")]
            IAsyncResult BeginGetParents(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetParents'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetParents'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetParents' operation.</returns>
            QueryResult<Parent> EndGetParents(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompositionScenarios_Explicit/SubmitChanges", ReplyAction="http://tempuri.org/CompositionScenarios_Explicit/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CompositionScenarios_ExplicitEntityContainer : EntityContainer
        {
            
            public CompositionScenarios_ExplicitEntityContainer()
            {
                this.CreateEntitySet<Child>(EntitySetOperations.All);
                this.CreateEntitySet<GrandChild>(EntitySetOperations.All);
                this.CreateEntitySet<GreatGrandChild>(EntitySetOperations.All);
                this.CreateEntitySet<Parent>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'CompositionScenarios_Parent' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class CompositionScenarios_Parent : Entity
    {
        
        private string _a;
        
        private EntityCollection<CompositionScenarios_Child> _children;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAChanging(string value);
        partial void OnAChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositionScenarios_Parent"/> class.
        /// </summary>
        public CompositionScenarios_Parent()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'A' value.
        /// </summary>
        [DataMember()]
        public string A
        {
            get
            {
                return this._a;
            }
            set
            {
                if ((this._a != value))
                {
                    this.OnAChanging(value);
                    this.RaiseDataMemberChanging("A");
                    this.ValidateProperty("A", value);
                    this._a = value;
                    this.RaiseDataMemberChanged("A");
                    this.OnAChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CompositionScenarios_Child"/> entity instances.
        /// </summary>
        [Association("Parent_Child", "ID", "ParentID")]
        [Composition()]
        public EntityCollection<CompositionScenarios_Child> Children
        {
            get
            {
                if ((this._children == null))
                {
                    this._children = new EntityCollection<CompositionScenarios_Child>(this, "Children", this.FilterChildren, this.AttachChildren, this.DetachChildren);
                }
                return this._children;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        private void AttachChildren(CompositionScenarios_Child entity)
        {
            entity.Parent = this;
        }
        
        private void DetachChildren(CompositionScenarios_Child entity)
        {
            entity.Parent = null;
        }
        
        private bool FilterChildren(CompositionScenarios_Child entity)
        {
            return (entity.ParentID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'CompositionScenarios_Various' DomainService.
    /// </summary>
    public sealed partial class CompositionScenarios_Various : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositionScenarios_Various"/> class.
        /// </summary>
        public CompositionScenarios_Various() : 
                this(new Uri("TestDomainServices-CompositionScenarios_Various.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositionScenarios_Various"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CompositionScenarios_Various service URI.</param>
        public CompositionScenarios_Various(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(ICompositionScenarios_VariousContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositionScenarios_Various"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CompositionScenarios_Various(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="CompositionScenarios_Parent"/> entity instances that have been loaded into this <see cref="CompositionScenarios_Various"/> instance.
        /// </summary>
        public EntitySet<CompositionScenarios_Parent> CompositionScenarios_Parents
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CompositionScenarios_Parent>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SelfReferencingComposition_OneToMany"/> entity instances that have been loaded into this <see cref="CompositionScenarios_Various"/> instance.
        /// </summary>
        public EntitySet<SelfReferencingComposition_OneToMany> SelfReferencingComposition_OneToManies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SelfReferencingComposition_OneToMany>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SelfReferencingComposition"/> entity instances that have been loaded into this <see cref="CompositionScenarios_Various"/> instance.
        /// </summary>
        public EntitySet<SelfReferencingComposition> SelfReferencingCompositions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SelfReferencingComposition>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CompositionScenarios_Child"/> entity instances using the 'GetChildren' query.
        /// </summary>
        /// <param name="parentID">The value for the 'parentID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CompositionScenarios_Child"/> entity instances.</returns>
        public EntityQuery<CompositionScenarios_Child> GetChildrenQuery(int parentID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("parentID", parentID);
            this.ValidateMethod("GetChildrenQuery", parameters);
            return base.CreateQuery<CompositionScenarios_Child>("GetChildren", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CompositionScenarios_Parent"/> entity instances using the 'GetParents' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CompositionScenarios_Parent"/> entity instances.</returns>
        public EntityQuery<CompositionScenarios_Parent> GetParentsQuery()
        {
            this.ValidateMethod("GetParentsQuery", null);
            return base.CreateQuery<CompositionScenarios_Parent>("GetParents", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SelfReferencingComposition_OneToMany"/> entity instances using the 'GetSelfReferencingComposition_OneToManys' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SelfReferencingComposition_OneToMany"/> entity instances.</returns>
        public EntityQuery<SelfReferencingComposition_OneToMany> GetSelfReferencingComposition_OneToManysQuery()
        {
            this.ValidateMethod("GetSelfReferencingComposition_OneToManysQuery", null);
            return base.CreateQuery<SelfReferencingComposition_OneToMany>("GetSelfReferencingComposition_OneToManys", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SelfReferencingComposition"/> entity instances using the 'GetSelfReferencingCompositions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SelfReferencingComposition"/> entity instances.</returns>
        public EntityQuery<SelfReferencingComposition> GetSelfReferencingCompositionsQuery()
        {
            this.ValidateMethod("GetSelfReferencingCompositionsQuery", null);
            return base.CreateQuery<SelfReferencingComposition>("GetSelfReferencingCompositions", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CompositionScenarios_VariousEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CompositionScenarios_Various' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICompositionScenarios_VariousContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetChildren' operation.
            /// </summary>
            /// <param name="parentID">The value for the 'parentID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompositionScenarios_Various/GetChildren", ReplyAction="http://tempuri.org/CompositionScenarios_Various/GetChildrenResponse")]
            IAsyncResult BeginGetChildren(int parentID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetChildren'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetChildren'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetChildren' operation.</returns>
            QueryResult<CompositionScenarios_Child> EndGetChildren(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetParents' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompositionScenarios_Various/GetParents", ReplyAction="http://tempuri.org/CompositionScenarios_Various/GetParentsResponse")]
            IAsyncResult BeginGetParents(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetParents'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetParents'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetParents' operation.</returns>
            QueryResult<CompositionScenarios_Parent> EndGetParents(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSelfReferencingComposition_OneToManys' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompositionScenarios_Various/GetSelfReferencingComposition_One" +
                "ToManys", ReplyAction="http://tempuri.org/CompositionScenarios_Various/GetSelfReferencingComposition_One" +
                "ToManysResponse")]
            IAsyncResult BeginGetSelfReferencingComposition_OneToManys(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSelfReferencingComposition_OneToManys'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSelfReferencingComposition_OneToManys'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSelfReferencingComposition_OneToManys' operation.</returns>
            QueryResult<SelfReferencingComposition_OneToMany> EndGetSelfReferencingComposition_OneToManys(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSelfReferencingCompositions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompositionScenarios_Various/GetSelfReferencingCompositions", ReplyAction="http://tempuri.org/CompositionScenarios_Various/GetSelfReferencingCompositionsRes" +
                "ponse")]
            IAsyncResult BeginGetSelfReferencingCompositions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSelfReferencingCompositions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSelfReferencingCompositions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSelfReferencingCompositions' operation.</returns>
            QueryResult<SelfReferencingComposition> EndGetSelfReferencingCompositions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompositionScenarios_Various/SubmitChanges", ReplyAction="http://tempuri.org/CompositionScenarios_Various/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CompositionScenarios_VariousEntityContainer : EntityContainer
        {
            
            public CompositionScenarios_VariousEntityContainer()
            {
                this.CreateEntitySet<CompositionScenarios_Child>(EntitySetOperations.All);
                this.CreateEntitySet<CompositionScenarios_Parent>(EntitySetOperations.Edit);
                this.CreateEntitySet<SelfReferencingComposition>(EntitySetOperations.All);
                this.CreateEntitySet<SelfReferencingComposition_OneToMany>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'GrandChild' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class GrandChild : Entity
    {
        
        private EntityRef<GreatGrandChild> _child;
        
        private int _id;
        
        private string _operationResult;
        
        private EntityRef<Child> _parent;
        
        private int _parentID;
        
        private string _property;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOperationResultChanging(string value);
        partial void OnOperationResultChanged();
        partial void OnParentIDChanging(int value);
        partial void OnParentIDChanged();
        partial void OnPropertyChanging(string value);
        partial void OnPropertyChanged();
        partial void OnCustomOp_GrandChildInvoking();
        partial void OnCustomOp_GrandChildInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GrandChild"/> class.
        /// </summary>
        public GrandChild()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="GreatGrandChild"/> entity.
        /// </summary>
        [Association("GreatGrandChild_GrandChild", "ID", "ParentID")]
        [Composition()]
        public GreatGrandChild Child
        {
            get
            {
                if ((this._child == null))
                {
                    this._child = new EntityRef<GreatGrandChild>(this, "Child", this.FilterChild);
                }
                return this._child.Entity;
            }
            set
            {
                GreatGrandChild previous = this.Child;
                if ((previous != value))
                {
                    this.ValidateProperty("Child", value);
                    if ((previous != null))
                    {
                        this._child.Entity = null;
                        previous.Parent = null;
                    }
                    this._child.Entity = value;
                    if ((value != null))
                    {
                        value.Parent = this;
                    }
                    this.RaisePropertyChanged("Child");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OperationResult' value.
        /// </summary>
        [DataMember()]
        public string OperationResult
        {
            get
            {
                return this._operationResult;
            }
            set
            {
                if ((this._operationResult != value))
                {
                    this.OnOperationResultChanging(value);
                    this.RaiseDataMemberChanging("OperationResult");
                    this.ValidateProperty("OperationResult", value);
                    this._operationResult = value;
                    this.RaiseDataMemberChanged("OperationResult");
                    this.OnOperationResultChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Child"/> entity.
        /// </summary>
        [Association("GrandChild_Child", "ParentID", "ID", IsForeignKey=true)]
        public Child Parent
        {
            get
            {
                if ((this._parent == null))
                {
                    this._parent = new EntityRef<Child>(this, "Parent", this.FilterParent);
                }
                return this._parent.Entity;
            }
            set
            {
                Child previous = this.Parent;
                if ((previous != value))
                {
                    this.ValidateProperty("Parent", value);
                    if ((previous != null))
                    {
                        this._parent.Entity = null;
                        previous.Children.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ParentID = value.ID;
                    }
                    else
                    {
                        this.ParentID = default(int);
                    }
                    this._parent.Entity = value;
                    if ((value != null))
                    {
                        value.Children.Add(this);
                    }
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ParentID
        {
            get
            {
                return this._parentID;
            }
            set
            {
                if ((this._parentID != value))
                {
                    this.OnParentIDChanging(value);
                    this.RaiseDataMemberChanging("ParentID");
                    this.ValidateProperty("ParentID", value);
                    this._parentID = value;
                    this.RaiseDataMemberChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property' value.
        /// </summary>
        [DataMember()]
        public string Property
        {
            get
            {
                return this._property;
            }
            set
            {
                if ((this._property != value))
                {
                    this.OnPropertyChanging(value);
                    this.RaiseDataMemberChanging("Property");
                    this.ValidateProperty("Property", value);
                    this._property = value;
                    this.RaiseDataMemberChanged("Property");
                    this.OnPropertyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'CustomOp_GrandChild' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsCustomOp_GrandChildInvoked
        {
            get
            {
                return base.IsActionInvoked("CustomOp_GrandChild");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'CustomOp_GrandChild' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanCustomOp_GrandChild
        {
            get
            {
                return base.CanInvokeAction("CustomOp_GrandChild");
            }
        }
        
        private bool FilterChild(GreatGrandChild entity)
        {
            return (entity.ParentID == this.ID);
        }
        
        private bool FilterParent(Child entity)
        {
            return (entity.ID == this.ParentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
        
        /// <summary>
        /// Invokes the 'CustomOp_GrandChild' action on this entity.
        /// </summary>
        [EntityAction("CustomOp_GrandChild", AllowMultipleInvocations=false)]
        public void CustomOp_GrandChild()
        {
            this.OnCustomOp_GrandChildInvoking();
            base.InvokeAction("CustomOp_GrandChild");
            this.OnCustomOp_GrandChildInvoked();
        }
    }
    
    /// <summary>
    /// The 'GreatGrandChild' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class GreatGrandChild : Entity
    {
        
        private int _id;
        
        private string _operationResult;
        
        private EntityRef<GrandChild> _parent;
        
        private int _parentID;
        
        private string _property;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOperationResultChanging(string value);
        partial void OnOperationResultChanged();
        partial void OnParentIDChanging(int value);
        partial void OnParentIDChanged();
        partial void OnPropertyChanging(string value);
        partial void OnPropertyChanged();
        partial void OnCustomOp_GreatGrandChildInvoking();
        partial void OnCustomOp_GreatGrandChildInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GreatGrandChild"/> class.
        /// </summary>
        public GreatGrandChild()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OperationResult' value.
        /// </summary>
        [DataMember()]
        public string OperationResult
        {
            get
            {
                return this._operationResult;
            }
            set
            {
                if ((this._operationResult != value))
                {
                    this.OnOperationResultChanging(value);
                    this.RaiseDataMemberChanging("OperationResult");
                    this.ValidateProperty("OperationResult", value);
                    this._operationResult = value;
                    this.RaiseDataMemberChanged("OperationResult");
                    this.OnOperationResultChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="GrandChild"/> entity.
        /// </summary>
        [Association("GreatGrandChild_GrandChild", "ParentID", "ID", IsForeignKey=true)]
        public GrandChild Parent
        {
            get
            {
                if ((this._parent == null))
                {
                    this._parent = new EntityRef<GrandChild>(this, "Parent", this.FilterParent);
                }
                return this._parent.Entity;
            }
            set
            {
                GrandChild previous = this.Parent;
                if ((previous != value))
                {
                    this.ValidateProperty("Parent", value);
                    if ((previous != null))
                    {
                        this._parent.Entity = null;
                        previous.Child = null;
                    }
                    if ((value != null))
                    {
                        this.ParentID = value.ID;
                    }
                    else
                    {
                        this.ParentID = default(int);
                    }
                    this._parent.Entity = value;
                    if ((value != null))
                    {
                        value.Child = this;
                    }
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ParentID
        {
            get
            {
                return this._parentID;
            }
            set
            {
                if ((this._parentID != value))
                {
                    this.OnParentIDChanging(value);
                    this.RaiseDataMemberChanging("ParentID");
                    this.ValidateProperty("ParentID", value);
                    this._parentID = value;
                    this.RaiseDataMemberChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property' value.
        /// </summary>
        [DataMember()]
        public string Property
        {
            get
            {
                return this._property;
            }
            set
            {
                if ((this._property != value))
                {
                    this.OnPropertyChanging(value);
                    this.RaiseDataMemberChanging("Property");
                    this.ValidateProperty("Property", value);
                    this._property = value;
                    this.RaiseDataMemberChanged("Property");
                    this.OnPropertyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'CustomOp_GreatGrandChild' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsCustomOp_GreatGrandChildInvoked
        {
            get
            {
                return base.IsActionInvoked("CustomOp_GreatGrandChild");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'CustomOp_GreatGrandChild' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanCustomOp_GreatGrandChild
        {
            get
            {
                return base.CanInvokeAction("CustomOp_GreatGrandChild");
            }
        }
        
        private bool FilterParent(GrandChild entity)
        {
            return (entity.ID == this.ParentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
        
        /// <summary>
        /// Invokes the 'CustomOp_GreatGrandChild' action on this entity.
        /// </summary>
        [EntityAction("CustomOp_GreatGrandChild", AllowMultipleInvocations=false)]
        public void CustomOp_GreatGrandChild()
        {
            this.OnCustomOp_GreatGrandChildInvoking();
            base.InvokeAction("CustomOp_GreatGrandChild");
            this.OnCustomOp_GreatGrandChildInvoked();
        }
    }
    
    /// <summary>
    /// The 'Parent' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class Parent : Entity
    {
        
        private EntityCollection<Child> _children;
        
        private int _id;
        
        private string _operationResult;
        
        private string _property;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOperationResultChanging(string value);
        partial void OnOperationResultChanged();
        partial void OnPropertyChanging(string value);
        partial void OnPropertyChanged();
        partial void OnCustomOp_ParentInvoking();
        partial void OnCustomOp_ParentInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Parent"/> class.
        /// </summary>
        public Parent()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Child"/> entity instances.
        /// </summary>
        [Association("Child_Parent", "ID", "ParentID")]
        [Composition()]
        public EntityCollection<Child> Children
        {
            get
            {
                if ((this._children == null))
                {
                    this._children = new EntityCollection<Child>(this, "Children", this.FilterChildren, this.AttachChildren, this.DetachChildren);
                }
                return this._children;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OperationResult' value.
        /// </summary>
        [DataMember()]
        public string OperationResult
        {
            get
            {
                return this._operationResult;
            }
            set
            {
                if ((this._operationResult != value))
                {
                    this.OnOperationResultChanging(value);
                    this.RaiseDataMemberChanging("OperationResult");
                    this.ValidateProperty("OperationResult", value);
                    this._operationResult = value;
                    this.RaiseDataMemberChanged("OperationResult");
                    this.OnOperationResultChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Property' value.
        /// </summary>
        [DataMember()]
        public string Property
        {
            get
            {
                return this._property;
            }
            set
            {
                if ((this._property != value))
                {
                    this.OnPropertyChanging(value);
                    this.RaiseDataMemberChanging("Property");
                    this.ValidateProperty("Property", value);
                    this._property = value;
                    this.RaiseDataMemberChanged("Property");
                    this.OnPropertyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'CustomOp_Parent' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsCustomOp_ParentInvoked
        {
            get
            {
                return base.IsActionInvoked("CustomOp_Parent");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'CustomOp_Parent' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanCustomOp_Parent
        {
            get
            {
                return base.CanInvokeAction("CustomOp_Parent");
            }
        }
        
        private void AttachChildren(Child entity)
        {
            entity.Parent = this;
        }
        
        private void DetachChildren(Child entity)
        {
            entity.Parent = null;
        }
        
        private bool FilterChildren(Child entity)
        {
            return (entity.ParentID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
        
        /// <summary>
        /// Invokes the 'CustomOp_Parent' action on this entity.
        /// </summary>
        [EntityAction("CustomOp_Parent", AllowMultipleInvocations=false)]
        public void CustomOp_Parent()
        {
            this.OnCustomOp_ParentInvoking();
            base.InvokeAction("CustomOp_Parent");
            this.OnCustomOp_ParentInvoked();
        }
    }
    
    /// <summary>
    /// The 'SelfReferencingComposition' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class SelfReferencingComposition : Entity
    {
        
        private EntityRef<SelfReferencingComposition> _child;
        
        private int _id;
        
        private EntityRef<SelfReferencingComposition> _parent;
        
        private int _parentID;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnParentIDChanging(int value);
        partial void OnParentIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SelfReferencingComposition"/> class.
        /// </summary>
        public SelfReferencingComposition()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SelfReferencingComposition"/> entity.
        /// </summary>
        [Association("Ref_Assoc", "ID", "ParentID")]
        [Composition()]
        public SelfReferencingComposition Child
        {
            get
            {
                if ((this._child == null))
                {
                    this._child = new EntityRef<SelfReferencingComposition>(this, "Child", this.FilterChild);
                }
                return this._child.Entity;
            }
            set
            {
                SelfReferencingComposition previous = this.Child;
                if ((previous != value))
                {
                    this.ValidateProperty("Child", value);
                    if ((previous != null))
                    {
                        this._child.Entity = null;
                        previous.Parent = null;
                    }
                    this._child.Entity = value;
                    if ((value != null))
                    {
                        value.Parent = this;
                    }
                    this.RaisePropertyChanged("Child");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SelfReferencingComposition"/> entity.
        /// </summary>
        [Association("Ref_Assoc", "ParentID", "ID", IsForeignKey=true)]
        public SelfReferencingComposition Parent
        {
            get
            {
                if ((this._parent == null))
                {
                    this._parent = new EntityRef<SelfReferencingComposition>(this, "Parent", this.FilterParent);
                }
                return this._parent.Entity;
            }
            set
            {
                SelfReferencingComposition previous = this.Parent;
                if ((previous != value))
                {
                    this.ValidateProperty("Parent", value);
                    if ((previous != null))
                    {
                        this._parent.Entity = null;
                        previous.Child = null;
                    }
                    if ((value != null))
                    {
                        this.ParentID = value.ID;
                    }
                    else
                    {
                        this.ParentID = default(int);
                    }
                    this._parent.Entity = value;
                    if ((value != null))
                    {
                        value.Child = this;
                    }
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ParentID
        {
            get
            {
                return this._parentID;
            }
            set
            {
                if ((this._parentID != value))
                {
                    this.OnParentIDChanging(value);
                    this.RaiseDataMemberChanging("ParentID");
                    this.ValidateProperty("ParentID", value);
                    this._parentID = value;
                    this.RaiseDataMemberChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        private bool FilterChild(SelfReferencingComposition entity)
        {
            return (entity.ParentID == this.ID);
        }
        
        private bool FilterParent(SelfReferencingComposition entity)
        {
            return (entity.ID == this.ParentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'SelfReferencingComposition_OneToMany' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class SelfReferencingComposition_OneToMany : Entity
    {
        
        private EntityCollection<SelfReferencingComposition_OneToMany> _children;
        
        private int _id;
        
        private EntityRef<SelfReferencingComposition_OneToMany> _parent;
        
        private int _parentID;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnParentIDChanging(int value);
        partial void OnParentIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SelfReferencingComposition_OneToMany"/> class.
        /// </summary>
        public SelfReferencingComposition_OneToMany()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SelfReferencingComposition_OneToMany"/> entity instances.
        /// </summary>
        [Association("SelfReferencingComposition_OneToMany", "ID", "ParentID")]
        [Composition()]
        public EntityCollection<SelfReferencingComposition_OneToMany> Children
        {
            get
            {
                if ((this._children == null))
                {
                    this._children = new EntityCollection<SelfReferencingComposition_OneToMany>(this, "Children", this.FilterChildren, this.AttachChildren, this.DetachChildren);
                }
                return this._children;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SelfReferencingComposition_OneToMany"/> entity.
        /// </summary>
        [Association("SelfReferencingComposition_OneToMany", "ParentID", "ID", IsForeignKey=true)]
        public SelfReferencingComposition_OneToMany Parent
        {
            get
            {
                if ((this._parent == null))
                {
                    this._parent = new EntityRef<SelfReferencingComposition_OneToMany>(this, "Parent", this.FilterParent);
                }
                return this._parent.Entity;
            }
            set
            {
                SelfReferencingComposition_OneToMany previous = this.Parent;
                if ((previous != value))
                {
                    this.ValidateProperty("Parent", value);
                    if ((previous != null))
                    {
                        this._parent.Entity = null;
                        previous.Children.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ParentID = value.ID;
                    }
                    else
                    {
                        this.ParentID = default(int);
                    }
                    this._parent.Entity = value;
                    if ((value != null))
                    {
                        value.Children.Add(this);
                    }
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ParentID
        {
            get
            {
                return this._parentID;
            }
            set
            {
                if ((this._parentID != value))
                {
                    this.OnParentIDChanging(value);
                    this.RaiseDataMemberChanging("ParentID");
                    this.ValidateProperty("ParentID", value);
                    this._parentID = value;
                    this.RaiseDataMemberChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        private void AttachChildren(SelfReferencingComposition_OneToMany entity)
        {
            entity.Parent = this;
        }
        
        private void DetachChildren(SelfReferencingComposition_OneToMany entity)
        {
            entity.Parent = null;
        }
        
        private bool FilterChildren(SelfReferencingComposition_OneToMany entity)
        {
            return (entity.ParentID == this.ID);
        }
        
        private bool FilterParent(SelfReferencingComposition_OneToMany entity)
        {
            return (entity.ID == this.ParentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
