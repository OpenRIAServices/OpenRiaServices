//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace TestDomainServices
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.Threading;
    using System.Threading.Tasks;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;


    /// <summary>
    /// The 'RangeItem' entity class.
    /// </summary>
    [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/ServerSideAsyncDomainService")]
    public sealed partial class RangeItem : Entity
    {

        private int _id;

        private string _text;

        private bool _throwDomainException;

        private bool _throwValidationException;

        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnThrowDomainExceptionChanging(bool value);
        partial void OnThrowDomainExceptionChanged();
        partial void OnThrowValidationExceptionChanging(bool value);
        partial void OnThrowValidationExceptionChanged();
        partial void OnCustomUpdateRangeInvoking();
        partial void OnCustomUpdateRangeInvoked();

        #endregion


        /// <summary>
        /// Initializes a new instance of the <see cref="RangeItem"/> class.
        /// </summary>
        public RangeItem()
        {
            this.OnCreated();
        }

        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue = true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the 'Text' value.
        /// </summary>
        [DataMember()]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    this.OnTextChanging(value);
                    this.RaiseDataMemberChanging("Text");
                    this.ValidateProperty("Text", value);
                    this._text = value;
                    this.RaiseDataMemberChanged("Text");
                    this.OnTextChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the 'ThrowDomainException' value.
        /// </summary>
        [DataMember()]
        public bool ThrowDomainException
        {
            get
            {
                return this._throwDomainException;
            }
            set
            {
                if ((this._throwDomainException != value))
                {
                    this.OnThrowDomainExceptionChanging(value);
                    this.RaiseDataMemberChanging("ThrowDomainException");
                    this.ValidateProperty("ThrowDomainException", value);
                    this._throwDomainException = value;
                    this.RaiseDataMemberChanged("ThrowDomainException");
                    this.OnThrowDomainExceptionChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the 'ThrowValidationException' value.
        /// </summary>
        [DataMember()]
        public bool ThrowValidationException
        {
            get
            {
                return this._throwValidationException;
            }
            set
            {
                if ((this._throwValidationException != value))
                {
                    this.OnThrowValidationExceptionChanging(value);
                    this.RaiseDataMemberChanging("ThrowValidationException");
                    this.ValidateProperty("ThrowValidationException", value);
                    this._throwValidationException = value;
                    this.RaiseDataMemberChanged("ThrowValidationException");
                    this.OnThrowValidationExceptionChanged();
                }
            }
        }

        /// <summary>
        /// Gets a value indicating whether the 'CustomUpdateRange' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField = false)]
        public bool IsCustomUpdateRangeInvoked
        {
            get
            {
                return base.IsActionInvoked("CustomUpdateRange");
            }
        }

        /// <summary>
        /// Gets a value indicating whether the 'CustomUpdateRange' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField = false)]
        public bool CanCustomUpdateRange
        {
            get
            {
                return base.CanInvokeAction("CustomUpdateRange");
            }
        }

        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }

        /// <summary>
        /// Invokes the 'CustomUpdateRange' action on this entity.
        /// </summary>
        [DebuggerStepThrough()]
        [EntityAction("CustomUpdateRange", AllowMultipleInvocations = false)]
        public void CustomUpdateRange()
        {
            this.OnCustomUpdateRangeInvoking();
            base.InvokeAction("CustomUpdateRange");
            this.OnCustomUpdateRangeInvoked();
        }
    }

    /// <summary>
    /// The DomainContext corresponding to the 'ServerSideAsyncDomainService' DomainService.
    /// </summary>
    public sealed partial class ServerSideAsyncDomainContext : DomainContext
    {

        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion


        /// <summary>
        /// Initializes a new instance of the <see cref="ServerSideAsyncDomainContext"/> class.
        /// </summary>
        public ServerSideAsyncDomainContext() :
                this(new Uri("TestDomainServices-ServerSideAsyncDomainService.svc", UriKind.Relative))
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerSideAsyncDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ServerSideAsyncDomainService service URI.</param>
        public ServerSideAsyncDomainContext(Uri serviceUri) :
                this(DomainContext.CreateDomainClient(typeof(IServerSideAsyncDomainServiceContract), serviceUri, false))
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerSideAsyncDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ServerSideAsyncDomainContext(DomainClient domainClient) :
                base(domainClient)
        {
            this.OnCreated();
        }

        /// <summary>
        /// Gets the set of <see cref="RangeItem"/> entity instances that have been loaded into this <see cref="ServerSideAsyncDomainContext"/> instance.
        /// </summary>
        public EntitySet<RangeItem> RangeItems
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RangeItem>();
            }
        }

        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetQueryableRange' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        public EntityQuery<RangeItem> GetQueryableRangeQuery()
        {
            this.ValidateMethod("GetQueryableRangeQuery", null);
            return base.CreateQuery<RangeItem>("GetQueryableRange", null, false, true);
        }

        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetQueryableRangeWithExceptionFirst' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        public EntityQuery<RangeItem> GetQueryableRangeWithExceptionFirstQuery()
        {
            this.ValidateMethod("GetQueryableRangeWithExceptionFirstQuery", null);
            return base.CreateQuery<RangeItem>("GetQueryableRangeWithExceptionFirst", null, false, true);
        }

        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetQueryableRangeWithExceptionTask' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        public EntityQuery<RangeItem> GetQueryableRangeWithExceptionTaskQuery()
        {
            this.ValidateMethod("GetQueryableRangeWithExceptionTaskQuery", null);
            return base.CreateQuery<RangeItem>("GetQueryableRangeWithExceptionTask", null, false, true);
        }

        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetRange' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        public EntityQuery<RangeItem> GetRangeQuery()
        {
            this.ValidateMethod("GetRangeQuery", null);
            return base.CreateQuery<RangeItem>("GetRange", null, false, true);
        }

        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetRangeById' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        public EntityQuery<RangeItem> GetRangeByIdQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetRangeByIdQuery", parameters);
            return base.CreateQuery<RangeItem>("GetRangeById", parameters, false, false);
        }

        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetRangeByIdWithExceptionFirst' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        public EntityQuery<RangeItem> GetRangeByIdWithExceptionFirstQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetRangeByIdWithExceptionFirstQuery", parameters);
            return base.CreateQuery<RangeItem>("GetRangeByIdWithExceptionFirst", parameters, false, false);
        }

        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetRangeByIdWithExceptionTask' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        public EntityQuery<RangeItem> GetRangeByIdWithExceptionTaskQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetRangeByIdWithExceptionTaskQuery", parameters);
            return base.CreateQuery<RangeItem>("GetRangeByIdWithExceptionTask", parameters, false, false);
        }

        /// <summary>
        /// Invokes the 'CustomUpdateRange' method of the specified <see cref="RangeItem"/> entity.
        /// </summary>
        /// <param name="rangeItem">The <see cref="RangeItem"/> entity instance.</param>
        public void CustomUpdateRange(RangeItem rangeItem)
        {
            rangeItem.CustomUpdateRange();
        }

        /// <summary>
        /// Asynchronously invokes the 'AddNullableOne' method of the DomainService.
        /// </summary>
        /// <param name="number">The value for the 'number' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<int>> AddNullableOne(Nullable<int> number, Action<InvokeOperation<Nullable<int>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("number", number);
            this.ValidateMethod("AddNullableOne", parameters);
            return this.InvokeOperation<Nullable<int>>("AddNullableOne", typeof(Nullable<int>), parameters, true, callback, userState);
        }

        /// <summary>
        /// Asynchronously invokes the 'AddNullableOne' method of the DomainService.
        /// </summary>
        /// <param name="number">The value for the 'number' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<int>> AddNullableOne(Nullable<int> number)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("number", number);
            this.ValidateMethod("AddNullableOne", parameters);
            return this.InvokeOperation<Nullable<int>>("AddNullableOne", typeof(Nullable<int>), parameters, true, null, null);
        }

        /// <summary>
        /// Asynchronously invokes the 'AddNullableOne' method of the DomainService.
        /// </summary>
        /// <param name="number">The value for the 'number' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Nullable<int>>> AddNullableOneAsync(Nullable<int> number, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("number", number);
            this.ValidateMethod("AddNullableOne", parameters);
            return this.InvokeOperationAsync<Nullable<int>>("AddNullableOne", parameters, true, cancellationToken);
        }

        /// <summary>
        /// Asynchronously invokes the 'AddOne' method of the DomainService.
        /// </summary>
        /// <param name="number">The value for the 'number' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> AddOne(int number, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("number", number);
            this.ValidateMethod("AddOne", parameters);
            return this.InvokeOperation<int>("AddOne", typeof(int), parameters, true, callback, userState);
        }

        /// <summary>
        /// Asynchronously invokes the 'AddOne' method of the DomainService.
        /// </summary>
        /// <param name="number">The value for the 'number' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> AddOne(int number)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("number", number);
            this.ValidateMethod("AddOne", parameters);
            return this.InvokeOperation<int>("AddOne", typeof(int), parameters, true, null, null);
        }

        /// <summary>
        /// Asynchronously invokes the 'AddOne' method of the DomainService.
        /// </summary>
        /// <param name="number">The value for the 'number' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<int>> AddOneAsync(int number, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("number", number);
            this.ValidateMethod("AddOne", parameters);
            return this.InvokeOperationAsync<int>("AddOne", parameters, true, cancellationToken);
        }

        /// <summary>
        /// Asynchronously invokes the 'GetLastDelay' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<TimeSpan> GetLastDelay(Action<InvokeOperation<TimeSpan>> callback, object userState)
        {
            this.ValidateMethod("GetLastDelay", null);
            return this.InvokeOperation<TimeSpan>("GetLastDelay", typeof(TimeSpan), null, true, callback, userState);
        }

        /// <summary>
        /// Asynchronously invokes the 'GetLastDelay' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<TimeSpan> GetLastDelay()
        {
            this.ValidateMethod("GetLastDelay", null);
            return this.InvokeOperation<TimeSpan>("GetLastDelay", typeof(TimeSpan), null, true, null, null);
        }

        /// <summary>
        /// Asynchronously invokes the 'GetLastDelay' method of the DomainService.
        /// </summary>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<TimeSpan>> GetLastDelayAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ValidateMethod("GetLastDelay", null);
            return this.InvokeOperationAsync<TimeSpan>("GetLastDelay", null, true, cancellationToken);
        }

        /// <summary>
        /// Asynchronously invokes the 'Greet' method of the DomainService.
        /// </summary>
        /// <param name="client">The value for the 'client' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> Greet(string client, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("client", client);
            this.ValidateMethod("Greet", parameters);
            return this.InvokeOperation<string>("Greet", typeof(string), parameters, true, callback, userState);
        }

        /// <summary>
        /// Asynchronously invokes the 'Greet' method of the DomainService.
        /// </summary>
        /// <param name="client">The value for the 'client' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> Greet(string client)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("client", client);
            this.ValidateMethod("Greet", parameters);
            return this.InvokeOperation<string>("Greet", typeof(string), parameters, true, null, null);
        }

        /// <summary>
        /// Asynchronously invokes the 'Greet' method of the DomainService.
        /// </summary>
        /// <param name="client">The value for the 'client' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<string>> GreetAsync(string client, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("client", client);
            this.ValidateMethod("Greet", parameters);
            return this.InvokeOperationAsync<string>("Greet", parameters, true, cancellationToken);
        }

        /// <summary>
        /// Asynchronously invokes the 'InvokeWithExceptionFirst' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation InvokeWithExceptionFirst(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("InvokeWithExceptionFirst", null);
            return this.InvokeOperation("InvokeWithExceptionFirst", typeof(void), null, true, callback, userState);
        }

        /// <summary>
        /// Asynchronously invokes the 'InvokeWithExceptionFirst' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation InvokeWithExceptionFirst()
        {
            this.ValidateMethod("InvokeWithExceptionFirst", null);
            return this.InvokeOperation("InvokeWithExceptionFirst", typeof(void), null, true, null, null);
        }

        /// <summary>
        /// Asynchronously invokes the 'InvokeWithExceptionFirst' method of the DomainService.
        /// </summary>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult> InvokeWithExceptionFirstAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ValidateMethod("InvokeWithExceptionFirst", null);
            return this.InvokeOperationAsync("InvokeWithExceptionFirst", null, true, cancellationToken);
        }

        /// <summary>
        /// Asynchronously invokes the 'InvokeWithExceptionTask' method of the DomainService.
        /// </summary>
        /// <param name="delay">The value for the 'delay' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation InvokeWithExceptionTask(int delay, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("delay", delay);
            this.ValidateMethod("InvokeWithExceptionTask", parameters);
            return this.InvokeOperation("InvokeWithExceptionTask", typeof(void), parameters, true, callback, userState);
        }

        /// <summary>
        /// Asynchronously invokes the 'InvokeWithExceptionTask' method of the DomainService.
        /// </summary>
        /// <param name="delay">The value for the 'delay' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation InvokeWithExceptionTask(int delay)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("delay", delay);
            this.ValidateMethod("InvokeWithExceptionTask", parameters);
            return this.InvokeOperation("InvokeWithExceptionTask", typeof(void), parameters, true, null, null);
        }

        /// <summary>
        /// Asynchronously invokes the 'InvokeWithExceptionTask' method of the DomainService.
        /// </summary>
        /// <param name="delay">The value for the 'delay' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult> InvokeWithExceptionTaskAsync(int delay, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("delay", delay);
            this.ValidateMethod("InvokeWithExceptionTask", parameters);
            return this.InvokeOperationAsync("InvokeWithExceptionTask", parameters, true, cancellationToken);
        }

        /// <summary>
        /// Asynchronously invokes the 'SleepAndSetLastDelay' method of the DomainService.
        /// </summary>
        /// <param name="delay">The value for the 'delay' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SleepAndSetLastDelay(TimeSpan delay, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("delay", delay);
            this.ValidateMethod("SleepAndSetLastDelay", parameters);
            return this.InvokeOperation("SleepAndSetLastDelay", typeof(void), parameters, true, callback, userState);
        }

        /// <summary>
        /// Asynchronously invokes the 'SleepAndSetLastDelay' method of the DomainService.
        /// </summary>
        /// <param name="delay">The value for the 'delay' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SleepAndSetLastDelay(TimeSpan delay)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("delay", delay);
            this.ValidateMethod("SleepAndSetLastDelay", parameters);
            return this.InvokeOperation("SleepAndSetLastDelay", typeof(void), parameters, true, null, null);
        }

        /// <summary>
        /// Asynchronously invokes the 'SleepAndSetLastDelay' method of the DomainService.
        /// </summary>
        /// <param name="delay">The value for the 'delay' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult> SleepAndSetLastDelayAsync(TimeSpan delay, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("delay", delay);
            this.ValidateMethod("SleepAndSetLastDelay", parameters);
            return this.InvokeOperationAsync("SleepAndSetLastDelay", parameters, true, cancellationToken);
        }

        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ServerSideAsyncDomainContextEntityContainer();
        }

        /// <summary>
        /// Service contract for the 'ServerSideAsyncDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IServerSideAsyncDomainServiceContract
        {

            /// <summary>
            /// Asynchronously invokes the 'AddNullableOne' operation.
            /// </summary>
            /// <param name="number">The value for the 'number' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/AddNullableOne", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/AddNullableOneResponse")]
            IAsyncResult BeginAddNullableOne(Nullable<int> number, AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddNullableOne'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddNullableOne'.</param>
            /// <returns>The 'Nullable`1' returned from the 'AddNullableOne' operation.</returns>
            Nullable<int> EndAddNullableOne(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'AddOne' operation.
            /// </summary>
            /// <param name="number">The value for the 'number' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/AddOne", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/AddOneResponse")]
            IAsyncResult BeginAddOne(int number, AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddOne'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddOne'.</param>
            /// <returns>The 'Int32' returned from the 'AddOne' operation.</returns>
            int EndAddOne(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'GetLastDelay' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/GetLastDelay", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/GetLastDelayResponse")]
            IAsyncResult BeginGetLastDelay(AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLastDelay'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLastDelay'.</param>
            /// <returns>The 'TimeSpan' returned from the 'GetLastDelay' operation.</returns>
            TimeSpan EndGetLastDelay(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'GetQueryableRange' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRange", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRangeResponse")]
            IAsyncResult BeginGetQueryableRange(AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetQueryableRange'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetQueryableRange'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetQueryableRange' operation.</returns>
            QueryResult<RangeItem> EndGetQueryableRange(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'GetQueryableRangeWithExceptionFirst' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRangeWithExceptionFir" +
                "st", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRangeWithExceptionFir" +
                "stResponse")]
            IAsyncResult BeginGetQueryableRangeWithExceptionFirst(AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetQueryableRangeWithExceptionFirst'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetQueryableRangeWithExceptionFirst'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetQueryableRangeWithExceptionFirst' operation.</returns>
            QueryResult<RangeItem> EndGetQueryableRangeWithExceptionFirst(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'GetQueryableRangeWithExceptionTask' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRangeWithExceptionTas" +
                "k", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRangeWithExceptionTas" +
                "kResponse")]
            IAsyncResult BeginGetQueryableRangeWithExceptionTask(AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetQueryableRangeWithExceptionTask'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetQueryableRangeWithExceptionTask'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetQueryableRangeWithExceptionTask' operation.</returns>
            QueryResult<RangeItem> EndGetQueryableRangeWithExceptionTask(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'GetRange' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/GetRange", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/GetRangeResponse")]
            IAsyncResult BeginGetRange(AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRange'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRange'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRange' operation.</returns>
            QueryResult<RangeItem> EndGetRange(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'GetRangeById' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/GetRangeById", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/GetRangeByIdResponse")]
            IAsyncResult BeginGetRangeById(int id, AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRangeById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRangeById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRangeById' operation.</returns>
            QueryResult<RangeItem> EndGetRangeById(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'GetRangeByIdWithExceptionFirst' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/GetRangeByIdWithExceptionFirst", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/GetRangeByIdWithExceptionFirstRes" +
                "ponse")]
            IAsyncResult BeginGetRangeByIdWithExceptionFirst(int id, AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRangeByIdWithExceptionFirst'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRangeByIdWithExceptionFirst'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRangeByIdWithExceptionFirst' operation.</returns>
            QueryResult<RangeItem> EndGetRangeByIdWithExceptionFirst(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'GetRangeByIdWithExceptionTask' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/GetRangeByIdWithExceptionTask", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/GetRangeByIdWithExceptionTaskResp" +
                "onse")]
            IAsyncResult BeginGetRangeByIdWithExceptionTask(int id, AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRangeByIdWithExceptionTask'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRangeByIdWithExceptionTask'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRangeByIdWithExceptionTask' operation.</returns>
            QueryResult<RangeItem> EndGetRangeByIdWithExceptionTask(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'Greet' operation.
            /// </summary>
            /// <param name="client">The value for the 'client' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/Greet", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/GreetResponse")]
            IAsyncResult BeginGreet(string client, AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGreet'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGreet'.</param>
            /// <returns>The 'String' returned from the 'Greet' operation.</returns>
            string EndGreet(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'InvokeWithExceptionFirst' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/InvokeWithExceptionFirst", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/InvokeWithExceptionFirstResponse")]
            IAsyncResult BeginInvokeWithExceptionFirst(AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginInvokeWithExceptionFirst'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginInvokeWithExceptionFirst'.</param>
            void EndInvokeWithExceptionFirst(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'InvokeWithExceptionTask' operation.
            /// </summary>
            /// <param name="delay">The value for the 'delay' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/InvokeWithExceptionTask", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/InvokeWithExceptionTaskResponse")]
            IAsyncResult BeginInvokeWithExceptionTask(int delay, AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginInvokeWithExceptionTask'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginInvokeWithExceptionTask'.</param>
            void EndInvokeWithExceptionTask(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'SleepAndSetLastDelay' operation.
            /// </summary>
            /// <param name="delay">The value for the 'delay' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/SleepAndSetLastDelay", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/SleepAndSetLastDelayResponse")]
            IAsyncResult BeginSleepAndSetLastDelay(TimeSpan delay, AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSleepAndSetLastDelay'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSleepAndSetLastDelay'.</param>
            void EndSleepAndSetLastDelay(IAsyncResult result);

            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/ServerSideAsyncDomainService/SubmitChanges", ReplyAction = "http://tempuri.org/ServerSideAsyncDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);

            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }

        internal sealed class ServerSideAsyncDomainContextEntityContainer : EntityContainer
        {

            public ServerSideAsyncDomainContextEntityContainer()
            {
                this.CreateEntitySet<RangeItem>(EntitySetOperations.All);
            }
        }
    }
}

