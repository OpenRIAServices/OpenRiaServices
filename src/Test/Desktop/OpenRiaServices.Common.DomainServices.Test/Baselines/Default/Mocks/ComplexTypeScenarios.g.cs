//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestDomainServices
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.Threading;
    using System.Threading.Tasks;
    using OpenRiaServices;
    using OpenRiaServices.Client;
    using OpenRiaServices.Client.Authentication;
    
    
    /// <summary>
    /// The 'Address' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    [RoundtripOriginal()]
    public sealed partial class Address : ComplexObject
    {
        
        private string _addressLine1;
        
        private string _addressLine2;
        
        private string _city;
        
        private string _state;
        
        private string _zip;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressLine1Changing(string value);
        partial void OnAddressLine1Changed();
        partial void OnAddressLine2Changing(string value);
        partial void OnAddressLine2Changed();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnZipChanging(string value);
        partial void OnZipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Address"/> class.
        /// </summary>
        public Address()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AddressLine1' value.
        /// </summary>
        [DataMember()]
        public string AddressLine1
        {
            get
            {
                return this._addressLine1;
            }
            set
            {
                if ((this._addressLine1 != value))
                {
                    this.OnAddressLine1Changing(value);
                    this.RaiseDataMemberChanging("AddressLine1");
                    this.ValidateProperty("AddressLine1", value);
                    this._addressLine1 = value;
                    this.RaiseDataMemberChanged("AddressLine1");
                    this.OnAddressLine1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressLine2' value.
        /// </summary>
        [DataMember()]
        public string AddressLine2
        {
            get
            {
                return this._addressLine2;
            }
            set
            {
                if ((this._addressLine2 != value))
                {
                    this.OnAddressLine2Changing(value);
                    this.RaiseDataMemberChanging("AddressLine2");
                    this.ValidateProperty("AddressLine2", value);
                    this._addressLine2 = value;
                    this.RaiseDataMemberChanged("AddressLine2");
                    this.OnAddressLine2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(2)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Zip' value.
        /// </summary>
        [DataMember()]
        [StringLength(5)]
        public string Zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                if ((this._zip != value))
                {
                    this.OnZipChanging(value);
                    this.RaiseDataMemberChanging("Zip");
                    this.ValidateProperty("Zip", value);
                    this._zip = value;
                    this.RaiseDataMemberChanged("Zip");
                    this.OnZipChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'ComplexInheritance_Child' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class ComplexInheritance_Child : ComplexObject
    {
        
        private int _a1;
        
        private int _a2;
        
        private int _z1;
        
        private int _z2;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnA1Changing(int value);
        partial void OnA1Changed();
        partial void OnA2Changing(int value);
        partial void OnA2Changed();
        partial void OnZ1Changing(int value);
        partial void OnZ1Changed();
        partial void OnZ2Changing(int value);
        partial void OnZ2Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexInheritance_Child"/> class.
        /// </summary>
        public ComplexInheritance_Child()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'A1' value.
        /// </summary>
        [DataMember()]
        public int A1
        {
            get
            {
                return this._a1;
            }
            set
            {
                if ((this._a1 != value))
                {
                    this.OnA1Changing(value);
                    this.RaiseDataMemberChanging("A1");
                    this.ValidateProperty("A1", value);
                    this._a1 = value;
                    this.RaiseDataMemberChanged("A1");
                    this.OnA1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'A2' value.
        /// </summary>
        [DataMember()]
        public int A2
        {
            get
            {
                return this._a2;
            }
            set
            {
                if ((this._a2 != value))
                {
                    this.OnA2Changing(value);
                    this.RaiseDataMemberChanging("A2");
                    this.ValidateProperty("A2", value);
                    this._a2 = value;
                    this.RaiseDataMemberChanged("A2");
                    this.OnA2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Z1' value.
        /// </summary>
        [DataMember()]
        public int Z1
        {
            get
            {
                return this._z1;
            }
            set
            {
                if ((this._z1 != value))
                {
                    this.OnZ1Changing(value);
                    this.RaiseDataMemberChanging("Z1");
                    this.ValidateProperty("Z1", value);
                    this._z1 = value;
                    this.RaiseDataMemberChanged("Z1");
                    this.OnZ1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Z2' value.
        /// </summary>
        [DataMember()]
        public int Z2
        {
            get
            {
                return this._z2;
            }
            set
            {
                if ((this._z2 != value))
                {
                    this.OnZ2Changing(value);
                    this.RaiseDataMemberChanging("Z2");
                    this.ValidateProperty("Z2", value);
                    this._z2 = value;
                    this.RaiseDataMemberChanged("Z2");
                    this.OnZ2Changed();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'ComplexType_Parent' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    [RoundtripOriginal()]
    public sealed partial class ComplexType_Parent : Entity
    {
        
        private ContactInfo _contactInfo;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnContactInfoChanging(ContactInfo value);
        partial void OnContactInfoChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnTestAutoSyncInvoking(Phone phone);
        partial void OnTestAutoSyncInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexType_Parent"/> class.
        /// </summary>
        public ComplexType_Parent()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ContactInfo' value.
        /// </summary>
        [CustomValidation(typeof(DynamicTestValidator), "Validate")]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ContactInfo ContactInfo
        {
            get
            {
                return this._contactInfo;
            }
            set
            {
                if ((this._contactInfo != value))
                {
                    this.OnContactInfoChanging(value);
                    this.RaiseDataMemberChanging("ContactInfo");
                    this.ValidateProperty("ContactInfo", value);
                    this._contactInfo = value;
                    this.RaiseDataMemberChanged("ContactInfo");
                    this.OnContactInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TestAutoSync' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsTestAutoSyncInvoked
        {
            get
            {
                return base.IsActionInvoked("TestAutoSync");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'TestAutoSync' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanTestAutoSync
        {
            get
            {
                return base.CanInvokeAction("TestAutoSync");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
        
        /// <summary>
        /// Invokes the 'TestAutoSync' action on this entity.
        /// </summary>
        /// <param name="phone">The value to pass to the server method's 'phone' parameter.</param>
        [EntityAction("TestAutoSync", AllowMultipleInvocations=false)]
        public void TestAutoSync(Phone phone)
        {
            this.OnTestAutoSyncInvoking(phone);
            base.InvokeAction("TestAutoSync", phone);
            this.OnTestAutoSyncInvoked();
        }
    }
    
    /// <summary>
    /// The 'ComplexTypeInheritance_EntityGrandchild' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    public sealed partial class ComplexTypeInheritance_EntityGrandchild : ComplexTypeInheritance_EntityGrandparent
    {
        
        private ComplexInheritance_Child _child;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnChildChanging(ComplexInheritance_Child value);
        partial void OnChildChanged();
        partial void OnChooseHighestStubOrChildInvoking(ComplexInheritance_Child child, ComplexInheritance_Child[] children);
        partial void OnChooseHighestStubOrChildInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexTypeInheritance_EntityGrandchild"/> class.
        /// </summary>
        public ComplexTypeInheritance_EntityGrandchild()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Child' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ComplexInheritance_Child Child
        {
            get
            {
                return this._child;
            }
            set
            {
                if ((this._child != value))
                {
                    this.OnChildChanging(value);
                    this.RaiseDataMemberChanging("Child");
                    this.ValidateProperty("Child", value);
                    this._child = value;
                    this.RaiseDataMemberChanged("Child");
                    this.OnChildChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'ChooseHighestStubOrChild' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsChooseHighestStubOrChildInvoked
        {
            get
            {
                return base.IsActionInvoked("ChooseHighestStubOrChild");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'ChooseHighestStubOrChild' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanChooseHighestStubOrChild
        {
            get
            {
                return base.CanInvokeAction("ChooseHighestStubOrChild");
            }
        }
        
        /// <summary>
        /// Invokes the 'ChooseHighestStubOrChild' action on this entity.
        /// </summary>
        /// <param name="child">The value to pass to the server method's 'child' parameter.</param>
        /// <param name="children">The value to pass to the server method's 'children' parameter.</param>
        [EntityAction("ChooseHighestStubOrChild", AllowMultipleInvocations=false)]
        public void ChooseHighestStubOrChild(ComplexInheritance_Child child, ComplexInheritance_Child[] children)
        {
            this.OnChooseHighestStubOrChildInvoking(child, children);
            base.InvokeAction("ChooseHighestStubOrChild", child, children);
            this.OnChooseHighestStubOrChildInvoked();
        }
    }
    
    /// <summary>
    /// The 'ComplexTypeInheritance_EntityGrandparent' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    [KnownType(typeof(ComplexTypeInheritance_EntityGrandchild))]
    public partial class ComplexTypeInheritance_EntityGrandparent : Entity
    {
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexTypeInheritance_EntityGrandparent"/> class.
        /// </summary>
        public ComplexTypeInheritance_EntityGrandparent()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ComplexTypes_DomainService' DomainService.
    /// </summary>
    public sealed partial class ComplexTypes_DomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexTypes_DomainContext"/> class.
        /// </summary>
        public ComplexTypes_DomainContext() : 
                this(new Uri("TestDomainServices-ComplexTypes_DomainService.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexTypes_DomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ComplexTypes_DomainService service URI.</param>
        public ComplexTypes_DomainContext(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(IComplexTypes_DomainServiceContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexTypes_DomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ComplexTypes_DomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ComplexTypeInheritance_EntityGrandparent"/> entity instances that have been loaded into this <see cref="ComplexTypes_DomainContext"/> instance.
        /// </summary>
        public EntitySet<ComplexTypeInheritance_EntityGrandparent> ComplexTypeInheritance_EntityGrandparents
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ComplexTypeInheritance_EntityGrandparent>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ComplexTypeInheritance_EntityGrandparent"/> entity instances using the 'GetStub' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ComplexTypeInheritance_EntityGrandparent"/> entity instances.</returns>
        public EntityQuery<ComplexTypeInheritance_EntityGrandparent> GetStubQuery()
        {
            this.ValidateMethod("GetStubQuery", null);
            return base.CreateQuery<ComplexTypeInheritance_EntityGrandparent>("GetStub", null, false, true);
        }
        
        /// <summary>
        /// Invokes the 'ChooseHighestStubOrChild' method of the specified <see cref="ComplexTypeInheritance_EntityGrandchild"/> entity.
        /// </summary>
        /// <param name="grandchild">The <see cref="ComplexTypeInheritance_EntityGrandchild"/> entity instance.</param>
        /// <param name="child">The value for the 'child' parameter for this action.</param>
        /// <param name="children">The value for the 'children' parameter for this action.</param>
        public void ChooseHighestStubOrChild(ComplexTypeInheritance_EntityGrandchild grandchild, ComplexInheritance_Child child, ComplexInheritance_Child[] children)
        {
            grandchild.ChooseHighestStubOrChild(child, children);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetHighestChild' method of the DomainService.
        /// </summary>
        /// <param name="child">The value for the 'child' parameter of this action.</param>
        /// <param name="children">The value for the 'children' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ComplexInheritance_Child> GetHighestChild(ComplexInheritance_Child child, ComplexInheritance_Child[] children, Action<InvokeOperation<ComplexInheritance_Child>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("child", child);
            parameters.Add("children", children);
            this.ValidateMethod("GetHighestChild", parameters);
            return this.InvokeOperation<ComplexInheritance_Child>("GetHighestChild", typeof(ComplexInheritance_Child), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetHighestChild' method of the DomainService.
        /// </summary>
        /// <param name="child">The value for the 'child' parameter of this action.</param>
        /// <param name="children">The value for the 'children' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ComplexInheritance_Child> GetHighestChild(ComplexInheritance_Child child, ComplexInheritance_Child[] children)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("child", child);
            parameters.Add("children", children);
            this.ValidateMethod("GetHighestChild", parameters);
            return this.InvokeOperation<ComplexInheritance_Child>("GetHighestChild", typeof(ComplexInheritance_Child), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetHighestChild' method of the DomainService.
        /// </summary>
        /// <param name="child">The value for the 'child' parameter of this action.</param>
        /// <param name="children">The value for the 'children' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<ComplexInheritance_Child>> GetHighestChildAsync(ComplexInheritance_Child child, ComplexInheritance_Child[] children, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("child", child);
            parameters.Add("children", children);
            this.ValidateMethod("GetHighestChild", parameters);
            return this.InvokeOperationAsync<ComplexInheritance_Child>("GetHighestChild", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetInheritedMember' method of the DomainService.
        /// </summary>
        /// <param name="child">The value for the 'child' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ComplexInheritance_Child> GetInheritedMember(ComplexInheritance_Child child, Action<InvokeOperation<ComplexInheritance_Child>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("child", child);
            this.ValidateMethod("GetInheritedMember", parameters);
            return this.InvokeOperation<ComplexInheritance_Child>("GetInheritedMember", typeof(ComplexInheritance_Child), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetInheritedMember' method of the DomainService.
        /// </summary>
        /// <param name="child">The value for the 'child' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ComplexInheritance_Child> GetInheritedMember(ComplexInheritance_Child child)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("child", child);
            this.ValidateMethod("GetInheritedMember", parameters);
            return this.InvokeOperation<ComplexInheritance_Child>("GetInheritedMember", typeof(ComplexInheritance_Child), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetInheritedMember' method of the DomainService.
        /// </summary>
        /// <param name="child">The value for the 'child' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<ComplexInheritance_Child>> GetInheritedMemberAsync(ComplexInheritance_Child child, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("child", child);
            this.ValidateMethod("GetInheritedMember", parameters);
            return this.InvokeOperationAsync<ComplexInheritance_Child>("GetInheritedMember", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ComplexTypes_DomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ComplexTypes_DomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        [ServiceKnownType(typeof(global::TestDomainServices.ComplexInheritance_Child))]
        [ServiceKnownType(typeof(TestDomainServices.ComplexInheritance_Child[]))]
        public interface IComplexTypes_DomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetHighestChild' operation.
            /// </summary>
            /// <param name="child">The value for the 'child' parameter of this action.</param>
            /// <param name="children">The value for the 'children' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ComplexTypes_DomainService/GetHighestChild", ReplyAction="http://tempuri.org/ComplexTypes_DomainService/GetHighestChildResponse")]
            IAsyncResult BeginGetHighestChild(ComplexInheritance_Child child, ComplexInheritance_Child[] children, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetHighestChild'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetHighestChild'.</param>
            /// <returns>The 'ComplexInheritance_Child' returned from the 'GetHighestChild' operation.</returns>
            ComplexInheritance_Child EndGetHighestChild(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInheritedMember' operation.
            /// </summary>
            /// <param name="child">The value for the 'child' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ComplexTypes_DomainService/GetInheritedMember", ReplyAction="http://tempuri.org/ComplexTypes_DomainService/GetInheritedMemberResponse")]
            IAsyncResult BeginGetInheritedMember(ComplexInheritance_Child child, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInheritedMember'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInheritedMember'.</param>
            /// <returns>The 'ComplexInheritance_Child' returned from the 'GetInheritedMember' operation.</returns>
            ComplexInheritance_Child EndGetInheritedMember(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStub' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ComplexTypes_DomainService/GetStub", ReplyAction="http://tempuri.org/ComplexTypes_DomainService/GetStubResponse")]
            IAsyncResult BeginGetStub(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStub'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStub'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStub' operation.</returns>
            QueryResult<ComplexTypeInheritance_EntityGrandparent> EndGetStub(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ComplexTypes_DomainService/SubmitChanges", ReplyAction="http://tempuri.org/ComplexTypes_DomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ComplexTypes_DomainContextEntityContainer : EntityContainer
        {
            
            public ComplexTypes_DomainContextEntityContainer()
            {
                this.CreateEntitySet<ComplexTypeInheritance_EntityGrandparent>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ComplexTypes_InvokeOperationsOnly' DomainService.
    /// </summary>
    public sealed partial class ComplexTypes_InvokeOperationsOnly : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexTypes_InvokeOperationsOnly"/> class.
        /// </summary>
        public ComplexTypes_InvokeOperationsOnly() : 
                this(new Uri("TestDomainServices-ComplexTypes_InvokeOperationsOnly.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexTypes_InvokeOperationsOnly"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ComplexTypes_InvokeOperationsOnly service URI.</param>
        public ComplexTypes_InvokeOperationsOnly(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(IComplexTypes_InvokeOperationsOnlyContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexTypes_InvokeOperationsOnly"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ComplexTypes_InvokeOperationsOnly(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        /// </summary>
        /// <param name="address">The value for the 'address' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Address> RoundtripAddress(Address address, Action<InvokeOperation<Address>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("address", address);
            this.ValidateMethod("RoundtripAddress", parameters);
            return this.InvokeOperation<Address>("RoundtripAddress", typeof(Address), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        /// </summary>
        /// <param name="address">The value for the 'address' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Address> RoundtripAddress(Address address)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("address", address);
            this.ValidateMethod("RoundtripAddress", parameters);
            return this.InvokeOperation<Address>("RoundtripAddress", typeof(Address), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        /// </summary>
        /// <param name="address">The value for the 'address' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Address>> RoundtripAddressAsync(Address address, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("address", address);
            this.ValidateMethod("RoundtripAddress", parameters);
            return this.InvokeOperationAsync<Address>("RoundtripAddress", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateContact' method of the DomainService.
        /// </summary>
        /// <param name="contact">The value for the 'contact' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation UpdateContact(ContactInfo contact, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("contact", contact);
            this.ValidateMethod("UpdateContact", parameters);
            return this.InvokeOperation("UpdateContact", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateContact' method of the DomainService.
        /// </summary>
        /// <param name="contact">The value for the 'contact' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation UpdateContact(ContactInfo contact)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("contact", contact);
            this.ValidateMethod("UpdateContact", parameters);
            return this.InvokeOperation("UpdateContact", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateContact' method of the DomainService.
        /// </summary>
        /// <param name="contact">The value for the 'contact' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult> UpdateContactAsync(ContactInfo contact, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("contact", contact);
            this.ValidateMethod("UpdateContact", parameters);
            return this.InvokeOperationAsync("UpdateContact", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ComplexTypes_InvokeOperationsOnlyEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ComplexTypes_InvokeOperationsOnly' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IComplexTypes_InvokeOperationsOnlyContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'RoundtripAddress' operation.
            /// </summary>
            /// <param name="address">The value for the 'address' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ComplexTypes_InvokeOperationsOnly/RoundtripAddress", ReplyAction="http://tempuri.org/ComplexTypes_InvokeOperationsOnly/RoundtripAddressResponse")]
            IAsyncResult BeginRoundtripAddress(Address address, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRoundtripAddress'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRoundtripAddress'.</param>
            /// <returns>The 'Address' returned from the 'RoundtripAddress' operation.</returns>
            Address EndRoundtripAddress(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateContact' operation.
            /// </summary>
            /// <param name="contact">The value for the 'contact' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ComplexTypes_InvokeOperationsOnly/UpdateContact", ReplyAction="http://tempuri.org/ComplexTypes_InvokeOperationsOnly/UpdateContactResponse")]
            IAsyncResult BeginUpdateContact(ContactInfo contact, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateContact'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateContact'.</param>
            void EndUpdateContact(IAsyncResult result);
        }
        
        internal sealed class ComplexTypes_InvokeOperationsOnlyEntityContainer : EntityContainer
        {
            
            public ComplexTypes_InvokeOperationsOnlyEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ComplexTypes_TestService' DomainService.
    /// </summary>
    public sealed partial class ComplexTypes_TestContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexTypes_TestContext"/> class.
        /// </summary>
        public ComplexTypes_TestContext() : 
                this(new Uri("TestDomainServices-ComplexTypes_TestService.svc", UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexTypes_TestContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ComplexTypes_TestService service URI.</param>
        public ComplexTypes_TestContext(Uri serviceUri) : 
                this(DomainContext.CreateDomainClient(typeof(IComplexTypes_TestServiceContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexTypes_TestContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ComplexTypes_TestContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ComplexType_Parent"/> entity instances that have been loaded into this <see cref="ComplexTypes_TestContext"/> instance.
        /// </summary>
        public EntitySet<ComplexType_Parent> ComplexType_Parents
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ComplexType_Parent>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ComplexType_Parent"/> entity instances using the 'GetParents' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ComplexType_Parent"/> entity instances.</returns>
        public EntityQuery<ComplexType_Parent> GetParentsQuery()
        {
            this.ValidateMethod("GetParentsQuery", null);
            return base.CreateQuery<ComplexType_Parent>("GetParents", null, false, true);
        }
        
        /// <summary>
        /// Invokes the 'TestAutoSync' method of the specified <see cref="ComplexType_Parent"/> entity.
        /// </summary>
        /// <param name="parent">The <see cref="ComplexType_Parent"/> entity instance.</param>
        /// <param name="phone">The value for the 'phone' parameter for this action.</param>
        public void TestAutoSync(ComplexType_Parent parent, Phone phone)
        {
            parent.TestAutoSync(phone);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnHomeAddress' method of the DomainService.
        /// </summary>
        /// <param name="contact">The value for the 'contact' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Address> ReturnHomeAddress(ContactInfo contact, Action<InvokeOperation<Address>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("contact", contact);
            this.ValidateMethod("ReturnHomeAddress", parameters);
            return this.InvokeOperation<Address>("ReturnHomeAddress", typeof(Address), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnHomeAddress' method of the DomainService.
        /// </summary>
        /// <param name="contact">The value for the 'contact' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Address> ReturnHomeAddress(ContactInfo contact)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("contact", contact);
            this.ValidateMethod("ReturnHomeAddress", parameters);
            return this.InvokeOperation<Address>("ReturnHomeAddress", typeof(Address), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReturnHomeAddress' method of the DomainService.
        /// </summary>
        /// <param name="contact">The value for the 'contact' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Address>> ReturnHomeAddressAsync(ContactInfo contact, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("contact", contact);
            this.ValidateMethod("ReturnHomeAddress", parameters);
            return this.InvokeOperationAsync<Address>("ReturnHomeAddress", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        /// </summary>
        /// <param name="address">The value for the 'address' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Address> RoundtripAddress(Address address, Action<InvokeOperation<Address>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("address", address);
            this.ValidateMethod("RoundtripAddress", parameters);
            return this.InvokeOperation<Address>("RoundtripAddress", typeof(Address), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        /// </summary>
        /// <param name="address">The value for the 'address' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Address> RoundtripAddress(Address address)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("address", address);
            this.ValidateMethod("RoundtripAddress", parameters);
            return this.InvokeOperation<Address>("RoundtripAddress", typeof(Address), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        /// </summary>
        /// <param name="address">The value for the 'address' parameter of this action.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public System.Threading.Tasks.Task<InvokeResult<Address>> RoundtripAddressAsync(Address address, CancellationToken cancellationToken = default(CancellationToken))
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("address", address);
            this.ValidateMethod("RoundtripAddress", parameters);
            return this.InvokeOperationAsync<Address>("RoundtripAddress", parameters, true, cancellationToken);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ComplexTypes_TestContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ComplexTypes_TestService' DomainService.
        /// </summary>
        [ServiceContract()]
        [ServiceKnownType(typeof(global::TestDomainServices.Phone))]
        public interface IComplexTypes_TestServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetParents' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(false)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ComplexTypes_TestService/GetParents", ReplyAction="http://tempuri.org/ComplexTypes_TestService/GetParentsResponse")]
            IAsyncResult BeginGetParents(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetParents'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetParents'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetParents' operation.</returns>
            QueryResult<ComplexType_Parent> EndGetParents(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReturnHomeAddress' operation.
            /// </summary>
            /// <param name="contact">The value for the 'contact' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ComplexTypes_TestService/ReturnHomeAddress", ReplyAction="http://tempuri.org/ComplexTypes_TestService/ReturnHomeAddressResponse")]
            IAsyncResult BeginReturnHomeAddress(ContactInfo contact, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReturnHomeAddress'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReturnHomeAddress'.</param>
            /// <returns>The 'Address' returned from the 'ReturnHomeAddress' operation.</returns>
            Address EndReturnHomeAddress(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RoundtripAddress' operation.
            /// </summary>
            /// <param name="address">The value for the 'address' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [HasSideEffects(true)]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ComplexTypes_TestService/RoundtripAddress", ReplyAction="http://tempuri.org/ComplexTypes_TestService/RoundtripAddressResponse")]
            IAsyncResult BeginRoundtripAddress(Address address, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRoundtripAddress'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRoundtripAddress'.</param>
            /// <returns>The 'Address' returned from the 'RoundtripAddress' operation.</returns>
            Address EndRoundtripAddress(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ComplexTypes_TestService/SubmitChanges", ReplyAction="http://tempuri.org/ComplexTypes_TestService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ComplexTypes_TestContextEntityContainer : EntityContainer
        {
            
            public ComplexTypes_TestContextEntityContainer()
            {
                this.CreateEntitySet<ComplexType_Parent>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'ContactInfo' class.
    /// </summary>
    [CustomValidation(typeof(DynamicTestValidator), "Validate")]
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    [RoundtripOriginal()]
    public sealed partial class ContactInfo : ComplexObject
    {
        
        private Address _homeAddress;
        
        private string _name;
        
        private Phone _primaryPhone;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnHomeAddressChanging(Address value);
        partial void OnHomeAddressChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPrimaryPhoneChanging(Phone value);
        partial void OnPrimaryPhoneChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactInfo"/> class.
        /// </summary>
        public ContactInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'HomeAddress' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public Address HomeAddress
        {
            get
            {
                return this._homeAddress;
            }
            set
            {
                if ((this._homeAddress != value))
                {
                    this.OnHomeAddressChanging(value);
                    this.RaiseDataMemberChanging("HomeAddress");
                    this.ValidateProperty("HomeAddress", value);
                    this._homeAddress = value;
                    this.RaiseDataMemberChanged("HomeAddress");
                    this.OnHomeAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PrimaryPhone' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public Phone PrimaryPhone
        {
            get
            {
                return this._primaryPhone;
            }
            set
            {
                if ((this._primaryPhone != value))
                {
                    this.OnPrimaryPhoneChanging(value);
                    this.RaiseDataMemberChanging("PrimaryPhone");
                    this.ValidateProperty("PrimaryPhone", value);
                    this._primaryPhone = value;
                    this.RaiseDataMemberChanged("PrimaryPhone");
                    this.OnPrimaryPhoneChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Phone' class.
    /// </summary>
    [CustomValidation(typeof(DynamicTestValidator), "Validate")]
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices")]
    [RoundtripOriginal()]
    public sealed partial class Phone : ComplexObject
    {
        
        private string _areaCode;
        
        private string _number;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAreaCodeChanging(string value);
        partial void OnAreaCodeChanged();
        partial void OnNumberChanging(string value);
        partial void OnNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Phone"/> class.
        /// </summary>
        public Phone()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AreaCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(3)]
        public string AreaCode
        {
            get
            {
                return this._areaCode;
            }
            set
            {
                if ((this._areaCode != value))
                {
                    this.OnAreaCodeChanging(value);
                    this.RaiseDataMemberChanging("AreaCode");
                    this.ValidateProperty("AreaCode", value);
                    this._areaCode = value;
                    this.RaiseDataMemberChanged("AreaCode");
                    this.OnAreaCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
    }
}
