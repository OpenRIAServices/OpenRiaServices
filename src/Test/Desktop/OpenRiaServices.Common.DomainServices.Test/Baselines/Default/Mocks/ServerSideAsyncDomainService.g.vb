'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Compare Binary
Option Infer On
Option Strict On
Option Explicit On

Imports OpenRiaServices
Imports OpenRiaServices.Client
Imports OpenRiaServices.Client.Authentication
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations
Imports System.Linq
Imports System.Runtime.Serialization
Imports System.ServiceModel
Imports System.Threading
Imports System.Threading.Tasks

Namespace TestDomainServices

    ''' <summary>
    ''' The 'RangeItem' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/ServerSideAsyncDomainService")>
    Partial Public NotInheritable Class RangeItem
        Inherits Entity

        Private _id As Integer

        Private _text As String

        Private _throwDomainException As Boolean

        Private _throwValidationException As Boolean

#Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnTextChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTextChanged()
        End Sub
        Partial Private Sub OnThrowDomainExceptionChanging(ByVal value As Boolean)
        End Sub
        Partial Private Sub OnThrowDomainExceptionChanged()
        End Sub
        Partial Private Sub OnThrowValidationExceptionChanging(ByVal value As Boolean)
        End Sub
        Partial Private Sub OnThrowValidationExceptionChanged()
        End Sub
        Partial Private Sub OnCustomUpdateRangeInvoking()
        End Sub
        Partial Private Sub OnCustomUpdateRangeInvoked()
        End Sub

#End Region


        ''' <summary>
        ''' Initializes a new instance of the <see cref="RangeItem"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated()
        End Sub

        'The following attributes were not generated:
        '
        '- The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'VBWpfClient'. Are you missing an assembly reference?
        '<RoundtripOriginalAttribute()> _
        '
        ''' <summary>
        ''' Gets or sets the 'Id' value.
        ''' </summary>
        <DataMember(),
         Editable(False, AllowInitialValue:=True),
         Key()>
        Public Property Id() As Integer
            Get
                Return Me._id
            End Get
            Set
                If ((Me._id = Value) _
                            = False) Then
                    Me.OnIdChanging(Value)
                    Me.ValidateProperty("Id", Value)
                    Me._id = Value
                    Me.RaisePropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'Text' value.
        ''' </summary>
        <DataMember()>
        Public Property Text() As String
            Get
                Return Me._text
            End Get
            Set
                If (String.Equals(Me._text, Value) = False) Then
                    Me.OnTextChanging(Value)
                    Me.RaiseDataMemberChanging("Text")
                    Me.ValidateProperty("Text", Value)
                    Me._text = Value
                    Me.RaiseDataMemberChanged("Text")
                    Me.OnTextChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ThrowDomainException' value.
        ''' </summary>
        <DataMember()>
        Public Property ThrowDomainException() As Boolean
            Get
                Return Me._throwDomainException
            End Get
            Set
                If ((Me._throwDomainException = Value) _
                            = False) Then
                    Me.OnThrowDomainExceptionChanging(Value)
                    Me.RaiseDataMemberChanging("ThrowDomainException")
                    Me.ValidateProperty("ThrowDomainException", Value)
                    Me._throwDomainException = Value
                    Me.RaiseDataMemberChanged("ThrowDomainException")
                    Me.OnThrowDomainExceptionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ThrowValidationException' value.
        ''' </summary>
        <DataMember()>
        Public Property ThrowValidationException() As Boolean
            Get
                Return Me._throwValidationException
            End Get
            Set
                If ((Me._throwValidationException = Value) _
                            = False) Then
                    Me.OnThrowValidationExceptionChanging(Value)
                    Me.RaiseDataMemberChanging("ThrowValidationException")
                    Me.ValidateProperty("ThrowValidationException", Value)
                    Me._throwValidationException = Value
                    Me.RaiseDataMemberChanged("ThrowValidationException")
                    Me.OnThrowValidationExceptionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets a value indicating whether the 'CustomUpdateRange' action has been invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=False)>
        Public ReadOnly Property IsCustomUpdateRangeInvoked() As Boolean
            Get
                Return MyBase.IsActionInvoked("CustomUpdateRange")
            End Get
        End Property

        ''' <summary>
        ''' Gets a value indicating whether the 'CustomUpdateRange' method can be invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=False)>
        Public ReadOnly Property CanCustomUpdateRange() As Boolean
            Get
                Return MyBase.CanInvokeAction("CustomUpdateRange")
            End Get
        End Property

        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._id
        End Function

        ''' <summary>
        ''' Invokes the 'CustomUpdateRange' action on this entity.
        ''' </summary>
        <DebuggerStepThrough(),
         EntityAction("CustomUpdateRange", AllowMultipleInvocations:=False)>
        Public Sub CustomUpdateRange()
            Me.OnCustomUpdateRangeInvoking()
            MyBase.InvokeAction("CustomUpdateRange")
            Me.OnCustomUpdateRangeInvoked()
        End Sub
    End Class

    ''' <summary>
    ''' The DomainContext corresponding to the 'ServerSideAsyncDomainService' DomainService.
    ''' </summary>
    Partial Public NotInheritable Class ServerSideAsyncDomainContext
        Inherits DomainContext

#Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub

#End Region


        ''' <summary>
        ''' Initializes a new instance of the <see cref="ServerSideAsyncDomainContext"/> class.
        ''' </summary>
        Public Sub New()
            Me.New(New Uri("TestDomainServices-ServerSideAsyncDomainService.svc", UriKind.Relative))
        End Sub

        ''' <summary>
        ''' Initializes a new instance of the <see cref="ServerSideAsyncDomainContext"/> class with the specified service URI.
        ''' </summary>
        ''' <param name="serviceUri">The ServerSideAsyncDomainService service URI.</param>
        Public Sub New(ByVal serviceUri As Uri)
            Me.New(DomainContext.CreateDomainClient(GetType(IServerSideAsyncDomainServiceContract), serviceUri, False))
        End Sub

        ''' <summary>
        ''' Initializes a new instance of the <see cref="ServerSideAsyncDomainContext"/> class with the specified <paramref name="domainClient"/>.
        ''' </summary>
        ''' <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        Public Sub New(ByVal domainClient As DomainClient)
            MyBase.New(domainClient)
            Me.OnCreated()
        End Sub

        ''' <summary>
        ''' Gets the set of <see cref="RangeItem"/> entity instances that have been loaded into this <see cref="ServerSideAsyncDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property RangeItems() As EntitySet(Of RangeItem)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of RangeItem)
            End Get
        End Property

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetQueryableRange' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        Public Function GetQueryableRangeQuery() As EntityQuery(Of RangeItem)
            Me.ValidateMethod("GetQueryableRangeQuery", Nothing)
            Return MyBase.CreateQuery(Of RangeItem)("GetQueryableRange", Nothing, False, True)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetQueryableRangeWithExceptionFirst' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        Public Function GetQueryableRangeWithExceptionFirstQuery() As EntityQuery(Of RangeItem)
            Me.ValidateMethod("GetQueryableRangeWithExceptionFirstQuery", Nothing)
            Return MyBase.CreateQuery(Of RangeItem)("GetQueryableRangeWithExceptionFirst", Nothing, False, True)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetQueryableRangeWithExceptionTask' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        Public Function GetQueryableRangeWithExceptionTaskQuery() As EntityQuery(Of RangeItem)
            Me.ValidateMethod("GetQueryableRangeWithExceptionTaskQuery", Nothing)
            Return MyBase.CreateQuery(Of RangeItem)("GetQueryableRangeWithExceptionTask", Nothing, False, True)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetRange' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        Public Function GetRangeQuery() As EntityQuery(Of RangeItem)
            Me.ValidateMethod("GetRangeQuery", Nothing)
            Return MyBase.CreateQuery(Of RangeItem)("GetRange", Nothing, False, True)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetRangeById' query.
        ''' </summary>
        ''' <param name="id">The value for the 'id' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        Public Function GetRangeByIdQuery(ByVal id As Integer) As EntityQuery(Of RangeItem)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("id", id)
            Me.ValidateMethod("GetRangeByIdQuery", parameters)
            Return MyBase.CreateQuery(Of RangeItem)("GetRangeById", parameters, False, False)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetRangeByIdWithExceptionFirst' query.
        ''' </summary>
        ''' <param name="id">The value for the 'id' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        Public Function GetRangeByIdWithExceptionFirstQuery(ByVal id As Integer) As EntityQuery(Of RangeItem)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("id", id)
            Me.ValidateMethod("GetRangeByIdWithExceptionFirstQuery", parameters)
            Return MyBase.CreateQuery(Of RangeItem)("GetRangeByIdWithExceptionFirst", parameters, False, False)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="RangeItem"/> entity instances using the 'GetRangeByIdWithExceptionTask' query.
        ''' </summary>
        ''' <param name="id">The value for the 'id' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="RangeItem"/> entity instances.</returns>
        Public Function GetRangeByIdWithExceptionTaskQuery(ByVal id As Integer) As EntityQuery(Of RangeItem)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("id", id)
            Me.ValidateMethod("GetRangeByIdWithExceptionTaskQuery", parameters)
            Return MyBase.CreateQuery(Of RangeItem)("GetRangeByIdWithExceptionTask", parameters, False, False)
        End Function

        ''' <summary>
        ''' Invokes the 'CustomUpdateRange' method of the specified <see cref="RangeItem"/> entity.
        ''' </summary>
        ''' <param name="rangeItem">The <see cref="RangeItem"/> entity instance.</param>
        Public Sub CustomUpdateRange(ByVal rangeItem As RangeItem)
            rangeItem.CustomUpdateRange()
        End Sub

        ''' <summary>
        ''' Asynchronously invokes the 'AddNullableOne' method of the DomainService.
        ''' </summary>
        ''' <param name="number">The value for the 'number' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function AddNullableOne(ByVal number As Nullable(Of Integer), ByVal callback As Action(Of InvokeOperation(Of Nullable(Of Integer))), ByVal userState As Object) As InvokeOperation(Of Nullable(Of Integer))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("number", number)
            Me.ValidateMethod("AddNullableOne", parameters)
            Return Me.InvokeOperation(Of Nullable(Of Integer))("AddNullableOne", GetType(Nullable(Of Integer)), parameters, True, callback, userState)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'AddNullableOne' method of the DomainService.
        ''' </summary>
        ''' <param name="number">The value for the 'number' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function AddNullableOne(ByVal number As Nullable(Of Integer)) As InvokeOperation(Of Nullable(Of Integer))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("number", number)
            Me.ValidateMethod("AddNullableOne", parameters)
            Return Me.InvokeOperation(Of Nullable(Of Integer))("AddNullableOne", GetType(Nullable(Of Integer)), parameters, True, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'AddNullableOne' method of the DomainService.
        ''' </summary>
        ''' <param name="number">The value for the 'number' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function AddNullableOneAsync(ByVal number As Nullable(Of Integer), Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of Nullable(Of Integer)))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("number", number)
            Me.ValidateMethod("AddNullableOne", parameters)
            Return Me.InvokeOperationAsync(Of Nullable(Of Integer))("AddNullableOne", parameters, True, cancellationToken)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'AddOne' method of the DomainService.
        ''' </summary>
        ''' <param name="number">The value for the 'number' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function AddOne(ByVal number As Integer, ByVal callback As Action(Of InvokeOperation(Of Integer)), ByVal userState As Object) As InvokeOperation(Of Integer)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("number", number)
            Me.ValidateMethod("AddOne", parameters)
            Return Me.InvokeOperation(Of Integer)("AddOne", GetType(Integer), parameters, True, callback, userState)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'AddOne' method of the DomainService.
        ''' </summary>
        ''' <param name="number">The value for the 'number' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function AddOne(ByVal number As Integer) As InvokeOperation(Of Integer)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("number", number)
            Me.ValidateMethod("AddOne", parameters)
            Return Me.InvokeOperation(Of Integer)("AddOne", GetType(Integer), parameters, True, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'AddOne' method of the DomainService.
        ''' </summary>
        ''' <param name="number">The value for the 'number' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function AddOneAsync(ByVal number As Integer, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of Integer))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("number", number)
            Me.ValidateMethod("AddOne", parameters)
            Return Me.InvokeOperationAsync(Of Integer)("AddOne", parameters, True, cancellationToken)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'GetLastDelay' method of the DomainService.
        ''' </summary>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function GetLastDelay(ByVal callback As Action(Of InvokeOperation(Of TimeSpan)), ByVal userState As Object) As InvokeOperation(Of TimeSpan)
            Me.ValidateMethod("GetLastDelay", Nothing)
            Return Me.InvokeOperation(Of TimeSpan)("GetLastDelay", GetType(TimeSpan), Nothing, True, callback, userState)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'GetLastDelay' method of the DomainService.
        ''' </summary>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function GetLastDelay() As InvokeOperation(Of TimeSpan)
            Me.ValidateMethod("GetLastDelay", Nothing)
            Return Me.InvokeOperation(Of TimeSpan)("GetLastDelay", GetType(TimeSpan), Nothing, True, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'GetLastDelay' method of the DomainService.
        ''' </summary>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function GetLastDelayAsync(Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of TimeSpan))
            Me.ValidateMethod("GetLastDelay", Nothing)
            Return Me.InvokeOperationAsync(Of TimeSpan)("GetLastDelay", Nothing, True, cancellationToken)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'Greet' method of the DomainService.
        ''' </summary>
        ''' <param name="client">The value for the 'client' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function Greet(ByVal client As String, ByVal callback As Action(Of InvokeOperation(Of String)), ByVal userState As Object) As InvokeOperation(Of String)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("client", client)
            Me.ValidateMethod("Greet", parameters)
            Return Me.InvokeOperation(Of String)("Greet", GetType(String), parameters, True, callback, userState)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'Greet' method of the DomainService.
        ''' </summary>
        ''' <param name="client">The value for the 'client' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function Greet(ByVal client As String) As InvokeOperation(Of String)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("client", client)
            Me.ValidateMethod("Greet", parameters)
            Return Me.InvokeOperation(Of String)("Greet", GetType(String), parameters, True, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'Greet' method of the DomainService.
        ''' </summary>
        ''' <param name="client">The value for the 'client' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function GreetAsync(ByVal client As String, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of String))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("client", client)
            Me.ValidateMethod("Greet", parameters)
            Return Me.InvokeOperationAsync(Of String)("Greet", parameters, True, cancellationToken)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'InvokeWithExceptionFirst' method of the DomainService.
        ''' </summary>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function InvokeWithExceptionFirst(ByVal callback As Action(Of InvokeOperation), ByVal userState As Object) As InvokeOperation
            Me.ValidateMethod("InvokeWithExceptionFirst", Nothing)
            Return Me.InvokeOperation("InvokeWithExceptionFirst", GetType(System.Void), Nothing, True, callback, userState)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'InvokeWithExceptionFirst' method of the DomainService.
        ''' </summary>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function InvokeWithExceptionFirst() As InvokeOperation
            Me.ValidateMethod("InvokeWithExceptionFirst", Nothing)
            Return Me.InvokeOperation("InvokeWithExceptionFirst", GetType(System.Void), Nothing, True, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'InvokeWithExceptionFirst' method of the DomainService.
        ''' </summary>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function InvokeWithExceptionFirstAsync(Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult)
            Me.ValidateMethod("InvokeWithExceptionFirst", Nothing)
            Return Me.InvokeOperationAsync("InvokeWithExceptionFirst", Nothing, True, cancellationToken)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'InvokeWithExceptionTask' method of the DomainService.
        ''' </summary>
        ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function InvokeWithExceptionTask(ByVal delay As Integer, ByVal callback As Action(Of InvokeOperation), ByVal userState As Object) As InvokeOperation
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("delay", delay)
            Me.ValidateMethod("InvokeWithExceptionTask", parameters)
            Return Me.InvokeOperation("InvokeWithExceptionTask", GetType(System.Void), parameters, True, callback, userState)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'InvokeWithExceptionTask' method of the DomainService.
        ''' </summary>
        ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function InvokeWithExceptionTask(ByVal delay As Integer) As InvokeOperation
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("delay", delay)
            Me.ValidateMethod("InvokeWithExceptionTask", parameters)
            Return Me.InvokeOperation("InvokeWithExceptionTask", GetType(System.Void), parameters, True, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'InvokeWithExceptionTask' method of the DomainService.
        ''' </summary>
        ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function InvokeWithExceptionTaskAsync(ByVal delay As Integer, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("delay", delay)
            Me.ValidateMethod("InvokeWithExceptionTask", parameters)
            Return Me.InvokeOperationAsync("InvokeWithExceptionTask", parameters, True, cancellationToken)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'SleepAndSetLastDelay' method of the DomainService.
        ''' </summary>
        ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function SleepAndSetLastDelay(ByVal delay As TimeSpan, ByVal callback As Action(Of InvokeOperation), ByVal userState As Object) As InvokeOperation
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("delay", delay)
            Me.ValidateMethod("SleepAndSetLastDelay", parameters)
            Return Me.InvokeOperation("SleepAndSetLastDelay", GetType(System.Void), parameters, True, callback, userState)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'SleepAndSetLastDelay' method of the DomainService.
        ''' </summary>
        ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function SleepAndSetLastDelay(ByVal delay As TimeSpan) As InvokeOperation
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("delay", delay)
            Me.ValidateMethod("SleepAndSetLastDelay", parameters)
            Return Me.InvokeOperation("SleepAndSetLastDelay", GetType(System.Void), parameters, True, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Asynchronously invokes the 'SleepAndSetLastDelay' method of the DomainService.
        ''' </summary>
        ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function SleepAndSetLastDelayAsync(ByVal delay As TimeSpan, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("delay", delay)
            Me.ValidateMethod("SleepAndSetLastDelay", parameters)
            Return Me.InvokeOperationAsync("SleepAndSetLastDelay", parameters, True, cancellationToken)
        End Function

        ''' <summary>
        ''' Creates a new EntityContainer for this DomainContext's EntitySets.
        ''' </summary>
        ''' <returns>A new container instance.</returns>
        Protected Overrides Function CreateEntityContainer() As EntityContainer
            Return New ServerSideAsyncDomainContextEntityContainer()
        End Function

        ''' <summary>
        ''' Service contract for the 'ServerSideAsyncDomainService' DomainService.
        ''' </summary>
        <ServiceContract()>
        Public Interface IServerSideAsyncDomainServiceContract

            ''' <summary>
            ''' Asynchronously invokes the 'AddNullableOne' operation.
            ''' </summary>
            ''' <param name="number">The value for the 'number' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(True),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/AddNullableOne", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/AddNullableOneResponse")>
            Function BeginAddNullableOne(ByVal number As Nullable(Of Integer), ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginAddNullableOne'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginAddNullableOne'.</param>
            ''' <returns>The 'Nullable`1' returned from the 'AddNullableOne' operation.</returns>
            Function EndAddNullableOne(ByVal result As IAsyncResult) As Nullable(Of Integer)

            ''' <summary>
            ''' Asynchronously invokes the 'AddOne' operation.
            ''' </summary>
            ''' <param name="number">The value for the 'number' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(True),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/AddOne", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/AddOneResponse")>
            Function BeginAddOne(ByVal number As Integer, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginAddOne'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginAddOne'.</param>
            ''' <returns>The 'Int32' returned from the 'AddOne' operation.</returns>
            Function EndAddOne(ByVal result As IAsyncResult) As Integer

            ''' <summary>
            ''' Asynchronously invokes the 'GetLastDelay' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(True),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/GetLastDelay", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/GetLastDelayResponse")>
            Function BeginGetLastDelay(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetLastDelay'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetLastDelay'.</param>
            ''' <returns>The 'TimeSpan' returned from the 'GetLastDelay' operation.</returns>
            Function EndGetLastDelay(ByVal result As IAsyncResult) As TimeSpan

            ''' <summary>
            ''' Asynchronously invokes the 'GetQueryableRange' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRange", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRangeResponse")>
            Function BeginGetQueryableRange(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetQueryableRange'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetQueryableRange'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetQueryableRange' operation.</returns>
            Function EndGetQueryableRange(ByVal result As IAsyncResult) As QueryResult(Of RangeItem)

            ''' <summary>
            ''' Asynchronously invokes the 'GetQueryableRangeWithExceptionFirst' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRangeWithExceptionFir" &
                "st", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRangeWithExceptionFir" &
                "stResponse")>
            Function BeginGetQueryableRangeWithExceptionFirst(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetQueryableRangeWithExceptionFirst'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetQueryableRangeWithExceptionFirst'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetQueryableRangeWithExceptionFirst' operation.</returns>
            Function EndGetQueryableRangeWithExceptionFirst(ByVal result As IAsyncResult) As QueryResult(Of RangeItem)

            ''' <summary>
            ''' Asynchronously invokes the 'GetQueryableRangeWithExceptionTask' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRangeWithExceptionTas" &
                "k", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/GetQueryableRangeWithExceptionTas" &
                "kResponse")>
            Function BeginGetQueryableRangeWithExceptionTask(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetQueryableRangeWithExceptionTask'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetQueryableRangeWithExceptionTask'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetQueryableRangeWithExceptionTask' operation.</returns>
            Function EndGetQueryableRangeWithExceptionTask(ByVal result As IAsyncResult) As QueryResult(Of RangeItem)

            ''' <summary>
            ''' Asynchronously invokes the 'GetRange' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/GetRange", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/GetRangeResponse")>
            Function BeginGetRange(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetRange'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetRange'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetRange' operation.</returns>
            Function EndGetRange(ByVal result As IAsyncResult) As QueryResult(Of RangeItem)

            ''' <summary>
            ''' Asynchronously invokes the 'GetRangeById' operation.
            ''' </summary>
            ''' <param name="id">The value for the 'id' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/GetRangeById", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/GetRangeByIdResponse")>
            Function BeginGetRangeById(ByVal id As Integer, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetRangeById'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetRangeById'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetRangeById' operation.</returns>
            Function EndGetRangeById(ByVal result As IAsyncResult) As QueryResult(Of RangeItem)

            ''' <summary>
            ''' Asynchronously invokes the 'GetRangeByIdWithExceptionFirst' operation.
            ''' </summary>
            ''' <param name="id">The value for the 'id' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/GetRangeByIdWithExceptionFirst", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/GetRangeByIdWithExceptionFirstRes" &
                "ponse")>
            Function BeginGetRangeByIdWithExceptionFirst(ByVal id As Integer, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetRangeByIdWithExceptionFirst'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetRangeByIdWithExceptionFirst'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetRangeByIdWithExceptionFirst' operation.</returns>
            Function EndGetRangeByIdWithExceptionFirst(ByVal result As IAsyncResult) As QueryResult(Of RangeItem)

            ''' <summary>
            ''' Asynchronously invokes the 'GetRangeByIdWithExceptionTask' operation.
            ''' </summary>
            ''' <param name="id">The value for the 'id' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/GetRangeByIdWithExceptionTask", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/GetRangeByIdWithExceptionTaskResp" &
                "onse")>
            Function BeginGetRangeByIdWithExceptionTask(ByVal id As Integer, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetRangeByIdWithExceptionTask'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetRangeByIdWithExceptionTask'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetRangeByIdWithExceptionTask' operation.</returns>
            Function EndGetRangeByIdWithExceptionTask(ByVal result As IAsyncResult) As QueryResult(Of RangeItem)

            ''' <summary>
            ''' Asynchronously invokes the 'Greet' operation.
            ''' </summary>
            ''' <param name="client">The value for the 'client' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(True),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/Greet", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/GreetResponse")>
            Function BeginGreet(ByVal client As String, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGreet'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGreet'.</param>
            ''' <returns>The 'String' returned from the 'Greet' operation.</returns>
            Function EndGreet(ByVal result As IAsyncResult) As String

            ''' <summary>
            ''' Asynchronously invokes the 'InvokeWithExceptionFirst' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(True),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/InvokeWithExceptionFirst", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/InvokeWithExceptionFirstResponse")>
            Function BeginInvokeWithExceptionFirst(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginInvokeWithExceptionFirst'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginInvokeWithExceptionFirst'.</param>
            Sub EndInvokeWithExceptionFirst(ByVal result As IAsyncResult)

            ''' <summary>
            ''' Asynchronously invokes the 'InvokeWithExceptionTask' operation.
            ''' </summary>
            ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(True),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/InvokeWithExceptionTask", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/InvokeWithExceptionTaskResponse")>
            Function BeginInvokeWithExceptionTask(ByVal delay As Integer, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginInvokeWithExceptionTask'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginInvokeWithExceptionTask'.</param>
            Sub EndInvokeWithExceptionTask(ByVal result As IAsyncResult)

            ''' <summary>
            ''' Asynchronously invokes the 'SleepAndSetLastDelay' operation.
            ''' </summary>
            ''' <param name="delay">The value for the 'delay' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(True),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/SleepAndSetLastDelay", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/SleepAndSetLastDelayResponse")>
            Function BeginSleepAndSetLastDelay(ByVal delay As TimeSpan, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginSleepAndSetLastDelay'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginSleepAndSetLastDelay'.</param>
            Sub EndSleepAndSetLastDelay(ByVal result As IAsyncResult)

            ''' <summary>
            ''' Asynchronously invokes the 'SubmitChanges' operation.
            ''' </summary>
            ''' <param name="changeSet">The change-set to submit.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/ServerSideAsyncDomainService/SubmitChanges", ReplyAction:="http://tempuri.org/ServerSideAsyncDomainService/SubmitChangesResponse")>
            Function BeginSubmitChanges(ByVal changeSet As IEnumerable(Of ChangeSetEntry), ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            ''' <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            Function EndSubmitChanges(ByVal result As IAsyncResult) As IEnumerable(Of ChangeSetEntry)
        End Interface

        Friend NotInheritable Class ServerSideAsyncDomainContextEntityContainer
            Inherits EntityContainer

            Public Sub New()
                MyBase.New
                Me.CreateEntitySet(Of RangeItem)(EntitySetOperations.All)
            End Sub
        End Class
    End Class
End Namespace
