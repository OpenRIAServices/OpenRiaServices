'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Compare Binary
Option Infer On
Option Strict On
Option Explicit On

Imports OpenRiaServices
Imports OpenRiaServices.Client
Imports OpenRiaServices.Client.Authentication
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations
Imports System.Linq
Imports System.Runtime.Serialization
Imports System.ServiceModel
Imports System.Threading
Imports System.Threading.Tasks

Namespace TestDomainServices
    
    ''' <summary>
    ''' The 'Address' class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/TestDomainServices"),  _
     RoundtripOriginal()>  _
    Partial Public NotInheritable Class Address
        Inherits ComplexObject
        
        Private _addressLine1 As String
        
        Private _addressLine2 As String
        
        Private _city As String
        
        Private _state As String
        
        Private _zip As String
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnAddressLine1Changing(ByVal value As String)
        End Sub
        Private Partial Sub OnAddressLine1Changed()
        End Sub
        Private Partial Sub OnAddressLine2Changing(ByVal value As String)
        End Sub
        Private Partial Sub OnAddressLine2Changed()
        End Sub
        Private Partial Sub OnCityChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnCityChanged()
        End Sub
        Private Partial Sub OnStateChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnStateChanged()
        End Sub
        Private Partial Sub OnZipChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnZipChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="Address"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'AddressLine1' value.
        ''' </summary>
        <DataMember()>  _
        Public Property AddressLine1() As String
            Get
                Return Me._addressLine1
            End Get
            Set
                If (String.Equals(Me._addressLine1, value) = false) Then
                    Me.OnAddressLine1Changing(value)
                    Me.RaiseDataMemberChanging("AddressLine1")
                    Me.ValidateProperty("AddressLine1", value)
                    Me._addressLine1 = value
                    Me.RaiseDataMemberChanged("AddressLine1")
                    Me.OnAddressLine1Changed
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'AddressLine2' value.
        ''' </summary>
        <DataMember()>  _
        Public Property AddressLine2() As String
            Get
                Return Me._addressLine2
            End Get
            Set
                If (String.Equals(Me._addressLine2, value) = false) Then
                    Me.OnAddressLine2Changing(value)
                    Me.RaiseDataMemberChanging("AddressLine2")
                    Me.ValidateProperty("AddressLine2", value)
                    Me._addressLine2 = value
                    Me.RaiseDataMemberChanged("AddressLine2")
                    Me.OnAddressLine2Changed
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'City' value.
        ''' </summary>
        <DataMember()>  _
        Public Property City() As String
            Get
                Return Me._city
            End Get
            Set
                If (String.Equals(Me._city, value) = false) Then
                    Me.OnCityChanging(value)
                    Me.RaiseDataMemberChanging("City")
                    Me.ValidateProperty("City", value)
                    Me._city = value
                    Me.RaiseDataMemberChanged("City")
                    Me.OnCityChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'State' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(2)>  _
        Public Property State() As String
            Get
                Return Me._state
            End Get
            Set
                If (String.Equals(Me._state, value) = false) Then
                    Me.OnStateChanging(value)
                    Me.RaiseDataMemberChanging("State")
                    Me.ValidateProperty("State", value)
                    Me._state = value
                    Me.RaiseDataMemberChanged("State")
                    Me.OnStateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Zip' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(5)>  _
        Public Property Zip() As String
            Get
                Return Me._zip
            End Get
            Set
                If (String.Equals(Me._zip, value) = false) Then
                    Me.OnZipChanging(value)
                    Me.RaiseDataMemberChanging("Zip")
                    Me.ValidateProperty("Zip", value)
                    Me._zip = value
                    Me.RaiseDataMemberChanged("Zip")
                    Me.OnZipChanged
                End If
            End Set
        End Property
    End Class
    
    ''' <summary>
    ''' The 'ComplexInheritance_Child' class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/TestDomainServices")>  _
    Partial Public NotInheritable Class ComplexInheritance_Child
        Inherits ComplexObject
        
        Private _a1 As Integer
        
        Private _a2 As Integer
        
        Private _z1 As Integer
        
        Private _z2 As Integer
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnA1Changing(ByVal value As Integer)
        End Sub
        Private Partial Sub OnA1Changed()
        End Sub
        Private Partial Sub OnA2Changing(ByVal value As Integer)
        End Sub
        Private Partial Sub OnA2Changed()
        End Sub
        Private Partial Sub OnZ1Changing(ByVal value As Integer)
        End Sub
        Private Partial Sub OnZ1Changed()
        End Sub
        Private Partial Sub OnZ2Changing(ByVal value As Integer)
        End Sub
        Private Partial Sub OnZ2Changed()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexInheritance_Child"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'A1' value.
        ''' </summary>
        <DataMember()>  _
        Public Property A1() As Integer
            Get
                Return Me._a1
            End Get
            Set
                If ((Me._a1 = value)  _
                            = false) Then
                    Me.OnA1Changing(value)
                    Me.RaiseDataMemberChanging("A1")
                    Me.ValidateProperty("A1", value)
                    Me._a1 = value
                    Me.RaiseDataMemberChanged("A1")
                    Me.OnA1Changed
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'A2' value.
        ''' </summary>
        <DataMember()>  _
        Public Property A2() As Integer
            Get
                Return Me._a2
            End Get
            Set
                If ((Me._a2 = value)  _
                            = false) Then
                    Me.OnA2Changing(value)
                    Me.RaiseDataMemberChanging("A2")
                    Me.ValidateProperty("A2", value)
                    Me._a2 = value
                    Me.RaiseDataMemberChanged("A2")
                    Me.OnA2Changed
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Z1' value.
        ''' </summary>
        <DataMember()>  _
        Public Property Z1() As Integer
            Get
                Return Me._z1
            End Get
            Set
                If ((Me._z1 = value)  _
                            = false) Then
                    Me.OnZ1Changing(value)
                    Me.RaiseDataMemberChanging("Z1")
                    Me.ValidateProperty("Z1", value)
                    Me._z1 = value
                    Me.RaiseDataMemberChanged("Z1")
                    Me.OnZ1Changed
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Z2' value.
        ''' </summary>
        <DataMember()>  _
        Public Property Z2() As Integer
            Get
                Return Me._z2
            End Get
            Set
                If ((Me._z2 = value)  _
                            = false) Then
                    Me.OnZ2Changing(value)
                    Me.RaiseDataMemberChanging("Z2")
                    Me.ValidateProperty("Z2", value)
                    Me._z2 = value
                    Me.RaiseDataMemberChanged("Z2")
                    Me.OnZ2Changed
                End If
            End Set
        End Property
    End Class
    
    ''' <summary>
    ''' The 'ComplexType_Parent' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/TestDomainServices"),  _
     RoundtripOriginal()>  _
    Partial Public NotInheritable Class ComplexType_Parent
        Inherits Entity
        
        Private _contactInfo As ContactInfo
        
        Private _id As Integer
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnContactInfoChanging(ByVal value As ContactInfo)
        End Sub
        Private Partial Sub OnContactInfoChanged()
        End Sub
        Private Partial Sub OnIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnIDChanged()
        End Sub
        Private Partial Sub OnTestAutoSyncInvoking(ByVal phone As Phone)
        End Sub
        Private Partial Sub OnTestAutoSyncInvoked()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexType_Parent"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        'The following attributes were not generated:
        '
        '- The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'TestDomainServices.DynamicTestValidator' that is not accessible in the client project 'MockProject'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        '- The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'Validate' on type 'TestDomainServices.DynamicTestValidator' that is not accessible in the client project 'MockProject'.
        '<CustomValidationAttribute(GetType(TestDomainServices.DynamicTestValidator), "Validate")> _
        '
        ''' <summary>
        ''' Gets or sets the 'ContactInfo' value.
        ''' </summary>
        <DataMember(),  _
         Display(AutoGenerateField:=false)>  _
        Public Property ContactInfo() As ContactInfo
            Get
                Return Me._contactInfo
            End Get
            Set
                If (Object.Equals(Me._contactInfo, value) = false) Then
                    Me.OnContactInfoChanging(value)
                    Me.RaiseDataMemberChanging("ContactInfo")
                    Me.ValidateProperty("ContactInfo", value)
                    Me._contactInfo = value
                    Me.RaiseDataMemberChanged("ContactInfo")
                    Me.OnContactInfoChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ID' value.
        ''' </summary>
        <DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key()>  _
        Public Property ID() As Integer
            Get
                Return Me._id
            End Get
            Set
                If ((Me._id = value)  _
                            = false) Then
                    Me.OnIDChanging(value)
                    Me.ValidateProperty("ID", value)
                    Me._id = value
                    Me.RaisePropertyChanged("ID")
                    Me.OnIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'TestAutoSync' action has been invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property IsTestAutoSyncInvoked() As Boolean
            Get
                Return MyBase.IsActionInvoked("TestAutoSync")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'TestAutoSync' method can be invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property CanTestAutoSync() As Boolean
            Get
                Return MyBase.CanInvokeAction("TestAutoSync")
            End Get
        End Property
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._id
        End Function
        
        ''' <summary>
        ''' Invokes the 'TestAutoSync' action on this entity.
        ''' </summary>
        ''' <param name="phone">The value to pass to the server method's 'phone' parameter.</param>
        <EntityAction("TestAutoSync", AllowMultipleInvocations:=false)>  _
        Public Sub TestAutoSync(ByVal phone As Phone)
            Me.OnTestAutoSyncInvoking(phone)
            MyBase.InvokeAction("TestAutoSync", phone)
            Me.OnTestAutoSyncInvoked
        End Sub
    End Class
    
    ''' <summary>
    ''' The 'ComplexTypeInheritance_EntityGrandchild' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/TestDomainServices")>  _
    Partial Public NotInheritable Class ComplexTypeInheritance_EntityGrandchild
        Inherits ComplexTypeInheritance_EntityGrandparent
        
        Private _child As ComplexInheritance_Child
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnChildChanging(ByVal value As ComplexInheritance_Child)
        End Sub
        Private Partial Sub OnChildChanged()
        End Sub
        Private Partial Sub OnChooseHighestStubOrChildInvoking(ByVal child As ComplexInheritance_Child, ByVal children() As ComplexInheritance_Child)
        End Sub
        Private Partial Sub OnChooseHighestStubOrChildInvoked()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexTypeInheritance_EntityGrandchild"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'Child' value.
        ''' </summary>
        <DataMember(),  _
         Display(AutoGenerateField:=false)>  _
        Public Property Child() As ComplexInheritance_Child
            Get
                Return Me._child
            End Get
            Set
                If (Object.Equals(Me._child, value) = false) Then
                    Me.OnChildChanging(value)
                    Me.RaiseDataMemberChanging("Child")
                    Me.ValidateProperty("Child", value)
                    Me._child = value
                    Me.RaiseDataMemberChanged("Child")
                    Me.OnChildChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'ChooseHighestStubOrChild' action has been invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property IsChooseHighestStubOrChildInvoked() As Boolean
            Get
                Return MyBase.IsActionInvoked("ChooseHighestStubOrChild")
            End Get
        End Property
        
        ''' <summary>
        ''' Gets a value indicating whether the 'ChooseHighestStubOrChild' method can be invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=false)>  _
        Public ReadOnly Property CanChooseHighestStubOrChild() As Boolean
            Get
                Return MyBase.CanInvokeAction("ChooseHighestStubOrChild")
            End Get
        End Property
        
        ''' <summary>
        ''' Invokes the 'ChooseHighestStubOrChild' action on this entity.
        ''' </summary>
        ''' <param name="child">The value to pass to the server method's 'child' parameter.</param>
        ''' <param name="children">The value to pass to the server method's 'children' parameter.</param>
        <EntityAction("ChooseHighestStubOrChild", AllowMultipleInvocations:=false)>  _
        Public Sub ChooseHighestStubOrChild(ByVal child As ComplexInheritance_Child, ByVal children() As ComplexInheritance_Child)
            Me.OnChooseHighestStubOrChildInvoking(child, children)
            MyBase.InvokeAction("ChooseHighestStubOrChild", child, children)
            Me.OnChooseHighestStubOrChildInvoked
        End Sub
    End Class
    
    ''' <summary>
    ''' The 'ComplexTypeInheritance_EntityGrandparent' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/TestDomainServices"),  _
     KnownType(GetType(ComplexTypeInheritance_EntityGrandchild))>  _
    Partial Public Class ComplexTypeInheritance_EntityGrandparent
        Inherits Entity
        
        Private _id As Integer
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnIDChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexTypeInheritance_EntityGrandparent"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'ID' value.
        ''' </summary>
        <DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property ID() As Integer
            Get
                Return Me._id
            End Get
            Set
                If ((Me._id = value)  _
                            = false) Then
                    Me.OnIDChanging(value)
                    Me.ValidateProperty("ID", value)
                    Me._id = value
                    Me.RaisePropertyChanged("ID")
                    Me.OnIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._id
        End Function
    End Class
    
    ''' <summary>
    ''' The DomainContext corresponding to the 'ComplexTypes_DomainService' DomainService.
    ''' </summary>
    Partial Public NotInheritable Class ComplexTypes_DomainContext
        Inherits DomainContext
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexTypes_DomainContext"/> class.
        ''' </summary>
        Public Sub New()
            Me.New(New Uri("TestDomainServices-ComplexTypes_DomainService.svc", UriKind.Relative))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexTypes_DomainContext"/> class with the specified service URI.
        ''' </summary>
        ''' <param name="serviceUri">The ComplexTypes_DomainService service URI.</param>
        Public Sub New(ByVal serviceUri As Uri)
            Me.New(DomainContext.CreateDomainClient(GetType(IComplexTypes_DomainServiceContract), serviceUri, false))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexTypes_DomainContext"/> class with the specified <paramref name="domainClient"/>.
        ''' </summary>
        ''' <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        Public Sub New(ByVal domainClient As DomainClient)
            MyBase.New(domainClient)
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets the set of <see cref="ComplexTypeInheritance_EntityGrandparent"/> entity instances that have been loaded into this <see cref="ComplexTypes_DomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property ComplexTypeInheritance_EntityGrandparents() As EntitySet(Of ComplexTypeInheritance_EntityGrandparent)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of ComplexTypeInheritance_EntityGrandparent)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="ComplexTypeInheritance_EntityGrandparent"/> entity instances using the 'GetStub' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="ComplexTypeInheritance_EntityGrandparent"/> entity instances.</returns>
        Public Function GetStubQuery() As EntityQuery(Of ComplexTypeInheritance_EntityGrandparent)
            Me.ValidateMethod("GetStubQuery", Nothing)
            Return MyBase.CreateQuery(Of ComplexTypeInheritance_EntityGrandparent)("GetStub", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Invokes the 'ChooseHighestStubOrChild' method of the specified <see cref="ComplexTypeInheritance_EntityGrandchild"/> entity.
        ''' </summary>
        ''' <param name="grandchild">The <see cref="ComplexTypeInheritance_EntityGrandchild"/> entity instance.</param>
        ''' <param name="child">The value for the 'child' parameter for this action.</param>
        ''' <param name="children">The value for the 'children' parameter for this action.</param>
        Public Sub ChooseHighestStubOrChild(ByVal grandchild As ComplexTypeInheritance_EntityGrandchild, ByVal child As ComplexInheritance_Child, ByVal children() As ComplexInheritance_Child)
            grandchild.ChooseHighestStubOrChild(child, children)
        End Sub
        
        ''' <summary>
        ''' Asynchronously invokes the 'GetHighestChild' method of the DomainService.
        ''' </summary>
        ''' <param name="child">The value for the 'child' parameter of this action.</param>
        ''' <param name="children">The value for the 'children' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function GetHighestChild(ByVal child As ComplexInheritance_Child, ByVal children() As ComplexInheritance_Child, ByVal callback As Action(Of InvokeOperation(Of ComplexInheritance_Child)), ByVal userState As Object) As InvokeOperation(Of ComplexInheritance_Child)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("child", child)
            parameters.Add("children", children)
            Me.ValidateMethod("GetHighestChild", parameters)
            Return Me.InvokeOperation(Of ComplexInheritance_Child)("GetHighestChild", GetType(ComplexInheritance_Child), parameters, true, callback, userState)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'GetHighestChild' method of the DomainService.
        ''' </summary>
        ''' <param name="child">The value for the 'child' parameter of this action.</param>
        ''' <param name="children">The value for the 'children' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function GetHighestChild(ByVal child As ComplexInheritance_Child, ByVal children() As ComplexInheritance_Child) As InvokeOperation(Of ComplexInheritance_Child)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("child", child)
            parameters.Add("children", children)
            Me.ValidateMethod("GetHighestChild", parameters)
            Return Me.InvokeOperation(Of ComplexInheritance_Child)("GetHighestChild", GetType(ComplexInheritance_Child), parameters, true, Nothing, Nothing)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'GetHighestChild' method of the DomainService.
        ''' </summary>
        ''' <param name="child">The value for the 'child' parameter of this action.</param>
        ''' <param name="children">The value for the 'children' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function GetHighestChildAsync(ByVal child As ComplexInheritance_Child, ByVal children() As ComplexInheritance_Child, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of ComplexInheritance_Child))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("child", child)
            parameters.Add("children", children)
            Me.ValidateMethod("GetHighestChild", parameters)
            Return Me.InvokeOperationAsync(Of ComplexInheritance_Child)("GetHighestChild", parameters, true, cancellationToken)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'GetInheritedMember' method of the DomainService.
        ''' </summary>
        ''' <param name="child">The value for the 'child' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function GetInheritedMember(ByVal child As ComplexInheritance_Child, ByVal callback As Action(Of InvokeOperation(Of ComplexInheritance_Child)), ByVal userState As Object) As InvokeOperation(Of ComplexInheritance_Child)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("child", child)
            Me.ValidateMethod("GetInheritedMember", parameters)
            Return Me.InvokeOperation(Of ComplexInheritance_Child)("GetInheritedMember", GetType(ComplexInheritance_Child), parameters, true, callback, userState)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'GetInheritedMember' method of the DomainService.
        ''' </summary>
        ''' <param name="child">The value for the 'child' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function GetInheritedMember(ByVal child As ComplexInheritance_Child) As InvokeOperation(Of ComplexInheritance_Child)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("child", child)
            Me.ValidateMethod("GetInheritedMember", parameters)
            Return Me.InvokeOperation(Of ComplexInheritance_Child)("GetInheritedMember", GetType(ComplexInheritance_Child), parameters, true, Nothing, Nothing)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'GetInheritedMember' method of the DomainService.
        ''' </summary>
        ''' <param name="child">The value for the 'child' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function GetInheritedMemberAsync(ByVal child As ComplexInheritance_Child, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of ComplexInheritance_Child))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("child", child)
            Me.ValidateMethod("GetInheritedMember", parameters)
            Return Me.InvokeOperationAsync(Of ComplexInheritance_Child)("GetInheritedMember", parameters, true, cancellationToken)
        End Function
        
        ''' <summary>
        ''' Creates a new EntityContainer for this DomainContext's EntitySets.
        ''' </summary>
        ''' <returns>A new container instance.</returns>
        Protected Overrides Function CreateEntityContainer() As EntityContainer
            Return New ComplexTypes_DomainContextEntityContainer()
        End Function
        
        ''' <summary>
        ''' Service contract for the 'ComplexTypes_DomainService' DomainService.
        ''' </summary>
        <ServiceContract(),  _
         ServiceKnownType(GetType(Global.TestDomainServices.ComplexInheritance_Child)),  _
         ServiceKnownType(GetType(TestDomainServices.ComplexInheritance_Child()))>  _
        Public Interface IComplexTypes_DomainServiceContract
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetHighestChild' operation.
            ''' </summary>
            ''' <param name="child">The value for the 'child' parameter of this action.</param>
            ''' <param name="children">The value for the 'children' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(true),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/ComplexTypes_DomainService/GetHighestChild", ReplyAction:="http://tempuri.org/ComplexTypes_DomainService/GetHighestChildResponse")>  _
            Function BeginGetHighestChild(ByVal child As ComplexInheritance_Child, ByVal children() As ComplexInheritance_Child, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetHighestChild'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetHighestChild'.</param>
            ''' <returns>The 'ComplexInheritance_Child' returned from the 'GetHighestChild' operation.</returns>
            Function EndGetHighestChild(ByVal result As IAsyncResult) As ComplexInheritance_Child
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetInheritedMember' operation.
            ''' </summary>
            ''' <param name="child">The value for the 'child' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(true),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/ComplexTypes_DomainService/GetInheritedMember", ReplyAction:="http://tempuri.org/ComplexTypes_DomainService/GetInheritedMemberResponse")>  _
            Function BeginGetInheritedMember(ByVal child As ComplexInheritance_Child, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetInheritedMember'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetInheritedMember'.</param>
            ''' <returns>The 'ComplexInheritance_Child' returned from the 'GetInheritedMember' operation.</returns>
            Function EndGetInheritedMember(ByVal result As IAsyncResult) As ComplexInheritance_Child
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetStub' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/ComplexTypes_DomainService/GetStub", ReplyAction:="http://tempuri.org/ComplexTypes_DomainService/GetStubResponse")>  _
            Function BeginGetStub(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetStub'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetStub'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetStub' operation.</returns>
            Function EndGetStub(ByVal result As IAsyncResult) As QueryResult(Of ComplexTypeInheritance_EntityGrandparent)
            
            ''' <summary>
            ''' Asynchronously invokes the 'SubmitChanges' operation.
            ''' </summary>
            ''' <param name="changeSet">The change-set to submit.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/ComplexTypes_DomainService/SubmitChanges", ReplyAction:="http://tempuri.org/ComplexTypes_DomainService/SubmitChangesResponse")>  _
            Function BeginSubmitChanges(ByVal changeSet As IEnumerable(Of ChangeSetEntry), ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            ''' <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            Function EndSubmitChanges(ByVal result As IAsyncResult) As IEnumerable(Of ChangeSetEntry)
        End Interface
        
        Friend NotInheritable Class ComplexTypes_DomainContextEntityContainer
            Inherits EntityContainer
            
            Public Sub New()
                MyBase.New
                Me.CreateEntitySet(Of ComplexTypeInheritance_EntityGrandparent)(EntitySetOperations.None)
            End Sub
        End Class
    End Class
    
    ''' <summary>
    ''' The DomainContext corresponding to the 'ComplexTypes_InvokeOperationsOnly' DomainService.
    ''' </summary>
    Partial Public NotInheritable Class ComplexTypes_InvokeOperationsOnly
        Inherits DomainContext
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexTypes_InvokeOperationsOnly"/> class.
        ''' </summary>
        Public Sub New()
            Me.New(New Uri("TestDomainServices-ComplexTypes_InvokeOperationsOnly.svc", UriKind.Relative))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexTypes_InvokeOperationsOnly"/> class with the specified service URI.
        ''' </summary>
        ''' <param name="serviceUri">The ComplexTypes_InvokeOperationsOnly service URI.</param>
        Public Sub New(ByVal serviceUri As Uri)
            Me.New(DomainContext.CreateDomainClient(GetType(IComplexTypes_InvokeOperationsOnlyContract), serviceUri, false))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexTypes_InvokeOperationsOnly"/> class with the specified <paramref name="domainClient"/>.
        ''' </summary>
        ''' <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        Public Sub New(ByVal domainClient As DomainClient)
            MyBase.New(domainClient)
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        ''' </summary>
        ''' <param name="address">The value for the 'address' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function RoundtripAddress(ByVal address As Address, ByVal callback As Action(Of InvokeOperation(Of Address)), ByVal userState As Object) As InvokeOperation(Of Address)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("address", address)
            Me.ValidateMethod("RoundtripAddress", parameters)
            Return Me.InvokeOperation(Of Address)("RoundtripAddress", GetType(Address), parameters, true, callback, userState)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        ''' </summary>
        ''' <param name="address">The value for the 'address' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function RoundtripAddress(ByVal address As Address) As InvokeOperation(Of Address)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("address", address)
            Me.ValidateMethod("RoundtripAddress", parameters)
            Return Me.InvokeOperation(Of Address)("RoundtripAddress", GetType(Address), parameters, true, Nothing, Nothing)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        ''' </summary>
        ''' <param name="address">The value for the 'address' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function RoundtripAddressAsync(ByVal address As Address, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of Address))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("address", address)
            Me.ValidateMethod("RoundtripAddress", parameters)
            Return Me.InvokeOperationAsync(Of Address)("RoundtripAddress", parameters, true, cancellationToken)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'UpdateContact' method of the DomainService.
        ''' </summary>
        ''' <param name="contact">The value for the 'contact' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function UpdateContact(ByVal contact As ContactInfo, ByVal callback As Action(Of InvokeOperation), ByVal userState As Object) As InvokeOperation
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("contact", contact)
            Me.ValidateMethod("UpdateContact", parameters)
            Return Me.InvokeOperation("UpdateContact", GetType(System.Void), parameters, true, callback, userState)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'UpdateContact' method of the DomainService.
        ''' </summary>
        ''' <param name="contact">The value for the 'contact' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function UpdateContact(ByVal contact As ContactInfo) As InvokeOperation
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("contact", contact)
            Me.ValidateMethod("UpdateContact", parameters)
            Return Me.InvokeOperation("UpdateContact", GetType(System.Void), parameters, true, Nothing, Nothing)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'UpdateContact' method of the DomainService.
        ''' </summary>
        ''' <param name="contact">The value for the 'contact' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function UpdateContactAsync(ByVal contact As ContactInfo, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("contact", contact)
            Me.ValidateMethod("UpdateContact", parameters)
            Return Me.InvokeOperationAsync("UpdateContact", parameters, true, cancellationToken)
        End Function
        
        ''' <summary>
        ''' Creates a new EntityContainer for this DomainContext's EntitySets.
        ''' </summary>
        ''' <returns>A new container instance.</returns>
        Protected Overrides Function CreateEntityContainer() As EntityContainer
            Return New ComplexTypes_InvokeOperationsOnlyEntityContainer()
        End Function
        
        ''' <summary>
        ''' Service contract for the 'ComplexTypes_InvokeOperationsOnly' DomainService.
        ''' </summary>
        <ServiceContract()>  _
        Public Interface IComplexTypes_InvokeOperationsOnlyContract
            
            ''' <summary>
            ''' Asynchronously invokes the 'RoundtripAddress' operation.
            ''' </summary>
            ''' <param name="address">The value for the 'address' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(true),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/ComplexTypes_InvokeOperationsOnly/RoundtripAddress", ReplyAction:="http://tempuri.org/ComplexTypes_InvokeOperationsOnly/RoundtripAddressResponse")>  _
            Function BeginRoundtripAddress(ByVal address As Address, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginRoundtripAddress'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginRoundtripAddress'.</param>
            ''' <returns>The 'Address' returned from the 'RoundtripAddress' operation.</returns>
            Function EndRoundtripAddress(ByVal result As IAsyncResult) As Address
            
            ''' <summary>
            ''' Asynchronously invokes the 'UpdateContact' operation.
            ''' </summary>
            ''' <param name="contact">The value for the 'contact' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(true),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/ComplexTypes_InvokeOperationsOnly/UpdateContact", ReplyAction:="http://tempuri.org/ComplexTypes_InvokeOperationsOnly/UpdateContactResponse")>  _
            Function BeginUpdateContact(ByVal contact As ContactInfo, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginUpdateContact'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginUpdateContact'.</param>
            Sub EndUpdateContact(ByVal result As IAsyncResult)
        End Interface
        
        Friend NotInheritable Class ComplexTypes_InvokeOperationsOnlyEntityContainer
            Inherits EntityContainer
            
            Public Sub New()
                MyBase.New
            End Sub
        End Class
    End Class
    
    ''' <summary>
    ''' The DomainContext corresponding to the 'ComplexTypes_TestService' DomainService.
    ''' </summary>
    Partial Public NotInheritable Class ComplexTypes_TestContext
        Inherits DomainContext
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexTypes_TestContext"/> class.
        ''' </summary>
        Public Sub New()
            Me.New(New Uri("TestDomainServices-ComplexTypes_TestService.svc", UriKind.Relative))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexTypes_TestContext"/> class with the specified service URI.
        ''' </summary>
        ''' <param name="serviceUri">The ComplexTypes_TestService service URI.</param>
        Public Sub New(ByVal serviceUri As Uri)
            Me.New(DomainContext.CreateDomainClient(GetType(IComplexTypes_TestServiceContract), serviceUri, false))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ComplexTypes_TestContext"/> class with the specified <paramref name="domainClient"/>.
        ''' </summary>
        ''' <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        Public Sub New(ByVal domainClient As DomainClient)
            MyBase.New(domainClient)
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets the set of <see cref="ComplexType_Parent"/> entity instances that have been loaded into this <see cref="ComplexTypes_TestContext"/> instance.
        ''' </summary>
        Public ReadOnly Property ComplexType_Parents() As EntitySet(Of ComplexType_Parent)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of ComplexType_Parent)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="ComplexType_Parent"/> entity instances using the 'GetParents' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="ComplexType_Parent"/> entity instances.</returns>
        Public Function GetParentsQuery() As EntityQuery(Of ComplexType_Parent)
            Me.ValidateMethod("GetParentsQuery", Nothing)
            Return MyBase.CreateQuery(Of ComplexType_Parent)("GetParents", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Invokes the 'TestAutoSync' method of the specified <see cref="ComplexType_Parent"/> entity.
        ''' </summary>
        ''' <param name="parent">The <see cref="ComplexType_Parent"/> entity instance.</param>
        ''' <param name="phone">The value for the 'phone' parameter for this action.</param>
        Public Sub TestAutoSync(ByVal parent As ComplexType_Parent, ByVal phone As Phone)
            parent.TestAutoSync(phone)
        End Sub
        
        ''' <summary>
        ''' Asynchronously invokes the 'ReturnHomeAddress' method of the DomainService.
        ''' </summary>
        ''' <param name="contact">The value for the 'contact' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function ReturnHomeAddress(ByVal contact As ContactInfo, ByVal callback As Action(Of InvokeOperation(Of Address)), ByVal userState As Object) As InvokeOperation(Of Address)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("contact", contact)
            Me.ValidateMethod("ReturnHomeAddress", parameters)
            Return Me.InvokeOperation(Of Address)("ReturnHomeAddress", GetType(Address), parameters, true, callback, userState)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'ReturnHomeAddress' method of the DomainService.
        ''' </summary>
        ''' <param name="contact">The value for the 'contact' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function ReturnHomeAddress(ByVal contact As ContactInfo) As InvokeOperation(Of Address)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("contact", contact)
            Me.ValidateMethod("ReturnHomeAddress", parameters)
            Return Me.InvokeOperation(Of Address)("ReturnHomeAddress", GetType(Address), parameters, true, Nothing, Nothing)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'ReturnHomeAddress' method of the DomainService.
        ''' </summary>
        ''' <param name="contact">The value for the 'contact' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function ReturnHomeAddressAsync(ByVal contact As ContactInfo, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of Address))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("contact", contact)
            Me.ValidateMethod("ReturnHomeAddress", parameters)
            Return Me.InvokeOperationAsync(Of Address)("ReturnHomeAddress", parameters, true, cancellationToken)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        ''' </summary>
        ''' <param name="address">The value for the 'address' parameter of this action.</param>
        ''' <param name="callback">Callback to invoke when the operation completes.</param>
        ''' <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function RoundtripAddress(ByVal address As Address, ByVal callback As Action(Of InvokeOperation(Of Address)), ByVal userState As Object) As InvokeOperation(Of Address)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("address", address)
            Me.ValidateMethod("RoundtripAddress", parameters)
            Return Me.InvokeOperation(Of Address)("RoundtripAddress", GetType(Address), parameters, true, callback, userState)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        ''' </summary>
        ''' <param name="address">The value for the 'address' parameter of this action.</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function RoundtripAddress(ByVal address As Address) As InvokeOperation(Of Address)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("address", address)
            Me.ValidateMethod("RoundtripAddress", parameters)
            Return Me.InvokeOperation(Of Address)("RoundtripAddress", GetType(Address), parameters, true, Nothing, Nothing)
        End Function
        
        ''' <summary>
        ''' Asynchronously invokes the 'RoundtripAddress' method of the DomainService.
        ''' </summary>
        ''' <param name="address">The value for the 'address' parameter of this action.</param>
        ''' <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
        ''' <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Function RoundtripAddressAsync(ByVal address As Address, Optional ByVal cancellationToken As CancellationToken = Nothing) As System.Threading.Tasks.Task(Of InvokeResult(Of Address))
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("address", address)
            Me.ValidateMethod("RoundtripAddress", parameters)
            Return Me.InvokeOperationAsync(Of Address)("RoundtripAddress", parameters, true, cancellationToken)
        End Function
        
        ''' <summary>
        ''' Creates a new EntityContainer for this DomainContext's EntitySets.
        ''' </summary>
        ''' <returns>A new container instance.</returns>
        Protected Overrides Function CreateEntityContainer() As EntityContainer
            Return New ComplexTypes_TestContextEntityContainer()
        End Function
        
        ''' <summary>
        ''' Service contract for the 'ComplexTypes_TestService' DomainService.
        ''' </summary>
        <ServiceContract(),  _
         ServiceKnownType(GetType(Global.TestDomainServices.Phone))>  _
        Public Interface IComplexTypes_TestServiceContract
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetParents' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(false),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/ComplexTypes_TestService/GetParents", ReplyAction:="http://tempuri.org/ComplexTypes_TestService/GetParentsResponse")>  _
            Function BeginGetParents(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetParents'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetParents'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetParents' operation.</returns>
            Function EndGetParents(ByVal result As IAsyncResult) As QueryResult(Of ComplexType_Parent)
            
            ''' <summary>
            ''' Asynchronously invokes the 'ReturnHomeAddress' operation.
            ''' </summary>
            ''' <param name="contact">The value for the 'contact' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(true),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/ComplexTypes_TestService/ReturnHomeAddress", ReplyAction:="http://tempuri.org/ComplexTypes_TestService/ReturnHomeAddressResponse")>  _
            Function BeginReturnHomeAddress(ByVal contact As ContactInfo, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginReturnHomeAddress'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginReturnHomeAddress'.</param>
            ''' <returns>The 'Address' returned from the 'ReturnHomeAddress' operation.</returns>
            Function EndReturnHomeAddress(ByVal result As IAsyncResult) As Address
            
            ''' <summary>
            ''' Asynchronously invokes the 'RoundtripAddress' operation.
            ''' </summary>
            ''' <param name="address">The value for the 'address' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(true),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/ComplexTypes_TestService/RoundtripAddress", ReplyAction:="http://tempuri.org/ComplexTypes_TestService/RoundtripAddressResponse")>  _
            Function BeginRoundtripAddress(ByVal address As Address, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginRoundtripAddress'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginRoundtripAddress'.</param>
            ''' <returns>The 'Address' returned from the 'RoundtripAddress' operation.</returns>
            Function EndRoundtripAddress(ByVal result As IAsyncResult) As Address
            
            ''' <summary>
            ''' Asynchronously invokes the 'SubmitChanges' operation.
            ''' </summary>
            ''' <param name="changeSet">The change-set to submit.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/ComplexTypes_TestService/SubmitChanges", ReplyAction:="http://tempuri.org/ComplexTypes_TestService/SubmitChangesResponse")>  _
            Function BeginSubmitChanges(ByVal changeSet As IEnumerable(Of ChangeSetEntry), ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            ''' <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            Function EndSubmitChanges(ByVal result As IAsyncResult) As IEnumerable(Of ChangeSetEntry)
        End Interface
        
        Friend NotInheritable Class ComplexTypes_TestContextEntityContainer
            Inherits EntityContainer
            
            Public Sub New()
                MyBase.New
                Me.CreateEntitySet(Of ComplexType_Parent)(EntitySetOperations.Edit)
            End Sub
        End Class
    End Class
    
    'The following attributes were not generated:
    '
    '- The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'TestDomainServices.DynamicTestValidator' that is not accessible in the client project 'MockProject'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
    '- The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'Validate' on type 'TestDomainServices.DynamicTestValidator' that is not accessible in the client project 'MockProject'.
    '<CustomValidationAttribute(GetType(TestDomainServices.DynamicTestValidator), "Validate")> _
    '
    ''' <summary>
    ''' The 'ContactInfo' class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/TestDomainServices"),  _
     RoundtripOriginal()>  _
    Partial Public NotInheritable Class ContactInfo
        Inherits ComplexObject
        
        Private _homeAddress As Address
        
        Private _name As String
        
        Private _primaryPhone As Phone
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnHomeAddressChanging(ByVal value As Address)
        End Sub
        Private Partial Sub OnHomeAddressChanged()
        End Sub
        Private Partial Sub OnNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnNameChanged()
        End Sub
        Private Partial Sub OnPrimaryPhoneChanging(ByVal value As Phone)
        End Sub
        Private Partial Sub OnPrimaryPhoneChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="ContactInfo"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'HomeAddress' value.
        ''' </summary>
        <DataMember(),  _
         Display(AutoGenerateField:=false)>  _
        Public Property HomeAddress() As Address
            Get
                Return Me._homeAddress
            End Get
            Set
                If (Object.Equals(Me._homeAddress, value) = false) Then
                    Me.OnHomeAddressChanging(value)
                    Me.RaiseDataMemberChanging("HomeAddress")
                    Me.ValidateProperty("HomeAddress", value)
                    Me._homeAddress = value
                    Me.RaiseDataMemberChanged("HomeAddress")
                    Me.OnHomeAddressChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Name' value.
        ''' </summary>
        <DataMember()>  _
        Public Property Name() As String
            Get
                Return Me._name
            End Get
            Set
                If (String.Equals(Me._name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.RaiseDataMemberChanging("Name")
                    Me.ValidateProperty("Name", value)
                    Me._name = value
                    Me.RaiseDataMemberChanged("Name")
                    Me.OnNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'PrimaryPhone' value.
        ''' </summary>
        <DataMember(),  _
         Display(AutoGenerateField:=false)>  _
        Public Property PrimaryPhone() As Phone
            Get
                Return Me._primaryPhone
            End Get
            Set
                If (Object.Equals(Me._primaryPhone, value) = false) Then
                    Me.OnPrimaryPhoneChanging(value)
                    Me.RaiseDataMemberChanging("PrimaryPhone")
                    Me.ValidateProperty("PrimaryPhone", value)
                    Me._primaryPhone = value
                    Me.RaiseDataMemberChanged("PrimaryPhone")
                    Me.OnPrimaryPhoneChanged
                End If
            End Set
        End Property
    End Class
    
    'The following attributes were not generated:
    '
    '- The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'TestDomainServices.DynamicTestValidator' that is not accessible in the client project 'MockProject'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
    '- The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'Validate' on type 'TestDomainServices.DynamicTestValidator' that is not accessible in the client project 'MockProject'.
    '<CustomValidationAttribute(GetType(TestDomainServices.DynamicTestValidator), "Validate")> _
    '
    ''' <summary>
    ''' The 'Phone' class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/TestDomainServices"),  _
     RoundtripOriginal()>  _
    Partial Public NotInheritable Class Phone
        Inherits ComplexObject
        
        Private _areaCode As String
        
        Private _number As String
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnAreaCodeChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnAreaCodeChanged()
        End Sub
        Private Partial Sub OnNumberChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnNumberChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="Phone"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'AreaCode' value.
        ''' </summary>
        <DataMember(),  _
         Required(),  _
         StringLength(3)>  _
        Public Property AreaCode() As String
            Get
                Return Me._areaCode
            End Get
            Set
                If (String.Equals(Me._areaCode, value) = false) Then
                    Me.OnAreaCodeChanging(value)
                    Me.RaiseDataMemberChanging("AreaCode")
                    Me.ValidateProperty("AreaCode", value)
                    Me._areaCode = value
                    Me.RaiseDataMemberChanged("AreaCode")
                    Me.OnAreaCodeChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Number' value.
        ''' </summary>
        <DataMember(),  _
         Required()>  _
        Public Property Number() As String
            Get
                Return Me._number
            End Get
            Set
                If (String.Equals(Me._number, value) = false) Then
                    Me.OnNumberChanging(value)
                    Me.RaiseDataMemberChanging("Number")
                    Me.ValidateProperty("Number", value)
                    Me._number = value
                    Me.RaiseDataMemberChanged("Number")
                    Me.OnNumberChanged
                End If
            End Set
        End Property
    End Class
End Namespace
