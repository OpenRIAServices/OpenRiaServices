//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestDomainServices.TypeNameConflictResolution
{
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'BaseTypeConflicts' DomainService.
    /// </summary>
    public sealed partial class BaseTypeConflicts : global::OpenRiaServices.DomainServices.Client.DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseTypeConflicts"/> class.
        /// </summary>
        public BaseTypeConflicts() : 
                this(new global::System.Uri("TestDomainServices-TypeNameConflictResolution-BaseTypeConflicts.svc", global::System.UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseTypeConflicts"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The BaseTypeConflicts service URI.</param>
        public BaseTypeConflicts(global::System.Uri serviceUri) : 
                this(global::OpenRiaServices.DomainServices.Client.DomainContext.CreateDomainClient(typeof(global::TestDomainServices.TypeNameConflictResolution.BaseTypeConflicts.IBaseTypeConflictsContract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseTypeConflicts"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public BaseTypeConflicts(global::OpenRiaServices.DomainServices.Client.DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="DomainContext"/> entity instances that have been loaded into this <see cref="BaseTypeConflicts"/> instance.
        /// </summary>
        public global::OpenRiaServices.DomainServices.Client.EntitySet<global::TestDomainServices.TypeNameConflictResolution.DomainContext> DomainContexts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::TestDomainServices.TypeNameConflictResolution.DomainContext>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Entity"/> entity instances that have been loaded into this <see cref="BaseTypeConflicts"/> instance.
        /// </summary>
        public global::OpenRiaServices.DomainServices.Client.EntitySet<global::TestDomainServices.TypeNameConflictResolution.Entity> Entities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::TestDomainServices.TypeNameConflictResolution.Entity>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DomainContext"/> entity instances using the 'GetDataContexts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DomainContext"/> entity instances.</returns>
        public global::OpenRiaServices.DomainServices.Client.EntityQuery<global::TestDomainServices.TypeNameConflictResolution.DomainContext> GetDataContextsQuery()
        {
            this.ValidateMethod("GetDataContextsQuery", null);
            return base.CreateQuery<global::TestDomainServices.TypeNameConflictResolution.DomainContext>("GetDataContexts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Entity"/> entity instances using the 'GetEntities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Entity"/> entity instances.</returns>
        public global::OpenRiaServices.DomainServices.Client.EntityQuery<global::TestDomainServices.TypeNameConflictResolution.Entity> GetEntitiesQuery()
        {
            this.ValidateMethod("GetEntitiesQuery", null);
            return base.CreateQuery<global::TestDomainServices.TypeNameConflictResolution.Entity>("GetEntities", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override global::OpenRiaServices.DomainServices.Client.EntityContainer CreateEntityContainer()
        {
            return new global::TestDomainServices.TypeNameConflictResolution.BaseTypeConflicts.BaseTypeConflictsEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'BaseTypeConflicts' DomainService.
        /// </summary>
        [global::System.ServiceModel.ServiceContractAttribute()]
        public interface IBaseTypeConflictsContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataContexts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [global::OpenRiaServices.DomainServices.Client.HasSideEffects(false)]
            [global::System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BaseTypeConflicts/GetDataContexts", ReplyAction="http://tempuri.org/BaseTypeConflicts/GetDataContextsResponse")]
            global::System.IAsyncResult BeginGetDataContexts(global::System.AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataContexts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataContexts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataContexts' operation.</returns>
            global::OpenRiaServices.DomainServices.Client.QueryResult<global::TestDomainServices.TypeNameConflictResolution.DomainContext> EndGetDataContexts(global::System.IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEntities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [global::OpenRiaServices.DomainServices.Client.HasSideEffects(false)]
            [global::System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BaseTypeConflicts/GetEntities", ReplyAction="http://tempuri.org/BaseTypeConflicts/GetEntitiesResponse")]
            global::System.IAsyncResult BeginGetEntities(global::System.AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEntities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEntities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEntities' operation.</returns>
            global::OpenRiaServices.DomainServices.Client.QueryResult<global::TestDomainServices.TypeNameConflictResolution.Entity> EndGetEntities(global::System.IAsyncResult result);
        }
        
        internal sealed class BaseTypeConflictsEntityContainer : global::OpenRiaServices.DomainServices.Client.EntityContainer
        {
            
            public BaseTypeConflictsEntityContainer()
            {
                this.CreateEntitySet<global::TestDomainServices.TypeNameConflictResolution.DomainContext>(global::OpenRiaServices.DomainServices.Client.EntitySetOperations.None);
                this.CreateEntitySet<global::TestDomainServices.TypeNameConflictResolution.Entity>(global::OpenRiaServices.DomainServices.Client.EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'DomainContext' entity class.
    /// </summary>
    [global::System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.TypeNameConflictResolu" +
        "tion")]
    public sealed partial class DomainContext : global::OpenRiaServices.DomainServices.Client.Entity
    {
        
        private int _dataContextID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataContextIDChanging(int value);
        partial void OnDataContextIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainContext"/> class.
        /// </summary>
        public DomainContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DataContextID' value.
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.EditableAttribute(false, AllowInitialValue=true)]
        [global::System.ComponentModel.DataAnnotations.KeyAttribute()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int DataContextID
        {
            get
            {
                return this._dataContextID;
            }
            set
            {
                if ((this._dataContextID != value))
                {
                    this.OnDataContextIDChanging(value);
                    this.ValidateProperty("DataContextID", value);
                    this._dataContextID = value;
                    this.RaisePropertyChanged("DataContextID");
                    this.OnDataContextIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._dataContextID;
        }
    }
    
    /// <summary>
    /// The 'Entity' entity class.
    /// </summary>
    [global::System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.TypeNameConflictResolu" +
        "tion")]
    public sealed partial class Entity : global::OpenRiaServices.DomainServices.Client.Entity
    {
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Entity"/> class.
        /// </summary>
        public Entity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.EditableAttribute(false, AllowInitialValue=true)]
        [global::System.ComponentModel.DataAnnotations.KeyAttribute()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
    }
}
namespace TestDomainServices.TypeNameConflictResolution.ExternalConflicts
{
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'DomainServiceScenario1' DomainService.
    /// </summary>
    public sealed partial class DomainServiceScenario1 : global::OpenRiaServices.DomainServices.Client.DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainServiceScenario1"/> class.
        /// </summary>
        public DomainServiceScenario1() : 
                this(new global::System.Uri("TestDomainServices-TypeNameConflictResolution-ExternalConflicts-DomainServiceScen" +
                            "ario1.svc", global::System.UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainServiceScenario1"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The DomainServiceScenario1 service URI.</param>
        public DomainServiceScenario1(global::System.Uri serviceUri) : 
                this(global::OpenRiaServices.DomainServices.Client.DomainContext.CreateDomainClient(typeof(global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.DomainServiceScenario1.IDomainServiceScenario1Contract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainServiceScenario1"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public DomainServiceScenario1(global::OpenRiaServices.DomainServices.Client.DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MockEntity1"/> entity instances that have been loaded into this <see cref="DomainServiceScenario1"/> instance.
        /// </summary>
        public global::OpenRiaServices.DomainServices.Client.EntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity1> MockEntity1s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity1>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MockEntity2"/> entity instances that have been loaded into this <see cref="DomainServiceScenario1"/> instance.
        /// </summary>
        public global::OpenRiaServices.DomainServices.Client.EntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity2> MockEntity2s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity2>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MockEntity1"/> entity instances using the 'GetTEntity1' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MockEntity1"/> entity instances.</returns>
        public global::OpenRiaServices.DomainServices.Client.EntityQuery<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity1> GetTEntity1Query()
        {
            this.ValidateMethod("GetTEntity1Query", null);
            return base.CreateQuery<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity1>("GetTEntity1", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MockEntity2"/> entity instances using the 'GetTEntity2' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MockEntity2"/> entity instances.</returns>
        public global::OpenRiaServices.DomainServices.Client.EntityQuery<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity2> GetTEntity2Query()
        {
            this.ValidateMethod("GetTEntity2Query", null);
            return base.CreateQuery<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity2>("GetTEntity2", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override global::OpenRiaServices.DomainServices.Client.EntityContainer CreateEntityContainer()
        {
            return new global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.DomainServiceScenario1.DomainServiceScenario1EntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'DomainServiceScenario1' DomainService.
        /// </summary>
        [global::System.ServiceModel.ServiceContractAttribute()]
        public interface IDomainServiceScenario1Contract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetTEntity1' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [global::OpenRiaServices.DomainServices.Client.HasSideEffects(false)]
            [global::System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DomainServiceScenario1/GetTEntity1", ReplyAction="http://tempuri.org/DomainServiceScenario1/GetTEntity1Response")]
            global::System.IAsyncResult BeginGetTEntity1(global::System.AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTEntity1'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTEntity1'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTEntity1' operation.</returns>
            global::OpenRiaServices.DomainServices.Client.QueryResult<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity1> EndGetTEntity1(global::System.IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTEntity2' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [global::OpenRiaServices.DomainServices.Client.HasSideEffects(false)]
            [global::System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DomainServiceScenario1/GetTEntity2", ReplyAction="http://tempuri.org/DomainServiceScenario1/GetTEntity2Response")]
            global::System.IAsyncResult BeginGetTEntity2(global::System.AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTEntity2'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTEntity2'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTEntity2' operation.</returns>
            global::OpenRiaServices.DomainServices.Client.QueryResult<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity2> EndGetTEntity2(global::System.IAsyncResult result);
        }
        
        internal sealed class DomainServiceScenario1EntityContainer : global::OpenRiaServices.DomainServices.Client.EntityContainer
        {
            
            public DomainServiceScenario1EntityContainer()
            {
                this.CreateEntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity1>(global::OpenRiaServices.DomainServices.Client.EntitySetOperations.None);
                this.CreateEntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity2>(global::OpenRiaServices.DomainServices.Client.EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'DomainServiceScenario2' DomainService.
    /// </summary>
    public sealed partial class DomainServiceScenario2 : global::OpenRiaServices.DomainServices.Client.DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainServiceScenario2"/> class.
        /// </summary>
        public DomainServiceScenario2() : 
                this(new global::System.Uri("TestDomainServices-TypeNameConflictResolution-ExternalConflicts-DomainServiceScen" +
                            "ario2.svc", global::System.UriKind.Relative))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainServiceScenario2"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The DomainServiceScenario2 service URI.</param>
        public DomainServiceScenario2(global::System.Uri serviceUri) : 
                this(global::OpenRiaServices.DomainServices.Client.DomainContext.CreateDomainClient(typeof(global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.DomainServiceScenario2.IDomainServiceScenario2Contract), serviceUri, false))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainServiceScenario2"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public DomainServiceScenario2(global::OpenRiaServices.DomainServices.Client.DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MockEntity1"/> entity instances that have been loaded into this <see cref="DomainServiceScenario2"/> instance.
        /// </summary>
        public global::OpenRiaServices.DomainServices.Client.EntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity1> MockEntity1s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity1>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MockEntity2"/> entity instances that have been loaded into this <see cref="DomainServiceScenario2"/> instance.
        /// </summary>
        public global::OpenRiaServices.DomainServices.Client.EntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity2> MockEntity2s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity2>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MockEntity1"/> entity instances using the 'GetTEntity1' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MockEntity1"/> entity instances.</returns>
        public global::OpenRiaServices.DomainServices.Client.EntityQuery<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity1> GetTEntity1Query()
        {
            this.ValidateMethod("GetTEntity1Query", null);
            return base.CreateQuery<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity1>("GetTEntity1", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MockEntity2"/> entity instances using the 'GetTEntity2' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MockEntity2"/> entity instances.</returns>
        public global::OpenRiaServices.DomainServices.Client.EntityQuery<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity2> GetTEntity2Query()
        {
            this.ValidateMethod("GetTEntity2Query", null);
            return base.CreateQuery<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity2>("GetTEntity2", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override global::OpenRiaServices.DomainServices.Client.EntityContainer CreateEntityContainer()
        {
            return new global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.DomainServiceScenario2.DomainServiceScenario2EntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'DomainServiceScenario2' DomainService.
        /// </summary>
        [global::System.ServiceModel.ServiceContractAttribute()]
        public interface IDomainServiceScenario2Contract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetTEntity1' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [global::OpenRiaServices.DomainServices.Client.HasSideEffects(false)]
            [global::System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DomainServiceScenario2/GetTEntity1", ReplyAction="http://tempuri.org/DomainServiceScenario2/GetTEntity1Response")]
            global::System.IAsyncResult BeginGetTEntity1(global::System.AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTEntity1'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTEntity1'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTEntity1' operation.</returns>
            global::OpenRiaServices.DomainServices.Client.QueryResult<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity1> EndGetTEntity1(global::System.IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTEntity2' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [global::OpenRiaServices.DomainServices.Client.HasSideEffects(false)]
            [global::System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DomainServiceScenario2/GetTEntity2", ReplyAction="http://tempuri.org/DomainServiceScenario2/GetTEntity2Response")]
            global::System.IAsyncResult BeginGetTEntity2(global::System.AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTEntity2'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTEntity2'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTEntity2' operation.</returns>
            global::OpenRiaServices.DomainServices.Client.QueryResult<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity2> EndGetTEntity2(global::System.IAsyncResult result);
        }
        
        internal sealed class DomainServiceScenario2EntityContainer : global::OpenRiaServices.DomainServices.Client.EntityContainer
        {
            
            public DomainServiceScenario2EntityContainer()
            {
                this.CreateEntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1.MockEntity2>(global::OpenRiaServices.DomainServices.Client.EntitySetOperations.None);
                this.CreateEntitySet<global::TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2.MockEntity1>(global::OpenRiaServices.DomainServices.Client.EntitySetOperations.None);
            }
        }
    }
}
namespace TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace1
{
    
    
    /// <summary>
    /// The 'MockEntity1' entity class.
    /// </summary>
    [global::System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.TypeNameConflictResolu" +
        "tion.ExternalConflicts.Namespace1")]
    public sealed partial class MockEntity1 : global::OpenRiaServices.DomainServices.Client.Entity
    {
        
        private int _entityID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEntityIDChanging(int value);
        partial void OnEntityIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockEntity1"/> class.
        /// </summary>
        public MockEntity1()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EntityID' value.
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.EditableAttribute(false, AllowInitialValue=true)]
        [global::System.ComponentModel.DataAnnotations.KeyAttribute()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int EntityID
        {
            get
            {
                return this._entityID;
            }
            set
            {
                if ((this._entityID != value))
                {
                    this.OnEntityIDChanging(value);
                    this.ValidateProperty("EntityID", value);
                    this._entityID = value;
                    this.RaisePropertyChanged("EntityID");
                    this.OnEntityIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._entityID;
        }
    }
    
    /// <summary>
    /// The 'MockEntity2' entity class.
    /// </summary>
    [global::System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.TypeNameConflictResolu" +
        "tion.ExternalConflicts.Namespace1")]
    public sealed partial class MockEntity2 : global::OpenRiaServices.DomainServices.Client.Entity
    {
        
        private int _entityID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEntityIDChanging(int value);
        partial void OnEntityIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockEntity2"/> class.
        /// </summary>
        public MockEntity2()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EntityID' value.
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.EditableAttribute(false, AllowInitialValue=true)]
        [global::System.ComponentModel.DataAnnotations.KeyAttribute()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int EntityID
        {
            get
            {
                return this._entityID;
            }
            set
            {
                if ((this._entityID != value))
                {
                    this.OnEntityIDChanging(value);
                    this.ValidateProperty("EntityID", value);
                    this._entityID = value;
                    this.RaisePropertyChanged("EntityID");
                    this.OnEntityIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._entityID;
        }
    }
}
namespace TestDomainServices.TypeNameConflictResolution.ExternalConflicts.Namespace2
{
    
    
    /// <summary>
    /// The 'MockEntity1' entity class.
    /// </summary>
    [global::System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.TypeNameConflictResolu" +
        "tion.ExternalConflicts.Namespace2")]
    public sealed partial class MockEntity1 : global::OpenRiaServices.DomainServices.Client.Entity
    {
        
        private int _entityID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEntityIDChanging(int value);
        partial void OnEntityIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockEntity1"/> class.
        /// </summary>
        public MockEntity1()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EntityID' value.
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.EditableAttribute(false, AllowInitialValue=true)]
        [global::System.ComponentModel.DataAnnotations.KeyAttribute()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int EntityID
        {
            get
            {
                return this._entityID;
            }
            set
            {
                if ((this._entityID != value))
                {
                    this.OnEntityIDChanging(value);
                    this.ValidateProperty("EntityID", value);
                    this._entityID = value;
                    this.RaisePropertyChanged("EntityID");
                    this.OnEntityIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._entityID;
        }
    }
    
    /// <summary>
    /// The 'MockEntity2' entity class.
    /// </summary>
    [global::System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.datacontract.org/2004/07/TestDomainServices.TypeNameConflictResolu" +
        "tion.ExternalConflicts.Namespace2")]
    public sealed partial class MockEntity2 : global::OpenRiaServices.DomainServices.Client.Entity
    {
        
        private int _entityID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEntityIDChanging(int value);
        partial void OnEntityIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MockEntity2"/> class.
        /// </summary>
        public MockEntity2()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EntityID' value.
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.EditableAttribute(false, AllowInitialValue=true)]
        [global::System.ComponentModel.DataAnnotations.KeyAttribute()]
        [global::System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int EntityID
        {
            get
            {
                return this._entityID;
            }
            set
            {
                if ((this._entityID != value))
                {
                    this.OnEntityIDChanging(value);
                    this.ValidateProperty("EntityID", value);
                    this._entityID = value;
                    this.RaisePropertyChanged("EntityID");
                    this.OnEntityIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._entityID;
        }
    }
}
