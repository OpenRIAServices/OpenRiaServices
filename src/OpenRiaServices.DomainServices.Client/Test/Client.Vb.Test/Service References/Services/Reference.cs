//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace OpenRiaServices.DomainServices.Client.Test.Services {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="Services.TestServices")]
    public interface TestServices {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TestServices/CreateNewDatabase", ReplyAction="urn:TestServices/CreateNewDatabaseResponse")]
        System.IAsyncResult BeginCreateNewDatabase(string databaseName, System.AsyncCallback callback, object asyncState);
        
        void EndCreateNewDatabase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TestServices/ReleaseNewDatabase", ReplyAction="urn:TestServices/ReleaseNewDatabaseResponse")]
        System.IAsyncResult BeginReleaseNewDatabase(string databaseName, System.AsyncCallback callback, object asyncState);
        
        void EndReleaseNewDatabase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TestServices/RestartApp", ReplyAction="urn:TestServices/RestartAppResponse")]
        System.IAsyncResult BeginRestartApp(System.AsyncCallback callback, object asyncState);
        
        void EndRestartApp(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TestServicesChannel : OpenRiaServices.DomainServices.Client.Test.Services.TestServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServicesClient : System.ServiceModel.ClientBase<OpenRiaServices.DomainServices.Client.Test.Services.TestServices>, OpenRiaServices.DomainServices.Client.Test.Services.TestServices {
        
        private BeginOperationDelegate onBeginCreateNewDatabaseDelegate;
        
        private EndOperationDelegate onEndCreateNewDatabaseDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewDatabaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginReleaseNewDatabaseDelegate;
        
        private EndOperationDelegate onEndReleaseNewDatabaseDelegate;
        
        private System.Threading.SendOrPostCallback onReleaseNewDatabaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginRestartAppDelegate;
        
        private EndOperationDelegate onEndRestartAppDelegate;
        
        private System.Threading.SendOrPostCallback onRestartAppCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TestServicesClient() {
        }
        
        public TestServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateNewDatabaseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReleaseNewDatabaseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RestartAppCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult OpenRiaServices.DomainServices.Client.Test.Services.TestServices.BeginCreateNewDatabase(string databaseName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewDatabase(databaseName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void OpenRiaServices.DomainServices.Client.Test.Services.TestServices.EndCreateNewDatabase(System.IAsyncResult result) {
            base.Channel.EndCreateNewDatabase(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewDatabase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string databaseName = ((string)(inValues[0]));
            return ((OpenRiaServices.DomainServices.Client.Test.Services.TestServices)(this)).BeginCreateNewDatabase(databaseName, callback, asyncState);
        }
        
        private object[] OnEndCreateNewDatabase(System.IAsyncResult result) {
            ((OpenRiaServices.DomainServices.Client.Test.Services.TestServices)(this)).EndCreateNewDatabase(result);
            return null;
        }
        
        private void OnCreateNewDatabaseCompleted(object state) {
            if ((this.CreateNewDatabaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewDatabaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewDatabaseAsync(string databaseName) {
            this.CreateNewDatabaseAsync(databaseName, null);
        }
        
        public void CreateNewDatabaseAsync(string databaseName, object userState) {
            if ((this.onBeginCreateNewDatabaseDelegate == null)) {
                this.onBeginCreateNewDatabaseDelegate = new BeginOperationDelegate(this.OnBeginCreateNewDatabase);
            }
            if ((this.onEndCreateNewDatabaseDelegate == null)) {
                this.onEndCreateNewDatabaseDelegate = new EndOperationDelegate(this.OnEndCreateNewDatabase);
            }
            if ((this.onCreateNewDatabaseCompletedDelegate == null)) {
                this.onCreateNewDatabaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewDatabaseCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewDatabaseDelegate, new object[] {
                        databaseName}, this.onEndCreateNewDatabaseDelegate, this.onCreateNewDatabaseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult OpenRiaServices.DomainServices.Client.Test.Services.TestServices.BeginReleaseNewDatabase(string databaseName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReleaseNewDatabase(databaseName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void OpenRiaServices.DomainServices.Client.Test.Services.TestServices.EndReleaseNewDatabase(System.IAsyncResult result) {
            base.Channel.EndReleaseNewDatabase(result);
        }
        
        private System.IAsyncResult OnBeginReleaseNewDatabase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string databaseName = ((string)(inValues[0]));
            return ((OpenRiaServices.DomainServices.Client.Test.Services.TestServices)(this)).BeginReleaseNewDatabase(databaseName, callback, asyncState);
        }
        
        private object[] OnEndReleaseNewDatabase(System.IAsyncResult result) {
            ((OpenRiaServices.DomainServices.Client.Test.Services.TestServices)(this)).EndReleaseNewDatabase(result);
            return null;
        }
        
        private void OnReleaseNewDatabaseCompleted(object state) {
            if ((this.ReleaseNewDatabaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReleaseNewDatabaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReleaseNewDatabaseAsync(string databaseName) {
            this.ReleaseNewDatabaseAsync(databaseName, null);
        }
        
        public void ReleaseNewDatabaseAsync(string databaseName, object userState) {
            if ((this.onBeginReleaseNewDatabaseDelegate == null)) {
                this.onBeginReleaseNewDatabaseDelegate = new BeginOperationDelegate(this.OnBeginReleaseNewDatabase);
            }
            if ((this.onEndReleaseNewDatabaseDelegate == null)) {
                this.onEndReleaseNewDatabaseDelegate = new EndOperationDelegate(this.OnEndReleaseNewDatabase);
            }
            if ((this.onReleaseNewDatabaseCompletedDelegate == null)) {
                this.onReleaseNewDatabaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReleaseNewDatabaseCompleted);
            }
            base.InvokeAsync(this.onBeginReleaseNewDatabaseDelegate, new object[] {
                        databaseName}, this.onEndReleaseNewDatabaseDelegate, this.onReleaseNewDatabaseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult OpenRiaServices.DomainServices.Client.Test.Services.TestServices.BeginRestartApp(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRestartApp(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void OpenRiaServices.DomainServices.Client.Test.Services.TestServices.EndRestartApp(System.IAsyncResult result) {
            base.Channel.EndRestartApp(result);
        }
        
        private System.IAsyncResult OnBeginRestartApp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((OpenRiaServices.DomainServices.Client.Test.Services.TestServices)(this)).BeginRestartApp(callback, asyncState);
        }
        
        private object[] OnEndRestartApp(System.IAsyncResult result) {
            ((OpenRiaServices.DomainServices.Client.Test.Services.TestServices)(this)).EndRestartApp(result);
            return null;
        }
        
        private void OnRestartAppCompleted(object state) {
            if ((this.RestartAppCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RestartAppCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RestartAppAsync() {
            this.RestartAppAsync(null);
        }
        
        public void RestartAppAsync(object userState) {
            if ((this.onBeginRestartAppDelegate == null)) {
                this.onBeginRestartAppDelegate = new BeginOperationDelegate(this.OnBeginRestartApp);
            }
            if ((this.onEndRestartAppDelegate == null)) {
                this.onEndRestartAppDelegate = new EndOperationDelegate(this.OnEndRestartApp);
            }
            if ((this.onRestartAppCompletedDelegate == null)) {
                this.onRestartAppCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRestartAppCompleted);
            }
            base.InvokeAsync(this.onBeginRestartAppDelegate, null, this.onEndRestartAppDelegate, this.onRestartAppCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override OpenRiaServices.DomainServices.Client.Test.Services.TestServices CreateChannel() {
            return new TestServicesClientChannel(this);
        }
        
        private class TestServicesClientChannel : ChannelBase<OpenRiaServices.DomainServices.Client.Test.Services.TestServices>, OpenRiaServices.DomainServices.Client.Test.Services.TestServices {
            
            public TestServicesClientChannel(System.ServiceModel.ClientBase<OpenRiaServices.DomainServices.Client.Test.Services.TestServices> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateNewDatabase(string databaseName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = databaseName;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewDatabase", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateNewDatabase(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateNewDatabase", _args, result);
            }
            
            public System.IAsyncResult BeginReleaseNewDatabase(string databaseName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = databaseName;
                System.IAsyncResult _result = base.BeginInvoke("ReleaseNewDatabase", _args, callback, asyncState);
                return _result;
            }
            
            public void EndReleaseNewDatabase(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ReleaseNewDatabase", _args, result);
            }
            
            public System.IAsyncResult BeginRestartApp(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RestartApp", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRestartApp(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RestartApp", _args, result);
            }
        }
    }
}
