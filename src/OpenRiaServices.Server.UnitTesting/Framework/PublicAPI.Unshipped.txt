OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Delete<TEntity>(TEntity entity, TEntity original = null) -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.DeleteAsync<TEntity>(TEntity entity, TEntity original = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.DomainServiceTestHost() -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.DomainServiceTestHost(System.Func<TDomainService> createDomainService) -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.DomainServiceTestHost(System.Func<TDomainService> createDomainService, System.Security.Principal.IPrincipal user) -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.DomainServiceTestHost(System.Security.Principal.IPrincipal user) -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Factory.get -> OpenRiaServices.Server.IDomainServiceFactory
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Factory.set -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Insert<TEntity>(TEntity entity) -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.InsertAsync<TEntity>(TEntity entity, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Invoke(System.Linq.Expressions.Expression<System.Action<TDomainService>> invokeOperation) -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Invoke(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Threading.Tasks.Task>> invokeOperation) -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Invoke<TResult>(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Threading.Tasks.Task<TResult>>> invokeOperation) -> TResult
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Invoke<TResult>(System.Linq.Expressions.Expression<System.Func<TDomainService, TResult>> invokeOperation) -> TResult
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.InvokeAsync(System.Linq.Expressions.Expression<System.Action<TDomainService>> invokeOperation, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.InvokeAsync(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Threading.Tasks.Task>> invokeOperation, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.InvokeAsync<TResult>(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Threading.Tasks.Task<TResult>>> invokeOperation, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult>
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.InvokeAsync<TResult>(System.Linq.Expressions.Expression<System.Func<TDomainService, TResult>> invokeOperation, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult>
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Query<TEntity>(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Collections.Generic.IEnumerable<TEntity>>> queryOperation) -> System.Collections.Generic.IEnumerable<TEntity>
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.QueryAsync<TEntity>(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Linq.IQueryable<TEntity>>> queryOperation, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TEntity>>
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.QueryAsync<TEntity>(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TEntity>>>> queryOperation, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TEntity>>
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.QueryAsync<TEntity>(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Threading.Tasks.Task<System.Linq.IQueryable<TEntity>>>> queryOperation, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TEntity>>
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.QuerySingle<TEntity>(System.Linq.Expressions.Expression<System.Func<TDomainService, TEntity>> queryOperation) -> TEntity
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.QuerySingleAsync<TEntity>(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Threading.Tasks.Task<TEntity>>> queryOperation, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TEntity>
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.QuerySingleAsync<TEntity>(System.Linq.Expressions.Expression<System.Func<TDomainService, TEntity>> queryOperation, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TEntity>
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.ServiceProvider.get -> System.IServiceProvider
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.ServiceProvider.set -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Submit(OpenRiaServices.Server.ChangeSet changeSet) -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.SubmitAsync(OpenRiaServices.Server.ChangeSet changeSet, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryDelete<TEntity>(TEntity entity, TEntity original, out OpenRiaServices.Server.ChangeSet changeSet) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryDelete<TEntity>(TEntity entity, TEntity original, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryInsert<TEntity>(TEntity entity, out OpenRiaServices.Server.ChangeSet changeSet) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryInsert<TEntity>(TEntity entity, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryInvoke(System.Linq.Expressions.Expression<System.Action<TDomainService>> invokeOperation, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryInvoke(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Threading.Tasks.Task>> invokeOperation, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryInvoke<TResult>(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Threading.Tasks.Task<TResult>>> invokeOperation, out TResult result, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryInvoke<TResult>(System.Linq.Expressions.Expression<System.Func<TDomainService, TResult>> invokeOperation, out TResult result, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryQuery<TEntity>(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Collections.Generic.IEnumerable<TEntity>>> queryOperation, out System.Collections.Generic.IEnumerable<TEntity> results, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryQuerySingle<TEntity>(System.Linq.Expressions.Expression<System.Func<TDomainService, System.Threading.Tasks.Task<TEntity>>> queryOperation, out TEntity result, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryQuerySingle<TEntity>(System.Linq.Expressions.Expression<System.Func<TDomainService, TEntity>> queryOperation, out TEntity result, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TrySubmit(OpenRiaServices.Server.ChangeSet changeSet) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TrySubmit(OpenRiaServices.Server.ChangeSet changeSet, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryUpdate<TEntity>(System.Linq.Expressions.Expression<System.Action<TDomainService>> updateOperation, TEntity original, out OpenRiaServices.Server.ChangeSet changeSet) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryUpdate<TEntity>(System.Linq.Expressions.Expression<System.Action<TDomainService>> updateOperation, TEntity original, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryUpdate<TEntity>(TEntity entity, TEntity original, out OpenRiaServices.Server.ChangeSet changeSet) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.TryUpdate<TEntity>(TEntity entity, TEntity original, out System.Collections.Generic.IList<System.ComponentModel.DataAnnotations.ValidationResult> validationErrors) -> bool
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Update<TEntity>(System.Linq.Expressions.Expression<System.Action<TDomainService>> updateOperation, TEntity original = null) -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.Update<TEntity>(TEntity entity, TEntity original = null) -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.UpdateAsync<TEntity>(System.Linq.Expressions.Expression<System.Action<TDomainService>> updateOperation, TEntity original = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.UpdateAsync<TEntity>(TEntity entity, TEntity original = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.User.get -> System.Security.Principal.IPrincipal
OpenRiaServices.Server.UnitTesting.DomainServiceTestHost<TDomainService>.User.set -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHostException
OpenRiaServices.Server.UnitTesting.DomainServiceTestHostException.DomainServiceTestHostException() -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHostException.DomainServiceTestHostException(string message) -> void
OpenRiaServices.Server.UnitTesting.DomainServiceTestHostException.DomainServiceTestHostException(string message, System.Exception innerException) -> void
OpenRiaServices.Server.UnitTesting.EntityActionCollection
OpenRiaServices.Server.UnitTesting.EntityActionCollection.Add(string key, object[] value) -> void
OpenRiaServices.Server.UnitTesting.EntityActionCollection.EntityActionCollection() -> void