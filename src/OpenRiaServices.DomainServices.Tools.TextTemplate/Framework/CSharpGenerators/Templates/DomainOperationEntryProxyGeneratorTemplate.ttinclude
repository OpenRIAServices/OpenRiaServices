<#@ import namespace="OpenRiaServices.DomainServices.Tools" #>
<#@ import namespace="OpenRiaServices.DomainServices" #>

<#+
	/// <summary>
	/// Generates the custom methods.
	/// </summary>
	protected virtual void GenerateCustomMethods()
	{
		foreach(DomainOperationEntry domainMethod in this.DomainOperations)
		{
			this.GenerateCustomMethod(domainMethod);
		}
	}
	
	/// <summary>
	/// Generates a custom method.
	/// </summary>
	/// <param name="domainMethod">The custom method to be generated.</param>
	protected virtual void GenerateCustomMethod(DomainOperationEntry domainMethod)
	{
#>
public void <#= domainMethod.Name #>(<#+
		List<string> invokeParams = new List<string>();
		DomainOperationParameter[] paramInfos = domainMethod.Parameters.ToArray();
		for(int i = 0; i < paramInfos.Length; i++)
		{
			DomainOperationParameter paramInfo = paramInfos[i];
			string paramTypeName = CodeGenUtilities.GetTypeName(CodeGenUtilities.TranslateType(paramInfo.ParameterType));
			#><#= paramTypeName #> <#= CodeGenUtilities.GetSafeName(paramInfo.Name) #><#+
			if(i + 1 < paramInfos.Length)
			{
				#>, <#+
			}
			if(i > 0)
			{
				invokeParams.Add(paramInfo.Name);
			}
		}
#>)
<#+
		this.GenerateOpeningBrace();
#>
<#= paramInfos[0].Name #>.<#= domainMethod.Name #>(<#+  
			for(int i = 0; i < invokeParams.Count; i ++)
			{
				#><#= invokeParams[i] #><#+
				if(i + 1 < invokeParams.Count)
				{
					#>, <#+
				}
			}
		#>);
<#+
		this.GenerateClosingBrace();
	}
	
	/// <summary>
	/// Generates the EntitySet properties.
	/// </summary>
	protected virtual void GenerateEntitySets()
	{
		foreach(Type entityType in this.EntitySets)
		{
			this.GenerateEntitySet(entityType);
		}
	}
	
	/// <summary>
	/// Generates the EntitySet property.
	/// </summary>
	/// <param name="entityType">The type of the EntitySet to be generated.</param>
	protected virtual void GenerateEntitySet(Type entityType)
	{
		string propertyName = Naming.MakePluralName(entityType.Name);
		string entityTypeName = CodeGenUtilities.GetTypeName(entityType);
#>
public EntitySet<<#= entityTypeName #>> <#= propertyName #>
{
    get
    {
        return base.EntityContainer.GetEntitySet<<#= entityTypeName #>>();
    }
}
<#+
	}
	
	/// <summary>
	/// Generates the query methods.
	/// </summary>
	protected virtual void GenerateQueryMethods()
	{
		foreach(DomainOperationEntry queryMethod in this.QueryMethods)
		{
			this.GenerateQueryMethod(queryMethod);
		}
	}
	
	/// <summary>
	/// Generates a query method.
	/// </summary>
	/// <param name="domainOperationEntry">The query method to be generated.</param>
	protected virtual void GenerateQueryMethod(DomainOperationEntry domainOperationEntry)
	{
		string queryMethodName = domainOperationEntry.Name + "Query";		
		this.GenerateEntityQueryMethodDeclaration(domainOperationEntry, queryMethodName);
		this.GenerateOpeningBrace();
		this.GenerateEntityQueryMethodBody(domainOperationEntry, queryMethodName);
		this.GenerateClosingBrace();
	}	
	
	private void GenerateEntityQueryMethodDeclaration(DomainOperationEntry domainOperationEntry, string queryMethodName)
	{		
		// First generate custom attributes for the qery method
		IEnumerable<Attribute> methodAttributes = domainOperationEntry.Attributes.Cast<Attribute>();
		this.GenerateAttributes(methodAttributes);
				
#>
public EntityQuery<<#= this.GetEntityQueryMethodElementReturnTypeName(domainOperationEntry) #>> <#= queryMethodName #>(<#+
	this.GenerateParameterDeclaration(domainOperationEntry.Parameters.AsEnumerable(), true);
#>)
<#+
	}
	
	private void GenerateEntityQueryMethodBody(DomainOperationEntry domainOperationEntry, string queryMethodName)
	{	
		string parameterDictionaryName = this.GenerateServiceOpMethodBody(domainOperationEntry, queryMethodName);
		this.GenerateEntityQueryMethodReturn(domainOperationEntry, parameterDictionaryName);
	}
	
	private void GenerateEntityQueryMethodReturn(DomainOperationEntry domainOperationEntry, string parameterDictionaryName)
	{
		QueryAttribute queryAttribute = (QueryAttribute)domainOperationEntry.OperationAttribute;
		
#>
return base.CreateQuery<<#= this.GetEntityQueryMethodElementReturnTypeName(domainOperationEntry) #>>("<#= domainOperationEntry.Name #>", <#= parameterDictionaryName #>, <#= CodeGenUtilities.GetBooleanString(queryAttribute.HasSideEffects, true) #>, <#= CodeGenUtilities.GetBooleanString(queryAttribute.IsComposable, true) #>);
<#+	
	}
	
	private string GetEntityQueryMethodElementReturnTypeName(DomainOperationEntry domainOperationEntry)
	{
		Type entityType = TypeUtility.GetElementType(domainOperationEntry.ReturnType);
		return CodeGenUtilities.GetTypeName(entityType);
	}
#>