<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OpenRiaServices.DomainServices.Server" #>
<#@ include file="AttributeGeneratorTemplate.ttinclude" #>

<#+

private void GenerateParameterDeclaration(IEnumerable<DomainOperationParameter> parameters, bool generateAttributes)
{
	DomainOperationParameter[] paramInfos = parameters.ToArray();
	for(int i = 0; i < paramInfos.Length; i++)
	{
		DomainOperationParameter paramInfo = paramInfos[i];
		if(generateAttributes)
		{
			IEnumerable<Attribute> paramAttributes = paramInfo.Attributes.Cast<Attribute>();
			this.GenerateAttributes(paramAttributes);
		}
		string paramTypeName = CodeGenUtilities.GetTypeName(CodeGenUtilities.TranslateType(paramInfo.ParameterType));
		string paramName = CodeGenUtilities.GetSafeName(paramInfo.Name);
		#><#= paramTypeName #> <#= paramName #><#+
		if(i + 1 < paramInfos.Length)
		{
			#>, <#+
		}
	}
}

private void GenerateOpeningBrace()
{
#>
{
<#+
	PushIndent("\t");
}

private void GenerateClosingBrace()
{
	PopIndent();
#>
}
<#+
}

private void GenerateNamespace(string ns)
{
#>
namespace <#= ns #>
<#+
}

#>
