<#+
    private void GenerateSingletonAssociation(PropertyDescriptor pd)
    {
		AssociationMetadata metadata = new AssociationMetadata(pd);
		this.GenerateAssociationField(metadata);
		this.GenerateSingletonAssociationProperty(metadata);
		this.GenerateAssociationFilterMethod(metadata);
    }

	private void GenerateAssociationField(AssociationMetadata metadata)
	{		
#>
private <#= metadata.AssociationTypeName #> <#= metadata.FieldName #>;
<#+
	}
	
	private void GenerateSingletonAssociationProperty(AssociationMetadata metadata)
	{
		this.GenerateAssociationPropertyDeclaration(metadata);
		this.GenerateOpeningBrace();
		this.GenerateSingletonAssociationPropertyGetter(metadata);
		this.GenerateSingletonAssociationPropertySetter(metadata);
		this.GenerateClosingBrace();
	}
	
	private void GenerateAssociationPropertyDeclaration(AssociationMetadata metadata)
	{
		this.GenerateAttributes(metadata.Attributes);
		string propertyType = String.Empty;
		if(metadata.IsCollection)
		{
			propertyType = metadata.AssociationTypeName;			
		}
		else
		{
			propertyType = metadata.PropTypeName;
		}
#>
public <#= propertyType #> <#= metadata.PropertyName #>
<#+
	}
	
	private void GenerateSingletonAssociationPropertyGetter(AssociationMetadata metadata)
	{
		string returnType = metadata.FieldName;
		if(!metadata.IsCollection)
		{
			returnType = returnType + ".Entity";
		}
#>
get
{
	if(this.<#= metadata.FieldName #> == null)
	{
		this.<#= metadata.FieldName #> = new <#= metadata.AssociationTypeName #>(this, "<#= metadata.PropertyName #>", this.Filter<#= metadata.PropertyName #>);
	}
	return this.<#= returnType #>;
}
<#+
	}
	
	private void GenerateSingletonAssociationPropertySetter(AssociationMetadata metadata)
	{
		if (metadata.IsExternal && !metadata.AssociationAttribute.IsForeignKey)
        {
			return;
		}
		
#>
set
<#+  	this.GenerateOpeningBrace();
#>
<#= metadata.PropTypeName #> previous = this.<#= metadata.PropertyDescriptor.Name #>;
if (previous != value)
<#+  	this.GenerateOpeningBrace();
#>
this.ValidateProperty("<#= metadata.PropertyDescriptor.Name #>", value);
<#+
		PropertyDescriptor reverseAssociationMember = GetReverseAssociation(metadata.PropertyDescriptor, metadata.AssociationAttribute);
		
		bool reverseIsSingleton = false;
		bool isBiDirectionalAssociation = (reverseAssociationMember != null) && this.CanGenerateProperty(reverseAssociationMember);	
		string revName = isBiDirectionalAssociation ? reverseAssociationMember.Name : string.Empty;
		if(isBiDirectionalAssociation && !metadata.IsExternal)
		{
#>
if(previous != null)
<#+
			this.GenerateOpeningBrace();
#>
this.<#= metadata.FieldName #>.Entity = null;
<#+
			reverseIsSingleton = !EntityGenerator.IsCollectionType(reverseAssociationMember.PropertyType);
			if(!reverseIsSingleton)
			{
#>
previous.<#= revName #>.Remove(this);
<#+
			}
			else
			{
#>
previous.<#= revName #> = null;
<#+
			}
				
			this.GenerateClosingBrace();
		}
		
		if(metadata.AssociationAttribute.IsForeignKey)
		{
			string[] thisKeyProps = metadata.AssociationAttribute.ThisKeyMembers.ToArray();
    	    string[] otherKeyProps = metadata.AssociationAttribute.OtherKeyMembers.ToArray();
#>
if(value != null)
<#+
			this.GenerateOpeningBrace();
			for(int i = 0; i < thisKeyProps.Length; i++)
			{
#>
this.<#= thisKeyProps[i] #> = value.<#= otherKeyProps[i] #>;
<#+
			}
			this.GenerateClosingBrace();
#>
else
<#+
			this.GenerateOpeningBrace();
			for(int i = 0; i < thisKeyProps.Length; i++)
			{
				Type foreignKeyType = TypeDescriptor.GetProperties(this.Type).Find(thisKeyProps[i], false).PropertyType;
				string foreignKeyTypeName = CodeGenUtilities.GetTypeName(foreignKeyType);
#>
this.<#= thisKeyProps[i] #> = default(<#= foreignKeyTypeName #>);
<#+
			}			
			this.GenerateClosingBrace();
			
			if(!metadata.IsExternal)
			{
				this.GenerateSingletonAssociationPropertySetterEntitySetStatement(metadata, isBiDirectionalAssociation, reverseIsSingleton, revName);
			}
		}
		else
		{
			this.GenerateSingletonAssociationPropertySetterEntitySetStatement(metadata, isBiDirectionalAssociation, reverseIsSingleton, revName);			
		}
		
		if(!metadata.IsExternal)
		{
#>
this.RaisePropertyChanged("<#= metadata.PropertyDescriptor.Name #>");
<#+
		}
		this.GenerateClosingBrace();
		this.GenerateClosingBrace();
	}

	private void GenerateSingletonAssociationPropertySetterEntitySetStatement(AssociationMetadata metadata, bool isBiDirectionalAssociation, bool reverseIsSingleton, string revName)
	{
#>
this.<#= metadata.FieldName #>.Entity = value;
<#+
		if(isBiDirectionalAssociation)
		{
#>
if(value != null)
<#+
			this.GenerateOpeningBrace();
			if(!reverseIsSingleton)
			{
#>
value.<#= revName #>.Add(this);
<#+
			}
			else
			{
#>
value.<#= revName #> = this;
<#+
			}
			this.GenerateClosingBrace();
			
		}
	}
	
	private void GenerateAssociationFilterMethod(AssociationMetadata metadata)
	{		
		string[] thisKeyProps = metadata.AssociationAttribute.ThisKeyMembers.ToArray();
        string[] otherKeyProps = metadata.AssociationAttribute.OtherKeyMembers.ToArray();
#>
private bool Filter<#= metadata.PropertyName #>(<#= metadata.PropTypeName #> entity)
<#+ 	this.GenerateOpeningBrace(); 
#>
return (<#+  
		for(int i = 0; i < thisKeyProps.Length; i++)
		{
#>entity.<#= otherKeyProps[i] #> == this.<#= thisKeyProps[i] #><#+
			if(i + 1 < thisKeyProps.Length)
			{
				#> && <#+
			}
		}
#>);
<#+
		this.GenerateClosingBrace();
	}
	
	private void GenerateCollectionSideAssociation(PropertyDescriptor pd)
	{
		AssociationMetadata metadata = new AssociationMetadata(pd);
		this.GenerateAssociationField(metadata);
		this.GenerateCollectionAssociationProperty(metadata);
		this.GenerateAssociationFilterMethod(metadata);		
	}
	
	private void GenerateCollectionAssociationProperty(AssociationMetadata metadata)
	{
		this.GenerateAssociationPropertyDeclaration(metadata);
		this.GenerateOpeningBrace();
		bool isBiDirectionalCollection = this.GenerateCollectionAssociationPropertyGetter(metadata);
		this.GenerateClosingBrace();
		
		if(isBiDirectionalCollection)
		{
			this.GenerateAttachMethod(metadata);
			this.GenerateDetachMethod(metadata);
		}
	}
	
	private bool GenerateCollectionAssociationPropertyGetter(AssociationMetadata metadata)
	{
		PropertyDescriptor reverseAssociationMember = GetReverseAssociation(metadata.PropertyDescriptor, metadata.AssociationAttribute);
		
		bool isBiDirectionalAssociation = (reverseAssociationMember != null) && this.CanGenerateProperty(reverseAssociationMember);
		string revName = isBiDirectionalAssociation ? reverseAssociationMember.Name : string.Empty;

		bool isBiDirectionalCollection = isBiDirectionalAssociation && metadata.IsCollection;
		
		string detachMethodName = "Detach" + metadata.PropertyName;
		string attachMethodName = "Attach" + metadata.PropertyName;
#>
get
<#+
		this.GenerateOpeningBrace();	
#>
if(this.<#= metadata.FieldName #> == null)
<#+
		this.GenerateOpeningBrace();	
#>
this.<#= metadata.FieldName #> = new <#= metadata.AssociationTypeName #>(this, "<#= metadata.PropertyName #>", this.Filter<#= metadata.PropertyName #><#+
		if(isBiDirectionalCollection)
		{
#>, this.<#= attachMethodName #>, this.<#= detachMethodName #><#+			
		}
#>);
<#+
		this.GenerateClosingBrace();
#>
return this.<#= metadata.FieldName #>;
<#+
		this.GenerateClosingBrace();
		
		return isBiDirectionalCollection;
	}
	
	private void GenerateAttachMethod(AssociationMetadata metadata)
	{
		PropertyDescriptor reverseAssociationMember = GetReverseAssociation(metadata.PropertyDescriptor, metadata.AssociationAttribute);		
		string revName = reverseAssociationMember.Name;
		string attachMethodName = "Attach" + metadata.PropertyName;
#>
private void <#= attachMethodName #>(<#= metadata.PropTypeName #> entity)
<#+
		this.GenerateOpeningBrace();		
		if(!metadata.IsCollection)
		{
#>
entity.<#= revName #>.Add(this);
<#+
		}
		else
		{
#>
entity.<#= revName #> = this;
<#+
		}		
		this.GenerateClosingBrace();
	}
	
	private void GenerateDetachMethod(AssociationMetadata metadata)
	{
		PropertyDescriptor reverseAssociationMember = GetReverseAssociation(metadata.PropertyDescriptor, metadata.AssociationAttribute);		
		string revName = reverseAssociationMember.Name;
		string detachMethodName = "Detach" + metadata.PropertyName;
#>
private void <#= detachMethodName #>(<#= metadata.PropTypeName #> entity)
<#+
		this.GenerateOpeningBrace();		
		if(!metadata.IsCollection)
		{
#>
entity.<#= revName #>.Remove(this);
<#+
		}
		else
		{
#>
entity.<#= revName #> = null;
<#+
		}		
		this.GenerateClosingBrace();	
	}
#>
