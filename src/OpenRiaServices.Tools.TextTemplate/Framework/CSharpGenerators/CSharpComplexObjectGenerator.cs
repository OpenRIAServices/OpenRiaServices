// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace OpenRiaServices.Tools.TextTemplate.CSharpGenerators
{
    using System;
    using System.ComponentModel;
    using System.Collections.Generic;
    using System.Linq;
    using OpenRiaServices.Server;
    using OpenRiaServices.Tools.TextTemplate;
    using OpenRiaServices.Tools;
    using System.Runtime.Serialization;
    using System.Reflection;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class CSharpComplexObjectGenerator : OpenRiaServices.Tools.TextTemplate.ComplexObjectGenerator
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
 this.Generate(); 
            return this.GenerationEnvironment.ToString();
        }


private void GenerateParameterDeclaration(IEnumerable<DomainOperationParameter> parameters, bool generateAttributes)
{
	DomainOperationParameter[] paramInfos = parameters.ToArray();
	for(int i = 0; i < paramInfos.Length; i++)
	{
		DomainOperationParameter paramInfo = paramInfos[i];
		if(generateAttributes)
		{
			IEnumerable<Attribute> paramAttributes = paramInfo.Attributes.Cast<Attribute>();
			this.GenerateAttributes(paramAttributes);
		}
		string paramTypeName = CodeGenUtilities.GetTypeName(CodeGenUtilities.TranslateType(paramInfo.ParameterType));
		string paramName = CodeGenUtilities.GetSafeName(paramInfo.Name);
		
this.Write(this.ToStringHelper.ToStringWithCulture(paramTypeName));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(paramName));


		if(i + 1 < paramInfos.Length)
		{
			
this.Write(", ");


		}
	}
}

private void GenerateOpeningBrace()
{

this.Write("{\r\n");


	PushIndent("\t");
}

private void GenerateClosingBrace()
{
	PopIndent();

this.Write("}\r\n");


}

private void GenerateNamespace(string ns)
{

this.Write("namespace ");

this.Write(this.ToStringHelper.ToStringWithCulture(ns));

this.Write("\r\n");


}



	/// <summary>
	/// Generates attribute declarations in C#.
	/// </summary>
	/// <param name="attributes">The list of attributes to be generated.</param>
	protected virtual void GenerateAttributes(IEnumerable<Attribute> attributes)
	{	
		this.GenerateAttributes(attributes, false);
	}
	
	/// <summary>
	/// Generates attribute declarations in C#.
	/// </summary>
	/// <param name="attributes">The attributes to be generated.</param>
	/// <param name="forcePropagation">Causes the attributes to be generated even if the attribute verification fails.</param>
	protected virtual void GenerateAttributes(IEnumerable<Attribute> attributes, bool forcePropagation)
	{
		foreach (Attribute attribute in attributes.OrderBy(a => a.GetType().Name))
        {
			AttributeDeclaration attributeDeclaration = AttributeGeneratorHelper.GetAttributeDeclaration(attribute, this.ClientCodeGenerator, forcePropagation);
            if (attributeDeclaration == null || attributeDeclaration.HasErrors)
			{
				continue;
			}
			
			string attributeTypeName = CodeGenUtilities.GetTypeName(attributeDeclaration.AttributeType);

this.Write("[");

this.Write(this.ToStringHelper.ToStringWithCulture(attributeTypeName));

this.Write("(");


			if (attributeDeclaration.ConstructorArguments.Count > 0)
            {
				for (int i = 0; i < attributeDeclaration.ConstructorArguments.Count; i++)
            	{
                	object value = attributeDeclaration.ConstructorArguments[i];
					string stringValue = AttributeGeneratorHelper.ConvertValueToCode(value, true);
					
this.Write(this.ToStringHelper.ToStringWithCulture(stringValue));


					if (i + 1 < attributeDeclaration.ConstructorArguments.Count)
					{
					
this.Write(", ");


					}
	            }
			}
			if (attributeDeclaration.NamedParameters.Count > 0)
            {
				if (attributeDeclaration.ConstructorArguments.Count > 0)
            	{
					
this.Write(", ");


				}
				
				for (int i = 0; i < attributeDeclaration.NamedParameters.Count; i++)
                {
                    KeyValuePair<string, object> pair = attributeDeclaration.NamedParameters.ElementAt(i);
                    string stringValue = AttributeGeneratorHelper.ConvertValueToCode(pair.Value, true);
					
this.Write(this.ToStringHelper.ToStringWithCulture(pair.Key));

this.Write("=");

this.Write(this.ToStringHelper.ToStringWithCulture(stringValue));


                    if (i + 1 < attributeDeclaration.NamedParameters.Count)
                    {
					
this.Write(",");


                    }
                }
			}

this.Write(")]\r\n");


		}
	}
	
	private void GenerateDataContractAttribute(Type sourceType)
	{
		string dataContractNamespace, dataContractName;
		AttributeGeneratorHelper.GetContractNameAndNamespace(sourceType, out dataContractNamespace, out dataContractName);

this.Write("[System.Runtime.Serialization.DataContract(Namespace = \"");

this.Write(this.ToStringHelper.ToStringWithCulture(dataContractNamespace));

this.Write("\"");

  
		if(!string.IsNullOrEmpty(dataContractName))
		{
		
this.Write(", Name = \" ");

this.Write(this.ToStringHelper.ToStringWithCulture(dataContractName));

this.Write("\"");


		}

this.Write(")]\r\n");


	}	



	private void GenerateNamespace()
	{

this.Write("namespace ");

this.Write(this.ToStringHelper.ToStringWithCulture(this.Type.Namespace));

this.Write("\r\n");


	}
	
	/// <summary>
    /// Generates the type declaration.
    /// </summary>
	protected virtual void GenerateClassDeclaration()
	{
		this.GenerateTypeAttributes();
		
		string baseType = this.GetBaseTypeName();
		string visibility = this.GetClassVisibility();

this.Write(this.ToStringHelper.ToStringWithCulture(visibility));

this.Write(" partial class ");

this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenUtilities.GetSafeName(this.Type.Name)));

this.Write(" : ");

this.Write(this.ToStringHelper.ToStringWithCulture(baseType));

this.Write("\r\n");


	}
	
	private string GetClassVisibility()
    {
        string visibility = "public";
        if (this.IsAbstract)
        {
            visibility += " abstract";
        }
        if (!this.IsAbstract && !this.GetDerivedTypes().Any())
        {
            visibility += " sealed";
        }
        return visibility;
    }
	
	private void GenerateTypeAttributes()
	{
		IEnumerable<Attribute> typeAttributes = this.GetTypeAttributes();
		this.GenerateAttributes(typeAttributes);
		this.GenerateDataContractAttribute(this.Type);
		
		if(!this.IsDerivedType)
		{
			foreach (Type derivedType in this.GetDerivedTypes().OrderBy(t => t.FullName))
            {

this.Write("[System.Runtime.Serialization.KnownType(typeof(");

this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenUtilities.GetTypeName(derivedType)));

this.Write("))]\r\n");


			}
		}
	}
	
	/// <summary>
    /// Generates the data contract type constructor.
    /// </summary>
	protected virtual void GenerateConstructor()
	{
		string ctorVisibility = this.IsAbstract ? "protected" : "public";

this.Write(this.ToStringHelper.ToStringWithCulture(ctorVisibility));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenUtilities.GetSafeName(this.Type.Name)));

this.Write("()\r\n{\r\n\tthis.OnCreated();\r\n}\r\n");


	}
	
	private void GeneratePropertiesInternal()
	{
		foreach(var property in this.Properties)
		{
			this.GenerateProperty(property);
		}
	}
	
	/// <summary>
    /// Generates the code for a property.
	/// <param name="propertyDescriptor">The PropertyDescriptor for which the property is to be generated.</param>
    /// </summary>
	protected virtual void GenerateProperty(PropertyDescriptor propertyDescriptor)
	{
		this.GeneratePropertyDeclaration(propertyDescriptor);
		this.GenerateOpeningBrace();
		this.GeneratePropertyGetter(propertyDescriptor);
		this.GeneratePropertySetter(propertyDescriptor);
		this.GenerateClosingBrace();
		this.GenerateBackingPrivateField(propertyDescriptor);
	}
	
	private void GeneratePropertyGetter(PropertyDescriptor propertyDescriptor)
	{
		string fieldName = CodeGenUtilities.MakeCompliantFieldName(propertyDescriptor.Name);

this.Write("get\r\n{\r\n\treturn this.");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));

this.Write(";\r\n} \r\n");


	}
	
	private void GeneratePropertySetter(PropertyDescriptor propertyDescriptor)
	{
		string fieldName = CodeGenUtilities.MakeCompliantFieldName(propertyDescriptor.Name);

this.Write("set \r\n");

 this.GenerateOpeningBrace(); 

this.Write("if(this.");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));

this.Write(" != value)\r\n");

 this.GenerateOpeningBrace(); 

this.Write("this.On");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyDescriptor.Name));

this.Write("Changing(value);\t\r\n");


		bool propertyIsReadOnly = this.IsPropertyReadOnly(propertyDescriptor);
        if (!propertyIsReadOnly)
        {

this.Write("this.RaiseDataMemberChanging(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyDescriptor.Name));

this.Write("\");\r\n");


		}

this.Write("this.ValidateProperty(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyDescriptor.Name));

this.Write("\", value);\r\nthis.");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));

this.Write(" = value;\r\n");


		if (!propertyIsReadOnly)
        {

this.Write("this.RaiseDataMemberChanged(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyDescriptor.Name));

this.Write("\");\r\n");


		}
		else
		{

this.Write("this.RaisePropertyChanged(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyDescriptor.Name));

this.Write("\");\r\n");


		}	

this.Write("this.On");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyDescriptor.Name));

this.Write("Changed();\r\n");


		this.GenerateClosingBrace();
		this.GenerateClosingBrace();
	}
	
	private void GenerateBackingPrivateField(PropertyDescriptor propertyDescriptor)
	{
		Type propertyType = CodeGenUtilities.TranslateType(propertyDescriptor.PropertyType);
		string propertyTypeName = CodeGenUtilities.GetTypeName(propertyType);
		string fieldName = CodeGenUtilities.MakeCompliantFieldName(propertyDescriptor.Name);

this.Write("private ");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyTypeName));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));

this.Write(";\r\n");


	}
	
	private void GeneratePropertyDeclaration(PropertyDescriptor propertyDescriptor)
	{		
		Type propertyType = CodeGenUtilities.TranslateType(propertyDescriptor.PropertyType);
		string propertyTypeName = CodeGenUtilities.GetTypeName(propertyType);
		IEnumerable<Attribute> propAttributes = this.GetPropertyAttributes(propertyDescriptor, propertyType);
		string propertyName = CodeGenUtilities.GetSafeName(propertyDescriptor.Name);
		this.GenerateAttributes(propAttributes);

this.Write("public ");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyTypeName));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));

this.Write("\r\n");


	}

	/// <summary>
	/// Generates the notification methods on the class.
	/// </summary>
	protected virtual void GenerateNotificationMethods()
	{

this.Write("partial void OnCreated();\r\n");


		foreach(PropertyDescriptor pd in this.NotificationMethodList)
		{
			Type propType = CodeGenUtilities.TranslateType(pd.PropertyType);			
			string propertyTypeName = CodeGenUtilities.GetTypeName(propType);

this.Write("partial void On");

this.Write(this.ToStringHelper.ToStringWithCulture(pd.Name));

this.Write("Changing(");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyTypeName));

this.Write(" value);\r\npartial void On");

this.Write(this.ToStringHelper.ToStringWithCulture(pd.Name));

this.Write("Changed();\r\n");


		}
	}

    }
}
