//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenRiaServices.DomainServices.Client.Test.Services {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="Services.TestServices")]
    public interface TestServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:TestServices/CreateNewDatabase", ReplyAction="urn:TestServices/CreateNewDatabaseResponse")]
        void CreateNewDatabase(string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TestServices/CreateNewDatabase", ReplyAction="urn:TestServices/CreateNewDatabaseResponse")]
        System.IAsyncResult BeginCreateNewDatabase(string databaseName, System.AsyncCallback callback, object asyncState);
        
        void EndCreateNewDatabase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:TestServices/ReleaseNewDatabase", ReplyAction="urn:TestServices/ReleaseNewDatabaseResponse")]
        void ReleaseNewDatabase(string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TestServices/ReleaseNewDatabase", ReplyAction="urn:TestServices/ReleaseNewDatabaseResponse")]
        System.IAsyncResult BeginReleaseNewDatabase(string databaseName, System.AsyncCallback callback, object asyncState);
        
        void EndReleaseNewDatabase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:TestServices/RestartApp", ReplyAction="urn:TestServices/RestartAppResponse")]
        void RestartApp();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TestServices/RestartApp", ReplyAction="urn:TestServices/RestartAppResponse")]
        System.IAsyncResult BeginRestartApp(System.AsyncCallback callback, object asyncState);
        
        void EndRestartApp(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TestServicesChannel : OpenRiaServices.DomainServices.Client.Test.Services.TestServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServicesClient : System.ServiceModel.ClientBase<OpenRiaServices.DomainServices.Client.Test.Services.TestServices>, OpenRiaServices.DomainServices.Client.Test.Services.TestServices {
        
        private BeginOperationDelegate onBeginCreateNewDatabaseDelegate;
        
        private EndOperationDelegate onEndCreateNewDatabaseDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewDatabaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginReleaseNewDatabaseDelegate;
        
        private EndOperationDelegate onEndReleaseNewDatabaseDelegate;
        
        private System.Threading.SendOrPostCallback onReleaseNewDatabaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginRestartAppDelegate;
        
        private EndOperationDelegate onEndRestartAppDelegate;
        
        private System.Threading.SendOrPostCallback onRestartAppCompletedDelegate;
        
        public TestServicesClient() {
        }
        
        public TestServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateNewDatabaseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReleaseNewDatabaseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RestartAppCompleted;
        
        public void CreateNewDatabase(string databaseName) {
            base.Channel.CreateNewDatabase(databaseName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateNewDatabase(string databaseName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewDatabase(databaseName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCreateNewDatabase(System.IAsyncResult result) {
            base.Channel.EndCreateNewDatabase(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewDatabase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string databaseName = ((string)(inValues[0]));
            return this.BeginCreateNewDatabase(databaseName, callback, asyncState);
        }
        
        private object[] OnEndCreateNewDatabase(System.IAsyncResult result) {
            this.EndCreateNewDatabase(result);
            return null;
        }
        
        private void OnCreateNewDatabaseCompleted(object state) {
            if ((this.CreateNewDatabaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewDatabaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewDatabaseAsync(string databaseName) {
            this.CreateNewDatabaseAsync(databaseName, null);
        }
        
        public void CreateNewDatabaseAsync(string databaseName, object userState) {
            if ((this.onBeginCreateNewDatabaseDelegate == null)) {
                this.onBeginCreateNewDatabaseDelegate = new BeginOperationDelegate(this.OnBeginCreateNewDatabase);
            }
            if ((this.onEndCreateNewDatabaseDelegate == null)) {
                this.onEndCreateNewDatabaseDelegate = new EndOperationDelegate(this.OnEndCreateNewDatabase);
            }
            if ((this.onCreateNewDatabaseCompletedDelegate == null)) {
                this.onCreateNewDatabaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewDatabaseCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewDatabaseDelegate, new object[] {
                        databaseName}, this.onEndCreateNewDatabaseDelegate, this.onCreateNewDatabaseCompletedDelegate, userState);
        }
        
        public void ReleaseNewDatabase(string databaseName) {
            base.Channel.ReleaseNewDatabase(databaseName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReleaseNewDatabase(string databaseName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReleaseNewDatabase(databaseName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReleaseNewDatabase(System.IAsyncResult result) {
            base.Channel.EndReleaseNewDatabase(result);
        }
        
        private System.IAsyncResult OnBeginReleaseNewDatabase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string databaseName = ((string)(inValues[0]));
            return this.BeginReleaseNewDatabase(databaseName, callback, asyncState);
        }
        
        private object[] OnEndReleaseNewDatabase(System.IAsyncResult result) {
            this.EndReleaseNewDatabase(result);
            return null;
        }
        
        private void OnReleaseNewDatabaseCompleted(object state) {
            if ((this.ReleaseNewDatabaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReleaseNewDatabaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReleaseNewDatabaseAsync(string databaseName) {
            this.ReleaseNewDatabaseAsync(databaseName, null);
        }
        
        public void ReleaseNewDatabaseAsync(string databaseName, object userState) {
            if ((this.onBeginReleaseNewDatabaseDelegate == null)) {
                this.onBeginReleaseNewDatabaseDelegate = new BeginOperationDelegate(this.OnBeginReleaseNewDatabase);
            }
            if ((this.onEndReleaseNewDatabaseDelegate == null)) {
                this.onEndReleaseNewDatabaseDelegate = new EndOperationDelegate(this.OnEndReleaseNewDatabase);
            }
            if ((this.onReleaseNewDatabaseCompletedDelegate == null)) {
                this.onReleaseNewDatabaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReleaseNewDatabaseCompleted);
            }
            base.InvokeAsync(this.onBeginReleaseNewDatabaseDelegate, new object[] {
                        databaseName}, this.onEndReleaseNewDatabaseDelegate, this.onReleaseNewDatabaseCompletedDelegate, userState);
        }
        
        public void RestartApp() {
            base.Channel.RestartApp();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRestartApp(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRestartApp(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRestartApp(System.IAsyncResult result) {
            base.Channel.EndRestartApp(result);
        }
        
        private System.IAsyncResult OnBeginRestartApp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginRestartApp(callback, asyncState);
        }
        
        private object[] OnEndRestartApp(System.IAsyncResult result) {
            this.EndRestartApp(result);
            return null;
        }
        
        private void OnRestartAppCompleted(object state) {
            if ((this.RestartAppCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RestartAppCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RestartAppAsync() {
            this.RestartAppAsync(null);
        }
        
        public void RestartAppAsync(object userState) {
            if ((this.onBeginRestartAppDelegate == null)) {
                this.onBeginRestartAppDelegate = new BeginOperationDelegate(this.OnBeginRestartApp);
            }
            if ((this.onEndRestartAppDelegate == null)) {
                this.onEndRestartAppDelegate = new EndOperationDelegate(this.OnEndRestartApp);
            }
            if ((this.onRestartAppCompletedDelegate == null)) {
                this.onRestartAppCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRestartAppCompleted);
            }
            base.InvokeAsync(this.onBeginRestartAppDelegate, null, this.onEndRestartAppDelegate, this.onRestartAppCompletedDelegate, userState);
        }
    }
}
