using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Build.Execution;
using Microsoft.Build.Evaluation;

namespace OpenRiaServices.DomainServices.Tools.Test
{
    /// <summary>
    /// Helper class for common MSBuild tasks
    /// </summary>
    public static class MsBuildHelper
    {
        public static string DefaultToolsVersion = "14.0";
        public static string ToolsVersion = "14.0";

        /// <summary>
        /// Extract the list of assemblies both generated and referenced by the named project.
        /// </summary>
        /// <returns></returns>
        public static List<string> GetReferenceAssemblies(string projectPath)
        {
            List<string> assemblies = new List<string>();
            GetReferenceAssemblies(projectPath, assemblies);
            return assemblies;
        }

        /// <summary>
        /// Adds the assembly references from the given project to the given list
        /// </summary>
        /// <param name="projectPath">Absolute path to the project file itself</param>
        /// <param name="assemblies">List to add assembly names to</param>
        public static void GetReferenceAssemblies(string projectPath, IList<string> assemblies)
        {
            projectPath = Path.GetFullPath(projectPath);

            var project = LoadProject(projectPath);

            // Ask to be told of generated outputs
            var results = project.Build(new string[] { "ResolveAssemblyReferences" });
            Assert.AreEqual(BuildResultCode.Success, results.OverallResult, "ResolveAssemblyReferences failed");

            foreach (var reference in project.ProjectInstance.GetItems("_ResolveAssemblyReferenceResolvedFiles"))
            {
                string assemblyPath = GetFullPath(projectPath, reference);

                if (!assemblies.Contains(assemblyPath))
                    assemblies.Add(assemblyPath);
            }

            foreach (var reference in project.ProjectInstance.GetItems("ProjectReference"))
            {
                string otherProjectPath = GetFullPath(projectPath, reference);
                // Project references recursively extract references
                string outputAssembly = GetOutputAssembly(otherProjectPath);

                if (!string.IsNullOrEmpty(outputAssembly) && !assemblies.Contains(outputAssembly))
                    assemblies.Add(outputAssembly);
            }

            MakeFullPaths(assemblies, Path.GetDirectoryName(projectPath));
        }

        private static string GetFullPath(string projectPath, ProjectItemInstance reference)
        {
            string otherProjectPath = reference.EvaluatedInclude;
            if (!Path.IsPathRooted(otherProjectPath))
            {
                otherProjectPath = Path.Combine(Path.GetDirectoryName(projectPath), otherProjectPath);
            }

            return otherProjectPath;
        }

        /// <summary>
        /// Gets the absolute path of the output assembly generated by the specified project
        /// </summary>
        /// <param name="projectPath">Absolute path to the project file</param>
        /// <returns>Absolute path to the generated output assembly (which may or may not exist)</returns>
        public static string GetOutputAssembly(string projectPath)
        {
            string outputAssembly = null;
            projectPath = Path.GetFullPath(projectPath);

            var project = LoadProject(projectPath);

            string outputPath = project.GetPropertyValue("OutputPath");
            string assemblyName = project.GetPropertyValue("AssemblyName");
            string outputType = project.GetPropertyValue("OutputType");

            if (!Path.IsPathRooted(outputPath))
                outputPath = Path.Combine(Path.GetDirectoryName(projectPath), outputPath);
            outputAssembly = Path.Combine(outputPath, assemblyName);
            outputAssembly = Path.GetFullPath(outputAssembly);

            string extension = outputType.Equals("Exe", StringComparison.InvariantCultureIgnoreCase) ? ".exe" : ".dll";
            outputAssembly += extension;
            return MakeFullPath(outputAssembly, Path.GetDirectoryName(projectPath));
        }

        internal static ProjectWrapper LoadProject(string projectPath)
        {
            var projectCollection = new ProjectCollection();
            projectCollection.DefaultToolsVersion = ToolsVersion;
            projectCollection.SetGlobalProperty("Configuration", GetConfiguration());

            var project = projectCollection.LoadProject(projectPath, ToolsVersion);
            project.SetProperty("BuildProjectReferences", "false");

            return new ProjectWrapper(project);
        }

        private static string GetConfiguration()
        {
#if SIGNED
            return "Signed";
#elif DEBUG
            return "Debug";
#else
            return "Release";
#endif
        }

        /// <summary>
        /// Gets the source files used by the given project
        /// </summary>
        /// <param name="projectPath">Absolute path to the project file itself</param>
        public static List<string> GetSourceFiles(string projectPath)
        {
            List<string> items = new List<string>();

            projectPath = Path.GetFullPath(projectPath);

            var project = LoadProject(projectPath);
            foreach (var buildItem in project.GetItems("Compile"))
            {
                items.Add(buildItem.EvaluatedInclude);
            }

            MakeFullPaths(items, Path.GetDirectoryName(projectPath));
            return items;
        }

        /// <summary>
        /// Expands any relative paths to be full paths, using the given base directory
        /// </summary>
        /// <param name="files"></param>
        /// <param name="baseDir"></param>
        public static void MakeFullPaths(IList<string> files, string baseDir)
        {
            for (int i = 0; i < files.Count; ++i)
            {
                files[i] = MakeFullPath(files[i], baseDir);
            }
        }

        public static string MakeFullPath(string file, string baseDir)
        {
            if (!Path.IsPathRooted(file))
            {
                file = Path.Combine(baseDir, file);
            }
            if (file.Contains(".."))
            {
                file = Path.GetFullPath(file);
            }
            return file;
        }

        /// <summary>
        /// Converts a collection of strings to a collection of task items.
        /// </summary>
        /// <param name="items"></param>
        /// <returns></returns>
        public static List<ITaskItem> AsTaskItems(IEnumerable<string> items)
        {
            List<ITaskItem> result = new List<ITaskItem>(items.Count());
            foreach (string s in items)
            {
                result.Add(new TaskItem(s));
            }
            return result;
        }

        public class ProjectWrapper
        {
            private ProjectInstance _projectInstance;

            public Project Project { get; }
            public ProjectInstance ProjectInstance
            {
                get
                {
                    return (_projectInstance) ?? (_projectInstance = BuildManager.DefaultBuildManager.GetProjectInstanceForBuild(Project));
                }
            }

            public ProjectWrapper(Project project)
            {
                this.Project = project;
            }

            public BuildResult Build(string[] targets, IEnumerable<Microsoft.Build.Framework.ILogger> loggers = null)
            {
                var manager = BuildManager.DefaultBuildManager;
                var parameters = new BuildParameters()
                {
                    GlobalProperties = new Dictionary<string, string>()
                     {
                         {"Configuration", "Debug" },
                     },
                    Loggers = loggers
                };

                var projectInstance = manager.GetProjectInstanceForBuild(Project);
                return manager.Build(parameters, new BuildRequestData(projectInstance, targets));
            }

            internal string GetPropertyValue(string v)
            {
                return this.Project.GetPropertyValue(v);
            }

            internal ICollection<ProjectItem> GetItems(string v)
            {
                return this.Project.GetItems(v);
            }
        }

        private class ErrorLogger : Microsoft.Build.Framework.ILogger
        {
            readonly List<string> _errors = new List<string>();

            public void Initialize(IEventSource eventSource)
            {
                eventSource.ErrorRaised += (s, a) => this._errors.Add($"{a.File}({a.LineNumber},{a.ColumnNumber}): error {a.Code}: {a.Message}");
            }

            public void Shutdown() { }

            public IEnumerable<string> Errors { get { return this._errors; } }
            public string Parameters { get; set; }
            public LoggerVerbosity Verbosity { get; set; }
        }
    }
}
