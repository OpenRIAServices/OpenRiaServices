queue:

  name: Hosted
  demands: 
  - DotNetFramework
  - msbuild
  - visualstudio
  - vstest
  - java

steps:

- task: NuGetInstaller@0
  displayName: 'NuGet restore RiaServices.sln'
  inputs:
    solution: '$(Parameters.solution)'
    nuGetVersion: 3.5.0.1829

- powershell: |
   sqllocaldb start MSSQLLocalDB
   if (-not $?) { write-error  "failed to start  MSSQLLocalDB" }
   
   .\Setup-TestDatabases.ps1

  displayName: 'Setup Test Databases'

- task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'sonarcloud.io'
    organization: openriaservices
    projectKey: 'OpenRIAServices_OpenRiaServices'
    projectName: OpenRiaServices
    projectVersion: '$(FullVersion)'
    extraProperties: |
     # Additional properties that will be passed to the scanner, 
     # Put one key=value per line, example:
     # sonar.exclusions=**/*.bin
     sonar.cs.vstest.reportsPaths='$(Agent.TempDirectory)'

- task: VSBuild@1
  displayName: 'Build solution RiaServices.sln'
  inputs:
    solution: '$(Parameters.solution)'
    vsVersion: 14.0
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    maximumCpuCount: true

- powershell: |
   # Write your powershell commands here.
   
   $port = 60002
   $iisExpressExe = "c:\Program Files (x86)\IIS Express\iisexpress.exe"
   $path = (Resolve-path "Test\WebsiteFullTrust")
   Write-Host $path
   Write-host "Starting site on port: $port"
   $params = "/port:$port /path:$path"
   $command = """$iisExpressExe"" $params"
   cmd /c start cmd /k "$command"
 
  displayName: 'Start test webserver'

- task: VSTest@2
  displayName: 'Test Assemblies **\$(BuildConfiguration)\*test*.dll;-:**\obj\**'
  inputs:
    testAssemblyVer2: |
     **\*test*.dll
     !**\obj\**
     !**\Silverlight\**

    runOnlyImpactedTests: false
    vsTestVersion: 14.0
    runInParallel: true
    codeCoverageEnabled: false
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    rerunFailedTests: true
    rerunFailedThreshold: 40
  timeoutInMinutes: 40


- task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
  displayName: 'Run Code Analysis'

- task: PowerShell@1
  displayName: 'PowerShell Script'
  inputs:
    scriptName: 'OpenRiaServices.NuGet/Pack-All.ps1'
    arguments: '-Version "$(FullVersion)"'
  enabled: false

- task: NuGetPackager@0
  displayName: 'NuGet Packager '
  inputs:
    searchPattern: 'OpenRiaServices.NuGet\**\*.nuspec;-:OpenRiaServices.NuGet\**\*.Signed.*nuspec;-:OpenRiaServices.NuGet\OpenRiaServices.EntityTools\**;-:OpenRiaServices.NuGet\OpenRiaServices.WebForms\**;-:OpenRiaServices.NuGet\OpenRiaServices.WindowsAzure\**'
    versionByBuild: byEnvVar
    versionEnvVar: FullVersion
  enabled: false
  continueOnError: true
  condition: succeededOrFailed()

- task: NuGetCommand@2
  displayName: 'NuGet pack'
  inputs:
    command: pack
    packagesToPack: 'OpenRiaServices.NuGet\**\*.nuspec;!OpenRiaServices.NuGet\**\*.Signed.*nuspec;!OpenRiaServices.NuGet\OpenRiaServices.EntityTools\**;!OpenRiaServices.NuGet\OpenRiaServices.WebForms\**;!OpenRiaServices.NuGet\OpenRiaServices.WindowsAzure\**'
    versioningScheme: byEnvVar
    versionEnvVar: FullVersion
    includeSymbols: true
  enabled: false
  continueOnError: true

- powershell: |
   if ($env:CONFIGURATION -ne "Signed") {
       dir OpenRiaServices.NuGet\*.nupkg -Recurse | where {$_.Name -match "OpenRiaServices.Signed"} | del}
   
   if ($env:CONFIGURATION -eq "Signed") {
       dir OpenRiaServices.NuGet\*.nupkg -Recurse  | where {-not ($_.Name -match "OpenRiaServices.Signed")} | del} 

  displayName: 'PowerShell Script'
  enabled: false

- task: NuGetPublisher@0
  displayName: 'NuGet Publisher '
  inputs:
    connectedServiceName: myget
    nuGetVersion: 4.0.0.2283
    continueOnEmptyNupkgMatch: true
  enabled: false
  continueOnError: true

- task: NuGetCommand@2
  displayName: 'NuGet custom'
  inputs:
    command: custom
    arguments: 'push '
  enabled: false

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: |
     OpenRiaServices.NuGet\**\*.nupkg
     .sonarqube\out\**
     !**\packages\**
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()


- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()


- task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
  displayName: 'Publish Quality Gate Result'
  continueOnError: true