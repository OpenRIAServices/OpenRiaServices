pool:
  vmImage: 'windows-2019'

variables:
  BuildConfiguration: 'release'
  BuildPlatform: 'any cpu'
  Solution: 'RiaServices.sln'
  DotNetVersion: '2.1.818'

steps:

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.9.2'
  inputs:
    versionSpec: 4.9.2
    
- task: GitVersion@4
  displayName: GitVersion
  inputs:
    preferBundledVersion: true

- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: '$(DotNetVersion)'
    installationPath: 'C:/Program Files/dotnet'

- powershell: |
   [string]$RepositoryRoot = "$(Build.SourcesDirectory)"
   
   $url = "https://web.archive.org/web/20190126163602if_/http://download.microsoft.com/download/3/A/3/3A35179D-5C87-4D0A-91EB-BF5FEDC601A4/sdk/silverlight_sdk.exe"
   $fileName = "silverlight_5_sdk.exe"
   $fullPath = (join-path $RepositoryRoot $fileName)
   
   if (Test-Path $fullPath)
   {
     echo "'$fileName' already downloading, reusing it"
   }
   else
   {
     echo "Downloading Silverlight sdk"
     Measure-Command {  (New-Object System.Net.WebClient).DownloadFile($url, $fullPath) }
     echo "Downloaded Silverlight sdk"
   }
   
   dir $fullPath

   $hash = Get-FileHash $fullPath -Algorithm "SHA256"
   If ($hash.Hash -ne "F52FE767C2290D04B21E8DA0ABABDF710B7933A976B2EB1C99EEA2F5529F6D10")
   {
     echo "Hash doesn't match the expected value. Actual value: $hash.Hash."
     $host.SetShouldExit(1)
     exit 1
   }

   echo "Installing Silverlight 5 SDK"
   "executing $fullPath /q  /norestart"
   
   & $fullPath "/q"  "/norestart"
   
   echo "Success  = '$?'"

  displayName: 'Download and install Silverlight 5 SDK'

- task: NuGetCommand@2
  displayName: 'NuGet restore RiaServices.sln'
  inputs:
    restoreSolution: '$(Solution)'
    configuration: '$(BuildConfiguration)'
    
- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'sonarcloud.io'
    organization: openriaservices
    projectKey: 'OpenRIAServices_OpenRiaServices'
    projectName: OpenRiaServices
    projectVersion: '$(GitVersion.NuGetVersion)'
    extraProperties: |
     # Additional properties that will be passed to the scanner, 
     # Put one key=value per line, example:
     sonar.exclusions=VisualStudio/ItemTemplates/**,VisualStudio/Templates/**;

- task: VSBuild@1
  displayName: 'Build solution RiaServices.sln'
  inputs:
    solution: '$(Solution)'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    maximumCpuCount: true
 
- powershell: |
   sqllocaldb start MSSQLLocalDB
   if (-not $?) { write-error  "failed to start  MSSQLLocalDB" }
   
   .\Setup-TestDatabases.ps1
   
   $port = 60002
   $iisExpressExe = "c:\Program Files (x86)\IIS Express\iisexpress.exe"
   $path = (Resolve-path "Test\WebsiteFullTrust")
   Write-Host $path
   Write-host "Starting site on port: $port"
   $params = "/port:$port /path:$path"
   $command = """$iisExpressExe"" $params"
   cmd /c start cmd /k "$command"
 
  displayName: 'Setup database and Start test webserver'

- task: VSTest@2
  displayName: 'Run tests'
  inputs:
    testAssemblyVer2: |
     **\bin\$(BuildConfiguration)\**\OpenRiaServices.DomainServices.*Test.dll
     VisualStudio\**\bin\$(BuildConfiguration)\**\OpenRiaServices.VisualStudio.*Test.dll
     !VisualStudio\**\bin\$(BuildConfiguration)\**\OpenRiaServices.DomainServices.*Test.dll
     !**\obj\**
     !**\sl5\**

    runOnlyImpactedTests: false
    runInParallel: true
    codeCoverageEnabled: true
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    rerunFailedTests: true
    rerunFailedThreshold: 40
    diagnosticsEnabled: false
  timeoutInMinutes: 40
  env:
    MSBuildSDKsPath: C:\Program Files\dotnet\sdk\$(DotNetVersion)\Sdks\

- task: SonarCloudAnalyze@1
  displayName: 'Run Code Analysis'
  continueOnError: true
  condition: or(succeeded(), and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master')))

- task: NuGetCommand@2
  displayName: 'NuGet pack'
  inputs:
    command: pack
    packagesToPack: 'OpenRiaServices.NuGet\OpenRiaServices.*\*.nuspec;!OpenRiaServices.NuGet\OpenRiaServices.EntityTools\**;!OpenRiaServices.NuGet\OpenRiaServices.WebForms\**;!OpenRiaServices.NuGet\OpenRiaServices.WindowsAzure\**'
    versioningScheme: byEnvVar
    versionEnvVar: GitVersion.NuGetVersion
    packDestination: '$(Build.ArtifactStagingDirectory)' 
  continueOnError: true
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: CopyFiles@2
  displayName: 'Copy VS Extension: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: |
     VisualStudio\Installer\bin\$(BuildConfiguration)\*.vsix
     VisualStudio\Installer\publishManifest.json
     VisualStudio\Installer\overview.md
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: SonarCloudPublish@1
  displayName: 'Publish Quality Gate Result'
  continueOnError: true  
  condition: or(succeeded(), and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
