pool:
  vmImage: 'windows-2019'

variables:
  BuildConfiguration: 'release'
  BuildPlatform: 'any cpu'
  Solution: 'src\RiaServices.sln'

steps:

- task: NuGetToolInstaller@0
  inputs:
    versionSpec: 5.0.2
    
- task: GitVersion@4
  displayName: GitVersion
  inputs:
    preferBundledVersion: true

- task: NuGetCommand@2
  displayName: 'NuGet restore RiaServices.sln'
  inputs:
    restoreSolution: '$(Solution)'
    configuration: '$(BuildConfiguration)'
    
- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'sonarcloud.io'
    organization: openriaservices
    projectKey: 'OpenRIAServices_OpenRiaServices'
    projectName: OpenRiaServices
    projectVersion: '$(GitVersion.NuGetVersion)'
    extraProperties: |
     # Additional properties that will be passed to the scanner, 
     # Put one key=value per line, example:
     sonar.exclusions=src\VisualStudio/ItemTemplates/**,src\VisualStudio/Templates/**;

- task: VSBuild@1
  displayName: 'Build solution RiaServices.sln'
  inputs:
    solution: '$(Solution)'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    maximumCpuCount: true
 
- powershell: |
   sqllocaldb start MSSQLLocalDB
   if (-not $?) { write-error  "failed to start  MSSQLLocalDB" }
   
   .\Setup-TestDatabases.ps1
   
  displayName: 'Setup database'

- task: VSTest@2
  displayName: 'Run tests'
  inputs:
    testAssemblyVer2: |
     **\bin\$(BuildConfiguration)\**\OpenRiaServices.DomainServices.*Test.dll
     src\VisualStudio\**\bin\$(BuildConfiguration)\**\OpenRiaServices.VisualStudio.*Test.dll
     !src\VisualStudio\**\bin\$(BuildConfiguration)\**\OpenRiaServices.DomainServices.*Test.dll
     !**\obj\**

    runOnlyImpactedTests: false
    runInParallel: true
    codeCoverageEnabled: true
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    diagnosticsEnabled: false
  timeoutInMinutes: 40

- task: SonarCloudAnalyze@1
  displayName: 'Run Code Analysis'
  continueOnError: true
  condition: or(succeeded(), and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master')))

- task: NuGetCommand@2
  displayName: 'NuGet pack'
  inputs:
    command: pack
    packagesToPack: 'NuGet\**\*.nuspec'
    versioningScheme: byEnvVar
    versionEnvVar: GitVersion.NuGetVersion
    packDestination: '$(Build.ArtifactStagingDirectory)' 
  continueOnError: true
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: CopyFiles@2
  displayName: 'Copy VS Extension: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: |
     src\VisualStudio\Installer\bin\$(BuildConfiguration)\*.vsix
     src\VisualStudio\Installer\publishManifest.json
     src\VisualStudio\Installer\assets\**
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: SonarCloudPublish@1
  displayName: 'Publish Quality Gate Result'
  continueOnError: true  
  condition: or(succeeded(), and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
