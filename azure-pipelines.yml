pool:
  vmImage: 'windows-2022'

variables:
  BuildConfiguration: 'release'
  BuildPlatform: 'any cpu'
  Solution: 'src\RiaServices.sln'
# Define the following variable for the build pipeline in order to enable sonarcloud analysis
# sonarcloud-endpoint: 'sonarcloud.io'

steps:

# install dotnet 6 sdk so we can run tests against them
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '6.0.x'

# install dotet 7 sdk to allow compilation target
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '7.0.x'

- task: NuGetToolInstaller@1
  inputs:
    versionSpec: 6.7.0
    
- task: gitversion/setup@0
  displayName: Install GitVersion
  inputs:
    versionSpec: '5.9.0'

- task: gitversion/execute@0
  displayName: Use GitVersion

- task: NuGetCommand@2
  displayName: 'NuGet restore RiaServices.sln'
  inputs:
    restoreSolution: '$(Solution)'
    configuration: '$(BuildConfiguration)'
    
- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  condition: variables['sonarcloud-endpoint']
  inputs:
    SonarCloud: 'sonarcloud.io'
    organization: openriaservices
    projectKey: 'OpenRIAServices_OpenRiaServices'
    projectName: OpenRiaServices
    projectVersion: '$(Build.BuildNumber)'
    extraProperties: |
     # Additional properties that will be passed to the scanner, 
     # Put one key=value per line, example:
     sonar.exclusions=src\VisualStudio/ItemTemplates/**,src\VisualStudio/Templates/**;

- task: VSBuild@1
  displayName: 'Build solution RiaServices.sln'
  inputs:
    solution: '$(Solution)'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    maximumCpuCount: true
 
- powershell: |
   sqllocaldb start MSSQLLocalDB
   if (-not $?) { write-error  "failed to start  MSSQLLocalDB" }
   
   .\Setup-TestDatabases.ps1
   
  displayName: 'Setup database'

- task: VSTest@2
  displayName: 'Run tests - net48'
  inputs:
    testAssemblyVer2: |
     **\bin\$(BuildConfiguration)\net4*\OpenRiaServices.*Test.dll
     !src\VisualStudio\**\bin\$(BuildConfiguration)\net4*\OpenRiaServices.*Test.dll
     !**\bin\$(BuildConfiguration)\*\OpenRiaServices.Common*Test.dll
     src\VisualStudio\Tools\Test\bin\$(BuildConfiguration)\net4*\OpenRiaServices.VisualStudio.*.Test.dll
     !**\obj\**

    runOnlyImpactedTests: false
    runInParallel: true
    runSettingsFile: 'src\test.runsettings'
    codeCoverageEnabled: true
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    diagnosticsEnabled: false
  timeoutInMinutes: 25

- task: VSTest@2
  displayName: 'Run tests - net6'
  inputs:
    testAssemblyVer2: |
     **\bin\$(BuildConfiguration)\*\OpenRiaServices.*Test.dll
     !**\bin\$(BuildConfiguration)\*\OpenRiaServices.Common*Test.dll
     !**\bin\$(BuildConfiguration)\net4*\OpenRiaServices.*Test.dll
     !**\obj\**

    runOnlyImpactedTests: false
    # Needed to hardcode path to test adapters for NET48 tests
    pathtoCustomTestAdapters: '$(Build.SourcesDirectory)\src\OpenRiaServices.Server.UnitTesting\Test\bin\$(BuildConfiguration)\net6.0\'
    runInParallel: true
    runSettingsFile: 'src\test.runsettings'
    codeCoverageEnabled: true
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    diagnosticsEnabled: false
  timeoutInMinutes: 25

- task: SonarCloudAnalyze@1
  displayName: 'Run Code Analysis'
  continueOnError: true
  condition: and(variables['sonarcloud-endpoint'], or(succeeded(), and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))))

- task: NuGetCommand@2
  displayName: 'NuGet pack'
  inputs:
    command: pack
    packagesToPack: 'NuGet\**\*.nuspec'
    versioningScheme: byEnvVar
    versionEnvVar: Build.BuildNumber
    packDestination: '$(Build.ArtifactStagingDirectory)' 
  continueOnError: true
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: CopyFiles@2
  displayName: 'Copy VS Extension: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: |
     src\VisualStudio\Installer\bin\$(BuildConfiguration)\*.vsix
     src\VisualStudio\Installer\publishManifest.json
     src\VisualStudio\Installer\assets\**
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  
- task: CopyFiles@2
  displayName: 'Copy dump files  to $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(Agent.TempDirectory)'
    Contents: |
     **\*.dmp
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: SonarCloudPublish@1
  displayName: 'Publish Quality Gate Result'
  continueOnError: true  
  condition: and(variables['sonarcloud-endpoint'], or(succeeded(), and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))))
